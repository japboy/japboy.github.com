{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/modify-template.js","webpack:///./node_modules/lit-html/lib/shady-render.js","webpack:///./node_modules/@polymer/lit-element/lib/updating-element.js","webpack:///./node_modules/@polymer/lit-element/lib/decorators.js","webpack:///./node_modules/@polymer/lit-element/lit-element.js","webpack:///./src/components/atoms/Balloon/index.ts","webpack:///./src/components/templates/Home/index.ts","webpack:///./src/components/pages/Home/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","directives","WeakMap","isDirective","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","node","nextSibling","removeChild","noChange","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","rewritesStyleAttribute","el","document","createElement","setAttribute","getAttribute","Template","[object Object]","result","element","this","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","createTreeWalker","previousNode","currentNode","nextNode","nodeType","hasAttributes","attributes","count","length","indexOf","stringForPart","strings","lastAttributeNameRegex","exec","attributeLookupName","test","toLowerCase","split","push","type","removeAttribute","tagName","nodeValue","parent","parentNode","lastIndex","insertBefore","createMarker","createTextNode","previousSibling","Node","TEXT_NODE","isTemplatePartActive","part","createComment","template_instance_TemplateInstance","processor","options","_parts","values","setValue","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","template_result_TemplateResult","html","isTextBinding","close","lastIndexOf","replace","match","p1","p2","p3","innerHTML","getHTML","isPrimitive","AttributeCommitter","dirty","_createPart","parts_AttributePart","text","v","Array","isArray","iterator","_getValue","comitter","committer","directive","parts_NodePart","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","_commitNode","_commitIterable","then","_commitPromise","clear","textContent","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","parts_BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","parts_EventPart","eventName","eventContext","_boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","event","defaultTemplateProcessor","prefix","templateCache","templateCaches","Map","set","getTemplateElement","render_parts","lit_html_html","walkerNodeFilter","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","DOCUMENT_FRAGMENT_NODE","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","nativeShadow","querySelector","removes","fromBooleanAttribute","toBooleanAttribute","notEqual","old","defaultPropertyDeclaration","attribute","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_changedProperties","_reflectingProperties","initialize","observedAttributes","_finalize","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","superProperties","getPrototypeOf","k","oldValue","_requestPropertyUpdate","configurable","_finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","Boolean","toAttribute","renderRoot","createRenderRoot","_saveInstanceProperties","constructor","attachShadow","styleElement","requestUpdate","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","_invalidate","_valueHasChanged","updateComplete","_hasRequestedUpdate","resolver","previousValidatePromise","_validate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","proto","_query","target","selector","queryFn","lit_element_LitElement","templateResult","render","localName","hasRendered","assign","appendInto","cacheKey","shadyTemplateFactory","ShadowRoot","host","Direction","__decorate","decorators","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","Balloon_AtomBalloon","direction","Bottom","define","Home_TemplateHome","active","initialized","setTimeout","toggle","hired","gravatar","Home_decorate"],"mappings":"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","file":"app-59bbb6d.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => typeof o === 'function' && directives.has(o);\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\nexport const rewritesStyleAttribute = (() => {\n    const el = document.createElement('div');\n    el.setAttribute('style', '{{bad value}}');\n    return el.getAttribute('style') !== '{{bad value}}';\n})();\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            // The actual previous node, accounting for removals: if a node is removed\n            // it will never be the previousNode.\n            let previousNode;\n            // Used to set previousNode at the top of the loop.\n            let currentNode;\n            while (walker.nextNode()) {\n                index++;\n                previousNode = currentNode;\n                const node = currentNode = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // If the attribute name contains special characters, lower-case\n                            // it so that on XML nodes with case-sensitive getAttribute() we\n                            // can still find the attribute, which will have been lower-cased\n                            // by the parser.\n                            //\n                            // If the attribute name doesn't contain special character, it's\n                            // important to _not_ lower-case it, in case the name is\n                            // case-sensitive, like with XML attributes like \"viewBox\".\n                            const attributeLookupName = (rewritesStyleAttribute && name === 'style') ?\n                                'style$' :\n                                /^[a-zA-Z-]*$/.test(name) ? name : name.toLowerCase();\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const nodeValue = node.nodeValue;\n                    if (nodeValue.indexOf(marker) < 0) {\n                        continue;\n                    }\n                    const parent = node.parentNode;\n                    const strings = nodeValue.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore((strings[i] === '') ? createMarker() :\n                            document.createTextNode(strings[i]), node);\n                        this.parts.push({ type: 'node', index: index++ });\n                    }\n                    parent.insertBefore(strings[lastIndex] === '' ?\n                        createMarker() :\n                        document.createTextNode(strings[lastIndex]), node);\n                    nodesToRemove.push(node);\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.nodeValue === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * previousSibling is being removed (thus it's not the\n                        //    `previousNode`)\n                        //  * previousSibling is not a Text node\n                        //\n                        // TODO(justinfagnani): We should be able to use the previousNode\n                        // here as the marker node and reduce the number of extra nodes we\n                        // add to a template. See\n                        // https://github.com/PolymerLabs/lit-html/issues/147\n                        const previousSibling = node.previousSibling;\n                        if (previousSibling === null || previousSibling !== previousNode ||\n                            previousSibling.nodeType !== Node.TEXT_NODE) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        this.parts.push({ type: 'node', index: index++ });\n                        nodesToRemove.push(node);\n                        // If we don't have a nextSibling add a marker node.\n                        // We don't have to check if the next node is going to be removed,\n                        // because that node will induce a new marker if so.\n                        if (node.nextSibling === null) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        currentNode = previousNode;\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.nodeValue.indexOf(marker, i + 1)) !== -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { reparentNodes } from './dom.js';\nimport { lastAttributeNameRegex, marker, nodeMarker, rewritesStyleAttribute } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            const close = s.lastIndexOf('>');\n            // We're in a text position if the previous string closed its last tag, an\n            // attribute position if the string opened an unclosed tag, and unchanged\n            // if the string had no brackets at all:\n            //\n            // \"...>...\": text position. open === -1, close > -1\n            // \"...<...\": attribute position. open > -1\n            // \"...\": no change. open === -1, close === -1\n            isTextBinding =\n                (close > -1 || isTextBinding) && s.indexOf('<', close + 1) === -1;\n            if (!isTextBinding && rewritesStyleAttribute) {\n                html = html.replace(lastAttributeNameRegex, (match, p1, p2, p3) => {\n                    return (p2 === 'style') ? `${p1}style$${p3}` : match;\n                });\n            }\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => (value === null ||\n    !(typeof value === 'object' || typeof value === 'function'));\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value.then !== undefined) {\n            this._commitPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.textContent = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value && this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    _commitPromise(value) {\n        this.value = value;\n        value.then((v) => {\n            if (this.value === value) {\n                this.setValue(v);\n                this.commit();\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this._options = getOptions(newListener);\n        if (shouldAddListener) {\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateResult } from './template-result.js';\nimport { Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n    }\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, there's no work to do.\n    if (styles.length === 0) {\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    litRender(result, container, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When rendering a TemplateResult, scope the template with ShadyCSS\n    if (container instanceof ShadowRoot && compatibleShadyCSSVersion &&\n        result instanceof TemplateResult) {\n        // Scope the element template one time only for this scope.\n        if (!shadyRenderSet.has(scopeName)) {\n            const part = parts.get(container);\n            const instance = part.value;\n            prepareTemplateStyles(container, instance.template, scopeName);\n        }\n        // Update styling if this is the initial render to this container.\n        if (!hasRendered) {\n            window.ShadyCSS.styleElement(container.host);\n        }\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// serializer/deserializers for boolean attribute\nconst fromBooleanAttribute = (value) => value !== null;\nconst toBooleanAttribute = (value) => value ? '' : null;\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = new Promise((resolve) => resolve(true));\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING = 1 << 3;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're _finalized.\n        this._finalize();\n        const attributes = [];\n        for (const [p, v] of this._classProperties) {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        }\n        return attributes;\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty('_classProperties')) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n        this._classProperties.set(name, options);\n        // Allow user defined accessors by not replacing an existing own-property\n        // accessor.\n        if (this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            get() { return this[key]; },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestPropertyUpdate(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     */\n    static _finalize() {\n        if (this.hasOwnProperty('_finalized') && this._finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor._finalize === 'function') {\n            superCtor._finalize();\n        }\n        this._finalized = true;\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        const props = this.properties;\n        // support symbols in properties (IE11 does not support this)\n        const propKeys = [\n            ...Object.getOwnPropertyNames(props),\n            ...(typeof Object.getOwnPropertySymbols === 'function')\n                ? Object.getOwnPropertySymbols(props)\n                : []\n        ];\n        for (const p of propKeys) {\n            // note, use of `any` is due to TypeSript lack of support for symbol in\n            // index types\n            this.createProperty(p, props[p]);\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options !== undefined && options.attribute;\n        return attribute === false\n            ? undefined\n            : (typeof attribute === 'string'\n                ? attribute\n                : (typeof name === 'string' ? name.toLowerCase()\n                    : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's `type`\n     * or `type.fromAttribute` property option.\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options && options.type;\n        if (type === undefined) {\n            return value;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const fromAttribute = type === Boolean\n            ? fromBooleanAttribute\n            : (typeof type === 'function' ? type : type.fromAttribute);\n        return fromAttribute ? fromAttribute(value) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options === undefined || options.reflect === undefined) {\n            return;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const toAttribute = options.type === Boolean\n            ? toBooleanAttribute\n            : (options.type &&\n                options.type.toAttribute ||\n                String);\n        return toAttribute(value);\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this.renderRoot = this.createRenderRoot();\n        this._saveInstanceProperties();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        for (const [p] of this.constructor\n            ._classProperties) {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        }\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        for (const [p, v] of this._instanceProperties) {\n            this[p] = v;\n        }\n        this._instanceProperties = undefined;\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Uses ShadyCSS to keep element DOM updated.\n     */\n    connectedCallback() {\n        if ((this._updateState & STATE_HAS_UPDATED)) {\n            if (window.ShadyCSS !== undefined) {\n                window.ShadyCSS.styleElement(this);\n            }\n        }\n        else {\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() { }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attrValue = ctor._propertyValueToAttribute(value, options);\n        if (attrValue !== undefined) {\n            const attr = ctor._attributeNameForProperty(name, options);\n            if (attr !== undefined) {\n                // Track if the property is being reflected to avoid\n                // setting the property again via `attributeChangedCallback`. Note:\n                // 1. this takes advantage of the fact that the callback is synchronous.\n                // 2. will behave incorrectly if multiple attributes are in the reaction\n                // stack at time of calling. However, since we process attributes\n                // in `update` this should not be possible (or an extreme corner case\n                // that we'd like to discover).\n                // mark state reflecting\n                this._updateState = this._updateState | STATE_IS_REFLECTING;\n                if (attrValue === null) {\n                    this.removeAttribute(attr);\n                }\n                else {\n                    this.setAttribute(attr, attrValue);\n                }\n                // mark state not reflecting\n                this._updateState = this._updateState & ~STATE_IS_REFLECTING;\n            }\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (!(this._updateState & STATE_IS_REFLECTING)) {\n            const ctor = this.constructor;\n            const propName = ctor._attributeToPropertyMap.get(name);\n            if (propName !== undefined) {\n                const options = ctor._classProperties.get(propName);\n                this[propName] =\n                    ctor._propertyValueFromAttribute(value, options);\n            }\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        if (name !== undefined) {\n            const options = this.constructor\n                ._classProperties.get(name) ||\n                defaultPropertyDeclaration;\n            return this._requestPropertyUpdate(name, oldValue, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Requests an update for a specific property and records change information.\n     * @param name {PropertyKey} name of requesting property\n     * @param oldValue {any} old value of requesting property\n     * @param options {PropertyDeclaration}\n     */\n    _requestPropertyUpdate(name, oldValue, options) {\n        if (!this.constructor\n            ._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n            return this.updateComplete;\n        }\n        // track old value when changing.\n        if (!this._changedProperties.has(name)) {\n            this._changedProperties.set(name, oldValue);\n        }\n        // add to reflecting properties set\n        if (options.reflect === true) {\n            if (this._reflectingProperties === undefined) {\n                this._reflectingProperties = new Map();\n            }\n            this._reflectingProperties.set(name, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Invalidates the element causing it to asynchronously update regardless\n     * of whether or not any property changes are pending. This method is\n     * automatically called when any registered property changes.\n     */\n    async _invalidate() {\n        if (!this._hasRequestedUpdate) {\n            // mark state updating...\n            this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n            let resolver;\n            const previousValidatePromise = this._updatePromise;\n            this._updatePromise = new Promise((r) => resolver = r);\n            await previousValidatePromise;\n            this._validate();\n            resolver(!this._hasRequestedUpdate);\n        }\n        return this.updateComplete;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    /**\n     * Validates the element by updating it.\n     */\n    _validate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        if (this.shouldUpdate(this._changedProperties)) {\n            const changedProperties = this._changedProperties;\n            this.update(changedProperties);\n            this._markUpdated();\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n        else {\n            this._markUpdated();\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() { return this._updatePromise; }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated DOM in the element's\n     * `renderRoot`. Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            for (const [k, v] of this._reflectingProperties) {\n                this._propertyToAttribute(k, this[k], v);\n            }\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) { }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) { }\n}\n/**\n * Maps attribute names to properties; for example `foobar` attribute\n * to `fooBar` property.\n */\nUpdatingElement._attributeToPropertyMap = new Map();\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement._finalized = true;\n/**\n * Memoized list of all class properties, including any superclass properties.\n */\nUpdatingElement._classProperties = new Map();\nUpdatingElement.properties = {};\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n *\n * In TypeScript, the `tagName` passed to `customElement` must be a key of the\n * `HTMLElementTagNameMap` interface. To add your element to the interface,\n * declare the interface in this module:\n *\n *     @customElement('my-element')\n *     export class MyElement extends LitElement {}\n *\n *     declare global {\n *       interface HTMLElementTagNameMap {\n *         'my-element': MyElement;\n *       }\n *     }\n *\n */\nexport const customElement = (tagName) => (clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason. `Constructor<HTMLElement>`\n    // is helpful to make sure the decorator is applied to elements however.\n    return clazz;\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n */\nexport const property = (options) => (proto, name) => {\n    proto.constructor.createProperty(name, options);\n};\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n */\nexport const query = _query((target, selector) => target.querySelector(selector));\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n */\nexport const queryAll = _query((target, selector) => target.querySelectorAll(selector));\n/**\n * Base-implementation of `@query` and `@queryAll` decorators.\n *\n * @param queryFn exectute a `selector` (ie, querySelector or querySelectorAll)\n * against `target`.\n */\nfunction _query(queryFn) {\n    return (selector) => (proto, propName) => {\n        Object.defineProperty(proto, propName, {\n            get() { return queryFn(this.renderRoot, selector); },\n            enumerable: true,\n            configurable: true,\n        });\n    };\n}\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => (proto, name) => {\n    // This comment is here to fix a disagreement between formatter and linter\n    Object.assign(proto[name], options);\n};\n//# sourceMappingURL=decorators.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg } from 'lit-html/lit-html';\nexport class LitElement extends UpdatingElement {\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     * @returns {TemplateResult} Must return a lit-html TemplateResult.\n     */\n    render() { }\n}\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, property } from '@polymer/lit-element';\nvar Direction;\n(function (Direction) {\n    Direction[\"Top\"] = \"top\";\n    Direction[\"Left\"] = \"left\";\n    Direction[\"Right\"] = \"right\";\n    Direction[\"Bottom\"] = \"bottom\";\n})(Direction || (Direction = {}));\nclass AtomBalloon extends LitElement {\n    constructor() {\n        super();\n        this.direction = Direction.Bottom;\n    }\n    render() {\n        return html `\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n        }\n        .balloon {\n          background-color: #0a0a0a;\n          border-radius: 3px;\n          box-sizing: border-box;\n          color: #fff;\n          display: inline-block;\n          font-size: 16px;\n          margin: 1.5em 0;\n          width: 280px;\n          padding: 7px 10px;\n          position: relative;\n        }\n        .balloon.bottom::before {\n          border-bottom: 15px solid transparent;\n          border-left: 15px solid transparent;\n          border-right: 15px solid transparent;\n          border-top: 15px solid #0a0a0a;\n          content: \"\";\n          left: 50%;\n          margin-left: -15px;\n          position: absolute;\n          top: 100%;\n        }\n        .balloon.top::before {\n          border-bottom: 15px solid #0a0a0a;\n          border-left: 15px solid transparent;\n          border-right: 15px solid transparent;\n          border-top: 15px solid transparent;\n          content: \"\";\n          left: 50%;\n          margin-left: -15px;\n          margin-top: -30px;\n          position: absolute;\n          top: 0;\n        }\n      </style>\n      <div class=\"balloon ${this.direction}\">\n        <slot></slot>\n      </div>\n    `;\n    }\n}\n__decorate([\n    property({ type: String })\n], AtomBalloon.prototype, \"direction\", void 0);\nwindow.customElements.define('atom-balloon', AtomBalloon);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, property } from '@polymer/lit-element';\nimport '@/components/atoms/Balloon';\nclass TemplateHome extends LitElement {\n    constructor() {\n        super();\n        this.active = false;\n        this.initialized = false;\n        setTimeout(this.toggle.bind(this), 600);\n    }\n    firstUpdated() {\n        this.initialized = true;\n    }\n    toggle() {\n        this.active = !this.active;\n        if (this.initialized && !this.active) {\n            this.hired = !this.hired;\n        }\n        else {\n            this.hired = false;\n        }\n        this.requestUpdate();\n    }\n    render() {\n        return html `\n      <style>\n        .portrait {\n          background-color: #eee;\n          border-radius: 50px;\n          cursor: pointer;\n          height: 100px;\n          left: calc(50% - 50px);\n          position: absolute;\n          top: calc(75% - 50px);\n          transform: rotate(0);\n          transition-duration: 0.3s;\n          transition-property: transform;\n          width: 100px;\n        }\n        .portrait[aria-selected=\"true\"] {\n          transform: rotate(10deg);\n        }\n        .balloon {\n          left: calc(50% - 140px);\n          margin-top: 10px;\n          opacity: 0;\n          position: absolute;\n          top: calc(75% - 340px);\n          transition-duration: 0.3s;\n          transition-property: margin-top, opacity;\n        }\n        .balloon[aria-selected=\"true\"] {\n          margin-top: 0;\n          opacity: 1;\n        }\n        .linkedin {\n          background-color: #0077b5;\n          border-radius: 3px;\n          box-sizing: border-box;\n          color: #fff;\n          left: 50%;\n          margin-left: -38px;\n          margin-top: 70px;\n          position: absolute;\n          text-align: center;\n          top: 75%;\n          width: 76px;\n          padding: 3px;\n          font-size: smaller;\n        }\n        .linkedin a:link,\n        .linkedin a:visited {\n          color: #fff;\n          text-decoration: none;\n        }\n      </style>\n\n      <main>\n        <img\n          aria-selected=\"${this.active ? 'true' : 'false'}\"\n          class=\"portrait\"\n          height=\"100\"\n          src=\"https://www.gravatar.com/avatar/${this.gravatar}?s=200\"\n          width=\"100\"\n          @click=\"${this.toggle}\"\n        >\n        <atom-balloon\n          aria-selected=\"${this.active ? 'true' : 'false'}\"\n          class=\"balloon\"\n          direction=\"bottom\"\n        >\n          <p>Hi, I'm Yu Inao.<br>Currently working as a senior web frontend developer in Tokyo.</p>\n          <p>My passions focus on web UI development, component-based UI design, performant web, web apps, &amp; web standards.</p>\n        </atom-balloon>\n        ${this.hired\n            ? html `\n            <p class=\"linkedin\">\n              <a href=\"https://www.linkedin.com/in/yuinao/\">LinkedIn</a>\n            </p>\n          `\n            : html ``}\n      </main>\n    `;\n    }\n}\n__decorate([\n    property({ type: String })\n], TemplateHome.prototype, \"gravatar\", void 0);\nwindow.customElements.define('template-home', TemplateHome);\n","import { LitElement, html } from '@polymer/lit-element';\nimport '@/components/templates/Home';\nexport class PageHome extends LitElement {\n    static get properties() {\n        return {};\n    }\n    constructor() {\n        super();\n    }\n    render() {\n        return html `\n      <template-home gravatar=\"1e4b7d2f20a2ecb20497d9b8704e6107\"></template-home>\n    `;\n    }\n}\nwindow.customElements.define('page-home', PageHome);\n"],"sourceRoot":""}
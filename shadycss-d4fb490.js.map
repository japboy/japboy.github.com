{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@webcomponents/shadycss/src/unscoped-style-handler.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-util.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-settings.js","webpack:///./node_modules/@webcomponents/shadycss/src/common-regex.js","webpack:///./node_modules/@webcomponents/shadycss/src/css-parse.js","webpack:///./node_modules/@webcomponents/shadycss/src/template-map.js","webpack:///./node_modules/@webcomponents/shadycss/src/common-utils.js","webpack:///./node_modules/@webcomponents/shadycss/src/apply-shim-utils.js","webpack:///./node_modules/@webcomponents/shadycss/src/document-wait.js","webpack:///./node_modules/@webcomponents/shadycss/src/custom-style-interface.js","webpack:///./node_modules/@webcomponents/shadycss/entrypoints/custom-style-interface.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-transformer.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-info.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-properties.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-placeholder.js","webpack:///./node_modules/@webcomponents/shadycss/src/document-watcher.js","webpack:///./node_modules/@webcomponents/shadycss/src/scoping-shim.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-cache.js","webpack:///./node_modules/@webcomponents/shadycss/entrypoints/scoping-shim.js","webpack:///./node_modules/@webcomponents/shadycss/src/apply-shim.js","webpack:///./node_modules/@webcomponents/shadycss/entrypoints/apply-shim.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","styleTextSet","Set","scopingAttribute","processUnscopedStyle","style","text","textContent","has","add","newStyle","cloneNode","document","head","appendChild","isUnscopedStyle","hasAttribute","toCssText","rules","callback","css_parse","forEachRule","style_settings","rulesForStyle","isKeyframesSelector","rule","Boolean","KEYFRAMES_RULE","node","styleRuleCallback","keyframesRuleCallback","onlyActiveRules","skipRules","type","MEDIA_RULE","matchMedia","match","common_regex","window","matches","STYLE_RULE","MIXIN_RULE","r$","length","applyCss","cssText","moniker","target","contextNode","createElement","setAttribute","createScopeStyle","applyStyle","__webpack_exports__","applyStylePlaceHolder","findMatchingParen","processVariableAndFallback","setElementClassRaw","getIsExtends","gatherStyleText","splitSelectorList","getCssBuild","elementHasBuiltCss","isOptimalCssBuild","lastHeadApplyNode","placeHolder","createComment","after","scope","insertBefore","firstChild","nextSibling","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","start","level","str","indexOf","end","inner","substring","prefix","suffix","comma","trim","element","localName","is","typeExtension","getAttribute","extends","styleTextParts","styles","querySelectorAll","parentNode","removeChild","push","join","selector","parts","part","slice","CSS_BUILD_ATTR","undefined","__cssBuild","attrValue","buildComment","content","Comment","commentParts","split","getBuildComment","removeBuildComment","cssBuild","nativeShadow","nativeCssVariables","nativeCssVariables_","calcCssVariables","settings","navigator","userAgent","CSS","supports","ShadyCSS","nativeCss","VAR_ASSIGN","MIXIN_MATCH","VAR_CONSUMED","ANIMATION_MATCH","MEDIA_MATCH","BRACKETED","HOST_PREFIX","HOST_SUFFIX","StyleNode","parse","stringify","removeCustomPropAssignment","types","[object Object]","this","parseCss","ss","replace","code","arguments","repeat","_expandUnicodeEscapes","RX","multipleSpaces","lastIndexOf","AT_START","MEDIA_START","keyframesRule","pop","VAR_START","root","OPEN_BRACE","previous","CLOSE_BRACE","lex","comments","port","preserveProperties","_hasMixinRules","mixinApply","varApply","removeCustomPropApply","removeCustomProps","customProp","mixinProp","updateNativeProperties","getComputedStyleValue","detectMixin","_common_regex_js__WEBPACK_IMPORTED_MODULE_0__","properties","removeProperty","setProperty","getComputedStyle","getPropertyValue","test","lastIndex","invalidate","templateIsValid","templateIsValidating","startValidatingTemplate","_template_map_js__WEBPACK_IMPORTED_MODULE_0__","CURRENT_VERSION","NEXT_VERSION","VALIDATING_VERSION","promise","Promise","resolve","elementName","template","invalidateTemplate","_validating","then","resolveFn","readyPromise","whenReady","documentWait","requestAnimationFrame","readyState","addEventListener","custom_style_interface_CustomStyleInterface","SEEN_MARKER","CACHED_STYLE","transformFn","validateFn","enqueueDocumentValidation","customStyle","cs","getStyleForCustomStyle","styleToTransform","addCustomStyle","processStyles","defineProperties","transformCallback","fn","validateCallback","needsEnqueue","_src_custom_style_interface_js__WEBPACK_IMPORTED_MODULE_0__","_src_common_utils_js__WEBPACK_IMPORTED_MODULE_1__","_src_style_settings_js__WEBPACK_IMPORTED_MODULE_2__","customStyleInterface","elementExtends","body","CustomStyleInterface","SCOPE_NAME","NTH","SCOPE_DOC_SELECTOR","COMPLEX_SELECTOR_SEP","SIMPLE_SELECTOR_SEP","SIMPLE_SELECTOR_PREFIX","HOST","ROOT","SLOTTED","SLOTTED_START","RegExp","HOST_PAREN","SLOTTED_PAREN","DIR_PAREN","CSS_CLASS_PREFIX","PSEUDO_PREFIX","CLASS","SELECTOR_NO_MATCH","MATCHES","MATCHES_REPLACEMENT","style_transformer","shouldRemoveScope","_transformDom","startNode","transformer","c$","nodeType","ELEMENT_NODE","_content","childNodes","children","classList","remove","newValue","style_util","oldScope","newScope","styleRules","css","ext","hostScope","_calcHostScope","_calcElementScope","self","isScoped","_transformRule","_transformComplexSelector","transformedSelector","_transformRuleCss","p$","filter","inside","index","Error","input","reduce","acc","cur","idx","stop","isNth","_twiddleNthPlus","isMatches","_preserveMatchesPseudo","info","_transformCompoundSelector","combinator","_replaceMatchesPseudo","slottedIndex","_transformHostSelector","_transformSimpleSelector","slotted","paren","before","dir","attributes","output","host","normalizeRootSelector","_transformDocumentSelector","infoKey","StyleInfo","styleInfo","ast","placeholder","ownStylePropertyNames","overrideStyleProperties","styleProperties","scopeSelector","_getStyleRules","matchesSelector","method","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","IS_IE","XSCOPE_NAME","style_properties","props","keyframes","ruleIndex","decorateRule","collectPropertiesInCssText","propertyInfo","_keyframes","names","collectProperties","collectCssText","any","rx","exec","assign","collectConsumingCssText","getOwnPropertyNames","valueForProperty","valueForProperties","fallback","propertyValue","colon","pp","keyframeTransforms","hasAnimations","transform","keyframeNamesToTransform","keyframe","selectorToMatch","bits","parseInt","v","addToBitMask","parsedSelector","isRoot","isHost","hostProps","rootProps","whenHostOrRootRule","_element","hostSelector","rxHostSelector","hostRx","_elementKeyframeTransforms","elementStyles","applyProperties","applyKeyframeTransforms","_scopeSelector","keyframesRules","_scopeKeyframes","_keyframesRuleTransformer","keyframesNameRx","transformedKeyframesName","scopeId","old","transformStyles","shadowRoot","placeholderMap","getStylePlaceholder","ensureStylePlaceholder","ce","origDefine","wrappedDefine","clazz","options","flush","scopeRegExp","getCurrentScope","getClasses","getOwnerScope","ownerRoot","getRootNode","ownerDocument","ensureCorrectSubtreeScoping","unscopedNodes","j","unscopedNode","scopeForPreviouslyUnscopedNode","handler","mxns","x","mxn","documentElement","addedNodes","currentScope","el","domRemoveScope","ShadowRoot","domReplaceScope","observer","MutationObserver","observe","childList","subtree","delayedStart","listener","removeEventListener","takeRecords","styleCache","typeMax","cache","cacheEntry","ownPropertyNames","pn","tagname","styleElement","list","shift","entry","_validate","scoping_shim_ScopingShim","_scopeCounter","_documentOwner","_documentOwnerStyleInfo","set","_elementsHaveApplied","_applyShim","_customStyleInterface","prepareTemplateDom","prepareTemplateStyles","_prepared","template_map","optimalBuild","_gatherStyles","_ensure","hasMixins","common_utils","decorateStyles","_generateStaticStyle","_style","_ownPropertyNames","_domPrepared","domAddScope","shadowroot","ApplyShim","apply_shim_utils","transformCustomStyleForDocument","flushCustomStyles","_ensureApplyShim","_ensureCustomStyleInterface","customStyles","_revalidateCustomStyleApplyShim","_updateProperties","_applyCustomStyles","styleDocument","overrideProps","_prepareHost","_isRootOwner","styleElementNativeVariables","styleElementShimVariables","_applyStyleProperties","querySelector","_styleOwnerForNode","fetch","cachedScopeSelector","cachedStyle","oldScopeSelector","_generateScopeSelector","applyElementStyle","applyElementScopeSelector","store","owner","ownerStyleInfo","ownerProperties","hostAndRootProps","hostAndRootPropertiesForScope","propertiesMatchingHost","propertyDataFromStyles","_mixinOverrideStyles","reify","overrides","styleSubtree","shadowChildren","_revalidateApplyShim","applyCustomStyle","documentRule","classString","classes","scopeName","classAttr","k$","prepareTemplate","setElementClass","_styleInfoForNode","getStyleAst","styleAstToString","scopeNode","unscopeNode","scopeForNode","currentScopeForNode","scopingShim","ScopingShim","APPLY_NAME_CLEAN","INITIAL_INHERIT","IMPORTANT","MIXIN_VAR_SEP","MixinMap","_map","dependants","invalidCallback","apply_shim_ApplyShim","_currentElement","_measureElement","styleText","_gatheredStyle","gatherStyles","transformStyle","transformRules","transformRule","transformCssText","matchText","propertyName","valueProperty","valueMixin","_produceCssProperties","_consumeCssProperties","all","startRule","topRule","fallbacks","seenStartRule","_cssTextToMap","mixinName","applyPos","afterApplyPos","textBeforeApply","textAfterApply","defaults","_fallbacksFromPreviousRules","replacement","_atApplyToCssProperties","vars","mixinEntry","f","_getInitialValueForProperty","replaceInitialOrInherit","out","sp","_replaceInitialOrInherit","mixinAsProperties","mixinValues","combinedProps","oldProps","needToInvalidate","_invalidateMixinEntry","transformCustomStyle","transformTemplate","cb","apply_shim","applyShim","apply_shim_ApplyShimInterface","ensure","applyShimInterface"],"mappings":"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","file":"shadycss-d4fb490.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {!Set<string>} */\nconst styleTextSet = new Set();\n\nexport const scopingAttribute = 'shady-unscoped';\n\n/**\n * Add a specifically-marked style to the document directly, and only one copy of that style.\n *\n * @param {!HTMLStyleElement} style\n * @return {undefined}\n */\nexport function processUnscopedStyle(style) {\n  const text = style.textContent;\n  if (!styleTextSet.has(text)) {\n    styleTextSet.add(text);\n    const newStyle = style.cloneNode(true);\n    document.head.appendChild(newStyle);\n  }\n}\n\n/**\n * Check if a style is supposed to be unscoped\n * @param {!HTMLStyleElement} style\n * @return {boolean} true if the style has the unscoping attribute\n */\nexport function isUnscopedStyle(style) {\n  return style.hasAttribute(scopingAttribute);\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables, cssBuild} from './style-settings.js';\nimport {parse, stringify, types, StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport {MEDIA_MATCH} from './common-regex.js';\nimport {processUnscopedStyle, isUnscopedStyle} from './unscoped-style-handler.js';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n * @return {string}\n */\nexport function toCssText (rules, callback) {\n  if (!rules) {\n    return '';\n  }\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'] || null;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) &&\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  applyStyle(style, target, contextNode);\n  return style;\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {HTMLStyleElement}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = /** @type {HTMLStyleElement} */(document.createElement('style'));\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/**\n * Track the position of the last added style for placing placeholders\n * @type {Node}\n */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {!Comment}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @param {?Node} target\n * @param {?Node} contextNode\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n    target.firstChild;\n  target.insertBefore(style, after);\n  if (!lastHeadApplyNode) {\n    lastHeadApplyNode = style;\n  } else {\n    // only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode\n    let position = style.compareDocumentPosition(lastHeadApplyNode);\n    if (position === Node.DOCUMENT_POSITION_PRECEDING) {\n      lastHeadApplyNode = style;\n    }\n  }\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nexport function findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (nativeShadow) {\n    element.setAttribute('class', value);\n  } else {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  }\n}\n\n/**\n * @param {Element | {is: string, extends: string}} element\n * @return {{is: string, typeExtension: string}}\n */\nexport function getIsExtends(element) {\n  let localName = element['localName'];\n  let is = '', typeExtension = '';\n  /*\n  NOTE: technically, this can be wrong for certain svg elements\n  with `-` in the name like `<font-face>`\n  */\n  if (localName) {\n    if (localName.indexOf('-') > -1) {\n      is = localName;\n    } else {\n      typeExtension = localName;\n      is = (element.getAttribute && element.getAttribute('is')) || '';\n    }\n  } else {\n    is = /** @type {?} */(element).is;\n    typeExtension = /** @type {?} */(element).extends;\n  }\n  return {is, typeExtension};\n}\n\n/**\n * @param {Element|DocumentFragment} element\n * @return {string}\n */\nexport function gatherStyleText(element) {\n  /** @type {!Array<string>} */\n  const styleTextParts = [];\n  const styles = /** @type {!NodeList<!HTMLStyleElement>} */(element.querySelectorAll('style'));\n  for (let i = 0; i < styles.length; i++) {\n    const style = styles[i];\n    if (isUnscopedStyle(style)) {\n      if (!nativeShadow) {\n        processUnscopedStyle(style);\n        style.parentNode.removeChild(style);\n      }\n    } else {\n      styleTextParts.push(style.textContent);\n      style.parentNode.removeChild(style);\n    }\n  }\n  return styleTextParts.join('').trim();\n}\n\n/**\n * Split a selector separated by commas into an array in a smart way\n * @param {string} selector\n * @return {!Array<string>}\n */\nexport function splitSelectorList(selector) {\n  const parts = [];\n  let part = '';\n  for (let i = 0; i >= 0 && i < selector.length; i++) {\n    // A selector with parentheses will be one complete part\n    if (selector[i] === '(') {\n      // find the matching paren\n      const end = findMatchingParen(selector, i);\n      // push the paren block into the part\n      part += selector.slice(i, end + 1);\n      // move the index to after the paren block\n      i = end;\n    } else if (selector[i] === ',') {\n      parts.push(part);\n      part = '';\n    } else {\n      part += selector[i];\n    }\n  }\n  // catch any pieces after the last comma\n  if (part) {\n    parts.push(part);\n  }\n  return parts;\n}\n\nconst CSS_BUILD_ATTR = 'css-build';\n\n/**\n * Return the polymer-css-build \"build type\" applied to this element\n *\n * @param {!HTMLElement} element\n * @return {string} Can be \"\", \"shady\", or \"shadow\"\n */\nexport function getCssBuild(element) {\n  if (cssBuild !== undefined) {\n    return /** @type {string} */(cssBuild);\n  }\n  if (element.__cssBuild === undefined) {\n    // try attribute first, as it is the common case\n    const attrValue = element.getAttribute(CSS_BUILD_ATTR);\n    if (attrValue) {\n      element.__cssBuild = attrValue;\n    } else {\n      const buildComment = getBuildComment(element);\n      if (buildComment !== '') {\n        // remove build comment so it is not needlessly copied into every element instance\n        removeBuildComment(element);\n      }\n      element.__cssBuild = buildComment;\n    }\n  }\n  return element.__cssBuild || '';\n}\n\n/**\n * Check if the given element, either a <template> or <style>, has been processed\n * by polymer-css-build.\n *\n * If so, then we can make a number of optimizations:\n * - polymer-css-build will decompose mixins into individual CSS Custom Properties,\n * so the ApplyShim can be skipped entirely.\n * - Under native ShadowDOM, the style text can just be copied into each instance\n * without modification\n * - If the build is \"shady\" and ShadyDOM is in use, the styling does not need\n * scoping beyond the shimming of CSS Custom Properties\n *\n * @param {!HTMLElement} element\n * @return {boolean}\n */\nexport function elementHasBuiltCss(element) {\n  return getCssBuild(element) !== '';\n}\n\n/**\n * For templates made with tagged template literals, polymer-css-build will\n * insert a comment of the form `<!--css-build:shadow-->`\n *\n * @param {!HTMLElement} element\n * @return {string}\n */\nexport function getBuildComment(element) {\n  const buildComment = element.localName === 'template' ?\n      /** @type {!HTMLTemplateElement} */ (element).content.firstChild :\n      element.firstChild;\n  if (buildComment instanceof Comment) {\n    const commentParts = buildComment.textContent.trim().split(':');\n    if (commentParts[0] === CSS_BUILD_ATTR) {\n      return commentParts[1];\n    }\n  }\n  return '';\n}\n\n/**\n * Check if the css build status is optimal, and do no unneeded work.\n *\n * @param {string=} cssBuild CSS build status\n * @return {boolean} css build is optimal or not\n */\nexport function isOptimalCssBuild(cssBuild = '') {\n  // CSS custom property shim always requires work\n  if (cssBuild === '' || !nativeCssVariables) {\n    return false;\n  }\n  return nativeShadow ? cssBuild === 'shadow' : cssBuild === 'shady';\n}\n\n/**\n * @param {!HTMLElement} element\n */\nfunction removeBuildComment(element) {\n  const buildComment = element.localName === 'template' ?\n      /** @type {!HTMLTemplateElement} */ (element).content.firstChild :\n      element.firstChild;\n  buildComment.parentNode.removeChild(buildComment);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport const nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\nlet nativeCssVariables_;\n\n/**\n * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings\n */\nfunction calcCssVariables(settings) {\n  if (settings && settings['shimcssproperties']) {\n    nativeCssVariables_ = false;\n  } else {\n    // chrome 49 has semi-working css vars, check if box-shadow works\n    // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\n    // However, shim css custom properties are only supported with ShadyDOM enabled,\n    // so fall back on native if we do not detect ShadyDOM\n    // Edge 15: custom properties used in ::before and ::after will also be used in the parent element\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/\n    nativeCssVariables_ = nativeShadow || Boolean(!navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/) &&\n      window.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n  }\n}\n\n/** @type {string | undefined} */\nexport let cssBuild;\nif (window.ShadyCSS && window.ShadyCSS.cssBuild !== undefined) {\n  cssBuild = window.ShadyCSS.cssBuild;\n}\n\nif (window.ShadyCSS && window.ShadyCSS.nativeCss !== undefined) {\n  nativeCssVariables_ = window.ShadyCSS.nativeCss;\n} else if (window.ShadyCSS) {\n  calcCssVariables(window.ShadyCSS);\n  // reset window variable to let ShadyCSS API take its place\n  window.ShadyCSS = undefined;\n} else {\n  calcCssVariables(window['WebComponents'] && window['WebComponents']['flags']);\n}\n\n// Hack for type error under new type inference which doesn't like that\n// nativeCssVariables is updated in a function and assigns the type\n// `function(): ?` instead of `boolean`.\nexport const nativeCssVariables = /** @type {boolean} */(nativeCssVariables_);","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi;\nexport const MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\nexport const VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\nexport const ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\nexport const MEDIA_MATCH = /@media\\s(.*)/;\nexport const IS_VAR = /^--/;\nexport const BRACKETED = /\\{[^}]*\\}/g;\nexport const HOST_PREFIX = '(?:^|[^.#[:])';\nexport const HOST_SUFFIX = '($|[.:[\\\\s>+~])';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n/** @unrestricted */\nclass StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\nexport {StyleNode}\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node['parsedSelector'] = node['selector'] = t.trim();\n    node['atRule'] = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] =\n          node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nexport function stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node['cssText'] :\n        removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nexport const types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @const {!Object<string, !HTMLTemplateElement>}\n */\nconst templateMap = {};\nexport default templateMap;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport { MIXIN_MATCH, VAR_ASSIGN } from './common-regex.js';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  /**\n   * @const {string}\n   */\n  const value = window.getComputedStyle(element).getPropertyValue(property);\n  if (!value) {\n    return '';\n  } else {\n    return value.trim();\n  }\n}\n\n/**\n * return true if `cssText` contains a mixin definition or consumption\n * @param {string} cssText\n * @return {boolean}\n */\nexport function detectMixin(cssText) {\n  const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n  // reset state of the regexes\n  MIXIN_MATCH.lastIndex = 0;\n  VAR_ASSIGN.lastIndex = 0;\n  return has;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\nimport templateMap from './template-map.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\n/*\n * Utilities for handling invalidating apply-shim mixins for a given template.\n *\n * The invalidation strategy involves keeping track of the \"current\" version of a template's mixins, and updating that count when a mixin is invalidated.\n * The template\n */\n\n/** @const {string} */\nconst CURRENT_VERSION = '_applyShimCurrentVersion';\n\n/** @const {string} */\nconst NEXT_VERSION = '_applyShimNextVersion';\n\n/** @const {string} */\nconst VALIDATING_VERSION = '_applyShimValidatingVersion';\n\n/**\n * @const {Promise<void>}\n */\nconst promise = Promise.resolve();\n\n/**\n * @param {string} elementName\n */\nexport function invalidate(elementName){\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\n/**\n * This function can be called multiple times to mark a template invalid\n * and signal that the style inside must be regenerated.\n *\n * Use `startValidatingTemplate` to begin an asynchronous validation cycle.\n * During that cycle, call `templateIsValidating` to see if the template must\n * be revalidated\n * @param {HTMLTemplateElement} template\n */\nexport function invalidateTemplate(template) {\n  // default the current version to 0\n  template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;\n  // ensure the \"validating for\" flag exists\n  template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;\n  // increment the next version\n  template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValid(template) {\n  return template[CURRENT_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\n/**\n * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.\n * If false, the template must be validated.\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValidating(template) {\n  return !templateIsValid(template) && template[VALIDATING_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * the template is marked as `validating` for one microtask so that all instances\n * found in the tree crawl of `applyStyle` will update themselves,\n * but the template will only be updated once.\n * @param {string} elementName\n*/\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\n/**\n * Begin an asynchronous invalidation cycle.\n * This should be called after every validation of a template\n *\n * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`\n * @param {HTMLTemplateElement} template\n */\nexport function startValidatingTemplate(template) {\n  // remember that the current \"next version\" is the reason for this validation cycle\n  template[VALIDATING_VERSION] = template[NEXT_VERSION];\n  // however, there only needs to be one async task to clear the counters\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function() {\n      // sync the current version to let future invalidations cause a refresh cycle\n      template[CURRENT_VERSION] = template[NEXT_VERSION];\n      template._validating = false;\n    });\n  }\n}\n\n/**\n * @return {boolean}\n */\nexport function elementsAreInvalid() {\n  for (let elementName in templateMap) {\n    let template = templateMap[elementName];\n    if (!templateIsValid(template)) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {Promise<void>} */\nlet readyPromise = null;\n\n/** @type {?function(?function())} */\nlet whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;\n\n/** @type {function()} */\nlet resolveFn;\n\n/**\n * @param {?function()} callback\n */\nexport default function documentWait(callback) {\n  requestAnimationFrame(function() {\n    if (whenReady) {\n      whenReady(callback)\n    } else {\n      if (!readyPromise) {\n        readyPromise = new Promise((resolve) => {resolveFn = resolve});\n        if (document.readyState === 'complete') {\n          resolveFn();\n        } else {\n          document.addEventListener('readystatechange', () => {\n            if (document.readyState === 'complete') {\n              resolveFn();\n            }\n          });\n        }\n      }\n      readyPromise.then(function(){ callback && callback(); });\n    }\n  });\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport documentWait from './document-wait.js';\n\n/**\n * @typedef {HTMLStyleElement | {getStyle: function():HTMLStyleElement}}\n */\nexport let CustomStyleProvider;\n\nconst SEEN_MARKER = '__seenByShadyCSS';\nconst CACHED_STYLE = '__shadyCSSCachedStyle';\n\n/** @type {?function(!HTMLStyleElement)} */\nlet transformFn = null;\n\n/** @type {?function()} */\nlet validateFn = null;\n\n/**\nThis interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`\n\n@unrestricted\n*/\nexport default class CustomStyleInterface {\n  constructor() {\n    /** @type {!Array<!CustomStyleProvider>} */\n    this['customStyles'] = [];\n    this['enqueued'] = false;\n    // NOTE(dfreedm): use quotes here to prevent closure inlining to `function(){}`;\n    documentWait(() => {\n      if (window['ShadyCSS']['flushCustomStyles']) {\n        window['ShadyCSS']['flushCustomStyles']();\n      }\n    })\n  }\n  /**\n   * Queue a validation for new custom styles to batch style recalculations\n   */\n  enqueueDocumentValidation() {\n    if (this['enqueued'] || !validateFn) {\n      return;\n    }\n    this['enqueued'] = true;\n    documentWait(validateFn);\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  addCustomStyle(style) {\n    if (!style[SEEN_MARKER]) {\n      style[SEEN_MARKER] = true;\n      this['customStyles'].push(style);\n      this.enqueueDocumentValidation();\n    }\n  }\n  /**\n   * @param {!CustomStyleProvider} customStyle\n   * @return {HTMLStyleElement}\n   */\n  getStyleForCustomStyle(customStyle) {\n    if (customStyle[CACHED_STYLE]) {\n      return customStyle[CACHED_STYLE];\n    }\n    let style;\n    if (customStyle['getStyle']) {\n      style = customStyle['getStyle']();\n    } else {\n      style = customStyle;\n    }\n    return style;\n  }\n  /**\n   * @return {!Array<!CustomStyleProvider>}\n   */\n  processStyles() {\n    const cs = this['customStyles'];\n    for (let i = 0; i < cs.length; i++) {\n      const customStyle = cs[i];\n      if (customStyle[CACHED_STYLE]) {\n        continue;\n      }\n      const style = this.getStyleForCustomStyle(customStyle);\n      if (style) {\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        const styleToTransform = /** @type {!HTMLStyleElement} */(style['__appliedElement'] || style);\n        if (transformFn) {\n          transformFn(styleToTransform);\n        }\n        customStyle[CACHED_STYLE] = styleToTransform;\n      }\n    }\n    return cs;\n  }\n}\n\n/* eslint-disable no-self-assign */\nCustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;\nCustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;\nCustomStyleInterface.prototype['processStyles'] = CustomStyleInterface.prototype.processStyles;\n/* eslint-enable no-self-assign */\n\nObject.defineProperties(CustomStyleInterface.prototype, {\n  'transformCallback': {\n    /** @return {?function(!HTMLStyleElement)} */\n    get() {\n      return transformFn;\n    },\n    /** @param {?function(!HTMLStyleElement)} fn */\n    set(fn) {\n      transformFn = fn;\n    }\n  },\n  'validateCallback': {\n    /** @return {?function()} */\n    get() {\n      return validateFn;\n    },\n    /**\n     * @param {?function()} fn\n     * @this {CustomStyleInterface}\n     */\n    set(fn) {\n      let needsEnqueue = false;\n      if (!validateFn) {\n        needsEnqueue = true;\n      }\n      validateFn = fn;\n      if (needsEnqueue) {\n        this.enqueueDocumentValidation();\n      }\n    },\n  }\n})\n\n/** @typedef {{\n * customStyles: !Array<!CustomStyleProvider>,\n * addCustomStyle: function(!CustomStyleProvider),\n * getStyleForCustomStyle: function(!CustomStyleProvider): HTMLStyleElement,\n * findStyles: function(),\n * transformCallback: ?function(!HTMLStyleElement),\n * validateCallback: ?function()\n * }}\n */\nexport const CustomStyleInterfaceInterface = {};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport CustomStyleInterface from '../src/custom-style-interface.js';\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js';\nimport {nativeCssVariables, nativeShadow, cssBuild} from '../src/style-settings.js';\n\nconst customStyleInterface = new CustomStyleInterface();\n\nif (!window.ShadyCSS) {\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplate(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n    prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplateStyles(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {Element} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      customStyleInterface.processStyles();\n      updateNativeProperties(element, properties);\n    },\n\n    /**\n     * @param {Element} element\n     */\n    styleElement(element) { // eslint-disable-line no-unused-vars\n      customStyleInterface.processStyles();\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      customStyleInterface.processStyles();\n      updateNativeProperties(document.body, properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n\n    flushCustomStyles() {},\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    cssBuild: cssBuild\n  }\n}\n\nwindow.ShadyCSS.CustomStyleInterface = customStyleInterface;","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport * as StyleUtil from './style-util.js';\nimport {nativeShadow} from './style-settings.js';\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  /**\n   * Given a node and scope name, add a scoping class to each node\n   * in the tree. This facilitates transforming css into scoped rules.\n   * @param {!Node} node\n   * @param {string} scope\n   * @param {boolean=} shouldRemoveScope\n   * @deprecated\n   */\n  dom(node, scope, shouldRemoveScope) {\n    const fn = (node) => {\n      this.element(node, scope || '', shouldRemoveScope);\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * Given a node and scope name, add a scoping class to each node in the tree.\n   * @param {!Node} node\n   * @param {string} scope\n   */\n  domAddScope(node, scope) {\n    const fn = (node) => {\n      this.element(node, scope || '');\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * @param {!Node} startNode\n   * @param {!function(!Node)} transformer\n   */\n  _transformDom(startNode, transformer) {\n    if (startNode.nodeType === Node.ELEMENT_NODE) {\n      transformer(startNode)\n    }\n    let c$;\n    if (startNode.localName === 'template') {\n      const template = /** @type {!HTMLTemplateElement} */ (startNode);\n      // In case the template is in svg context, fall back to the node\n      // since it won't be an HTMLTemplateElement with a .content property\n      c$ = (template.content || template._content || template).childNodes;\n    } else {\n      c$ = /** @type {!ParentNode} */ (startNode).children ||\n          startNode.childNodes;\n    }\n    if (c$) {\n      for (let i = 0; i < c$.length; i++) {\n        this._transformDom(c$[i], transformer);\n      }\n    }\n  }\n\n  /**\n   * @param {?} element\n   * @param {?} scope\n   * @param {?=} shouldRemoveScope\n   */\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            StyleUtil.setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          StyleUtil.setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  /**\n   * Given a node, replace the scoping class to each subnode in the tree.\n   * @param {!Node} node\n   * @param {string} oldScope\n   * @param {string} newScope\n   */\n  domReplaceScope(node, oldScope, newScope) {\n    const fn = (node) => {\n      this.element(node, oldScope, true);\n      this.element(node, newScope);\n    };\n    this._transformDom(node, fn);\n  }\n  /**\n   * Given a node, remove the scoping class to each subnode in the tree.\n   * @param {!Node} node\n   * @param {string} oldScope\n   */\n  domRemoveScope(node, oldScope) {\n    const fn = (node) => {\n      this.element(node, oldScope || '', true);\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * @param {?} element\n   * @param {?} styleRules\n   * @param {?=} callback\n   * @param {string=} cssBuild\n   * @param {string=} cssText\n   * @return {string}\n   */\n  elementStyles(element, styleRules, callback, cssBuild = '', cssText = '') {\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    if (cssText === '') {\n      if (nativeShadow || cssBuild === 'shady') {\n        cssText = StyleUtil.toCssText(styleRules, callback);\n      } else {\n        let {is, typeExtension} = StyleUtil.getIsExtends(element);\n        cssText = this.css(styleRules, is, typeExtension, callback) + '\\n\\n';\n      }\n    }\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return StyleUtil.toCssText(rules, function(/** StyleNode */rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? `[is=${scope}]` : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  /**\n   * transforms a css rule to a scoped rule.\n   *\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule['selector'] = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = StyleUtil.splitSelectorList(rule['selector']);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!StyleUtil.isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.filter((part) => Boolean(part)).join(COMPLEX_SELECTOR_SEP);\n  }\n\n  /**\n   * @param {string} selector\n   * @return {string}\n   */\n  _twiddleNthPlus(selector) {\n    return selector.replace(NTH, (m, type, inside) => {\n      if (inside.indexOf('+') > -1) {\n        inside = inside.replace(/\\+/g, '___');\n      } else if (inside.indexOf('___') > -1) {\n        inside = inside.replace(/___/g, '+');\n      }\n      return `:${type}(${inside})`;\n    });\n  }\n\n  /**\n   * Preserve `:matches()` selectors by replacing them with MATCHES_REPLACMENT\n   * and returning an array of `:matches()` selectors.\n   * Use `_replacesMatchesPseudo` to replace the `:matches()` parts\n   *\n   * @param {string} selector\n   * @return {{selector: string, matches: !Array<string>}}\n   */\n  _preserveMatchesPseudo(selector) {\n    /** @type {!Array<string>} */\n    const matches = [];\n    let match;\n    while ((match = selector.match(MATCHES))) {\n      const start = match.index;\n      const end = StyleUtil.findMatchingParen(selector, start);\n      if (end === -1) {\n        throw new Error(`${match.input} selector missing ')'`)\n      }\n      const part = selector.slice(start, end + 1);\n      selector = selector.replace(part, MATCHES_REPLACEMENT);\n      matches.push(part);\n    }\n    return {selector, matches};\n  }\n\n  /**\n   * Replace MATCHES_REPLACMENT character with the given set of `:matches()`\n   * selectors.\n   *\n   * @param {string} selector\n   * @param {!Array<string>} matches\n   * @return {string}\n   */\n  _replaceMatchesPseudo(selector, matches) {\n    const parts = selector.split(MATCHES_REPLACEMENT);\n    return matches.reduce((acc, cur, idx) => acc + cur + parts[idx + 1], parts[0]);\n  }\n\n/**\n * @param {string} selector\n * @param {string} scope\n * @param {string=} hostScope\n */\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    let isNth = NTH.test(selector);\n    if (isNth) {\n      selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`)\n      selector = this._twiddleNthPlus(selector);\n    }\n    // Preserve selectors like `:-webkit-any` so that SIMPLE_SELECTOR_SEP does\n    // not get confused by spaces inside the pseudo selector\n    const isMatches = MATCHES.test(selector);\n    /** @type {!Array<string>} */\n    let matches;\n    if (isMatches) {\n      ({selector, matches} = this._preserveMatchesPseudo(selector));\n    }\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    // replace `:matches()` selectors\n    if (isMatches) {\n      selector = this._replaceMatchesPseudo(selector, matches);\n    }\n    if (isNth) {\n      selector = this._twiddleNthPlus(selector);\n    }\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir) =>\n      `[dir=\"${dir}\"] ${before}, ${before}[dir=\"${dir}\"]`);\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    const attributes = selector.split(/(\\[.+?\\])/);\n\n    const output = [];\n    for (let i = 0; i < attributes.length; i++) {\n      // Do not attempt to transform any attribute selector content\n      if ((i % 2) === 1) {\n        output.push(attributes[i]);\n      } else {\n        const part = attributes[i];\n\n        if (!(part === '' && i === attributes.length - 1)) {\n          let p$ = part.split(PSEUDO_PREFIX);\n          p$[0] += scope;\n          output.push(p$.join(PSEUDO_PREFIX));\n        }\n      }\n    }\n\n    return output.join('');\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule['selector'] = rule['parsedSelector'];\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  normalizeRootSelector(rule) {\n    if (rule['selector'] === ROOT) {\n      rule['selector'] = 'html';\n    }\n  }\n\n/**\n * @param {string} selector\n */\n  _transformDocumentSelector(selector) {\n    if (selector.match(HOST)) {\n      // remove ':host' type selectors in document rules\n      return '';\n    } else if (selector.match(SLOTTED)) {\n      return this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR)\n    } else {\n      return this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n    }\n  }\n}\n\nconst NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nconst SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nconst COMPLEX_SELECTOR_SEP = ',';\nconst SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=[])+)/g;\nconst SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nconst HOST = ':host';\nconst ROOT = ':root';\nconst SLOTTED = '::slotted';\nconst SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nconst HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nconst SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nconst DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)/;\nconst CSS_CLASS_PREFIX = '.';\nconst PSEUDO_PREFIX = ':';\nconst CLASS = 'class';\nconst SELECTOR_NO_MATCH = 'should_not_match';\nconst MATCHES = /:(?:matches|any|-(?:webkit|moz)-any)/;\nconst MATCHES_REPLACEMENT = '\\u{e000}';\n\nexport default new StyleTransformer()\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\n/** @const {string} */\nconst infoKey = '__styleInfo';\n\nexport default class StyleInfo {\n  /**\n   * @param {Element} node\n   * @return {StyleInfo}\n   */\n  static get(node) {\n    if (node) {\n      return node[infoKey];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * @param {!Element} node\n   * @param {StyleInfo} styleInfo\n   * @return {StyleInfo}\n   */\n  static set(node, styleInfo) {\n    node[infoKey] = styleInfo;\n    return styleInfo;\n  }\n  /**\n   * @param {StyleNode} ast\n   * @param {Node=} placeholder\n   * @param {Array<string>=} ownStylePropertyNames\n   * @param {string=} elementName\n   * @param {string=} typeExtension\n   * @param {string=} cssBuild\n   */\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    /** @type {StyleNode} */\n    this.styleRules = ast || null;\n    /** @type {Node} */\n    this.placeholder = placeholder || null;\n    /** @type {!Array<string>} */\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    /** @type {Array<Object>} */\n    this.overrideStyleProperties = null;\n    /** @type {string} */\n    this.elementName = elementName || '';\n    /** @type {string} */\n    this.cssBuild = cssBuild || '';\n    /** @type {string} */\n    this.typeExtension = typeExtension || '';\n    /** @type {Object<string, string>} */\n    this.styleProperties = null;\n    /** @type {?string} */\n    this.scopeSelector = null;\n    /** @type {HTMLStyleElement} */\n    this.customStyle = null;\n  }\n  _getStyleRules() {\n    return this.styleRules;\n  }\n}\n\n/* eslint-disable-next-line no-self-assign */\nStyleInfo.prototype['_getStyleRules'] = StyleInfo.prototype._getStyleRules;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {removeCustomPropAssignment, StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport {nativeShadow} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport * as StyleUtil from './style-util.js';\nimport * as RX from './common-regex.js';\nimport StyleInfo from './style-info.js';\n\n// TODO: dedupe with shady\n/**\n * @param {string} selector\n * @return {boolean}\n * @this {Element}\n */\nconst matchesSelector = function(selector) {\n  const method = this.matches || this.matchesSelector ||\n    this.mozMatchesSelector || this.msMatchesSelector ||\n    this.oMatchesSelector || this.webkitMatchesSelector;\n  return method && method.call(this, selector);\n};\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n/**\n * decorates styles with rule info and returns an array of used style property names\n *\n * @param {StyleNode} rules\n * @return {Array<string>}\n */\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    StyleUtil.forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule['rules'] = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx = RX.VAR_ASSIGN;\n      let cssText = rule['parsedCssText'];\n      let value;\n      let any;\n      while ((m = rx.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule['parsedCssText']);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(RX.BRACKETED, '')\n      .replace(RX.VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = RX.VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = StyleUtil.processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        RX.MIXIN_MATCH.lastIndex = 0;\n        m = RX.MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule['cssText'] = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule['cssText'];\n    let output = rule['cssText'];\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = RX.ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule['cssText'] = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  /**\n   * @param {StyleNode} rules\n   * @param {Element} element\n   */\n  propertyDataFromStyles(rules, element) {\n    let props = {};\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, (rule) => {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        this.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule['parsedSelector'];\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          this.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  /**\n   * @param {Element} scope\n   * @param {StyleNode} rule\n   * @param {string} cssBuild\n   * @param {function(Object)} callback\n   */\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let {is, typeExtension} = StyleUtil.getIsExtends(scope);\n    let hostScope = is ?\n      StyleTransformer._calcHostScope(is, typeExtension) :\n      'html';\n    let parsedSelector = rule['parsedSelector'];\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host because `:host` does not work with `matches`\n      if (!rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer._transformRuleCss(\n          rule,\n          StyleTransformer._transformComplexSelector,\n          StyleTransformer._calcElementScope(is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n/**\n * @param {Element} scope\n * @param {StyleNode} rules\n * @param {string} cssBuild\n * @return {Object}\n */\n  hostAndRootPropertiesForScope(scope, rules, cssBuild) {\n    let hostProps = {}, rootProps = {};\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, (rule) => {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      this.whenHostOrRootRule(scope, rule, cssBuild, (info) => {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            this.collectProperties(rule, hostProps);\n          } else {\n            this.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  /**\n   * @param {Element} element\n   * @param {Object} properties\n   * @param {string} scopeSelector\n   */\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let {is, typeExtension} = StyleUtil.getIsExtends(element);\n    let hostSelector = StyleTransformer\n      ._calcHostScope(is, typeExtension);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(RX.HOST_PREFIX + rxHostSelector +\n      RX.HOST_SUFFIX);\n    let {styleRules: rules, cssBuild} = StyleInfo.get(element);\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !StyleUtil.isKeyframesSelector(rule) &&\n          rule['cssText']) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    }, cssBuild);\n  }\n\n  /**\n   * @param {Element} element\n   * @param {StyleNode} rules\n   * @param {string} scopeSelector\n   * @return {Object}\n   */\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule['keyframesName']] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  /**\n   * @param {StyleNode} keyframesRule\n   * @return {function(string):string}\n   */\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n/**\n * Transforms `@keyframes` names to be unique for the current host.\n * Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n *\n * @param {StyleNode} rule\n * @param {string} scopeId\n */\n  _scopeKeyframes(rule, scopeId) {\n    // Animation names are of the form [\\w-], so ensure that the name regex does not partially apply\n    // to similarly named keyframe names by checking for a word boundary at the beginning and\n    // a non-word boundary or `-` at the end.\n    rule.keyframesNameRx = new RegExp(`\\\\b${rule['keyframesName']}(?!\\\\B|-)`, 'g');\n    rule.transformedKeyframesName = rule['keyframesName'] + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    rule['selector'] = rule.transformedSelector.replace(\n        rule['keyframesName'], rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  /**\n   * @param {StyleNode} rule\n   * @param {RegExp} hostRx\n   * @param {string} hostSelector\n   * @param {string} scopeId\n   */\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = StyleUtil.splitSelectorList(selector);\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule['selector'] = parts.join(',');\n  }\n\n  /**\n   * @param {Element} element\n   * @param {string} selector\n   * @param {string} old\n   */\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      StyleUtil.setElementClassRaw(element, v);\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element\n   * @param {Object} properties\n   * @param {string} selector\n   * @param {HTMLStyleElement} style\n   * @return {HTMLStyleElement}\n   */\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s['_useCount']--;\n      if (s['_useCount'] <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = StyleUtil.applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = StyleUtil.applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        if (IS_IE && cssText.indexOf('@media') > -1) {\n            // @media rules may be stale in IE 10 and 11\n            // refresh the text content of the style to revalidate them.\n          style.textContent = cssText;\n        }\n        StyleUtil.applyStyle(style, null, styleInfo.placeholder);\n      }\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style['_useCount'] = style['_useCount'] || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style['_useCount']++;\n      }\n      styleInfo.customStyle = style;\n    }\n    return style;\n  }\n\n  /**\n   * @param {Element} style\n   * @param {Object} properties\n   */\n  applyCustomStyle(style, properties) {\n    let rules = StyleUtil.rulesForStyle(/** @type {HTMLStyleElement} */(style));\n    let self = this;\n    style.textContent = StyleUtil.toCssText(rules, function(/** StyleNode */rule) {\n      let css = rule['cssText'] = rule['parsedCssText'];\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(/** @type {string} */(css));\n        // replace with reified properties, scenario is same as mixin\n        rule['cssText'] = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\n/**\n * @param {number} n\n * @param {Array<number>} bits\n */\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32, 10);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nexport default new StyleProperties();","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {applyStylePlaceHolder} from './style-util.js';\nimport {nativeShadow} from './style-settings.js';\n\n/** @type {!Object<string, !Node>} */\nconst placeholderMap = {};\n\n/**\n * @param {string} elementName\n * @return {Node}\n */\nexport function getStylePlaceholder(elementName) {\n  return placeholderMap[elementName] || null;\n}\n\n/**\n * @param {string} elementName\n */\nexport function ensureStylePlaceholder(elementName) {\n  if (!placeholderMap[elementName]) {\n    placeholderMap[elementName] = applyStylePlaceHolder(elementName);\n  }\n}\n\n/**\n * @const {CustomElementRegistry}\n */\nconst ce = window['customElements'];\nif (ce && !nativeShadow) {\n  /**\n   * @const {function(this:CustomElementRegistry, string,function(new:HTMLElement),{extends: string}=)}\n   */\n  const origDefine = ce['define'];\n  /**\n   * @param {string} name\n   * @param {function(new:HTMLElement)} clazz\n   * @param {{extends: string}=} options\n   */\n  const wrappedDefine = (name, clazz, options) => {\n    ensureStylePlaceholder(name);\n    origDefine.call(/** @type {!CustomElementRegistry} */(ce), name, clazz, options);\n  };\n  ce['define'] = wrappedDefine;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport {getIsExtends, elementHasBuiltCss} from './style-util.js';\n\nexport let flush = function() {};\n\n/**\n * @param {!Element} element\n * @return {string}\n */\nfunction getClasses(element) {\n  if (element.classList && element.classList.value) {\n    return element.classList.value;\n  } else {\n    // NOTE: className is patched to remove scoping classes in ShadyDOM\n    // use getAttribute('class') instead, which is unpatched\n    return element.getAttribute('class') || '';\n  }\n}\n\nconst scopeRegExp = new RegExp(`${StyleTransformer.SCOPE_NAME}\\\\s*([^\\\\s]*)`);\n\n/**\n * @param {!Element} element\n * @return {string}\n */\nexport function getCurrentScope(element) {\n  const match = getClasses(element).match(scopeRegExp);\n  if (match) {\n    return match[1];\n  } else {\n    return '';\n  }\n}\n\n/**\n * @param {!Node} node\n */\nexport function getOwnerScope(node) {\n  const ownerRoot = node.getRootNode();\n  if (ownerRoot === node || ownerRoot === node.ownerDocument) {\n    return '';\n  }\n  const host = /** @type {!ShadowRoot} */(ownerRoot).host;\n  if (!host) {\n    // this may actually be a document fragment\n    return '';\n  }\n  return getIsExtends(host).is;\n}\n\n/**\n * @param {!Element} element\n */\nexport function ensureCorrectScope(element) {\n  const currentScope = getCurrentScope(element);\n  const ownerRoot = element.getRootNode();\n  if (ownerRoot === element) {\n    return;\n  }\n  if (currentScope && ownerRoot === element.ownerDocument) {\n    // node was scoped, but now is in document\n    StyleTransformer.domRemoveScope(element, currentScope);\n  } else if (ownerRoot instanceof ShadowRoot) {\n    const ownerScope = getOwnerScope(element);\n    if (ownerScope !== currentScope) {\n      // node was scoped, but not by its current owner\n      StyleTransformer.domReplaceScope(element, currentScope, ownerScope);\n    }\n  }\n}\n\n/**\n * @param {!HTMLElement|!HTMLDocument} element\n */\nexport function ensureCorrectSubtreeScoping(element) {\n  // find unscoped subtree nodes\n  const unscopedNodes = window['ShadyDOM']['nativeMethods']['querySelectorAll'].call(\n    element, `:not(.${StyleTransformer.SCOPE_NAME})`);\n\n  for (let j = 0; j < unscopedNodes.length; j++) {\n    // it's possible, during large batch inserts, that nodes that aren't\n    // scoped within the current scope were added.\n    // To make sure that any unscoped nodes that were inserted in the current batch are correctly styled,\n    // query all unscoped nodes and force their style-scope to be applied.\n    // This could happen if a sub-element appended an unscoped node in its shadowroot and this function\n    // runs on a parent element of the host of that unscoped node:\n    // parent-element -> element -> unscoped node\n    // Here unscoped node should have the style-scope element, not parent-element.\n    const unscopedNode = unscopedNodes[j];\n    const scopeForPreviouslyUnscopedNode = getOwnerScope(unscopedNode);\n    if (scopeForPreviouslyUnscopedNode) {\n      StyleTransformer.element(unscopedNode, scopeForPreviouslyUnscopedNode);\n    }\n  }\n}\n\n/**\n * @param {HTMLElement} el\n * @return {boolean}\n */\nfunction isElementWithBuiltCss(el) {\n  if (el.localName === 'style' || el.localName === 'template') {\n    return elementHasBuiltCss(el);\n  }\n  return false;\n}\n\n/**\n * @param {Array<MutationRecord|null>|null} mxns\n */\nfunction handler(mxns) {\n  for (let x=0; x < mxns.length; x++) {\n    let mxn = mxns[x];\n    if (mxn.target === document.documentElement ||\n      mxn.target === document.head) {\n      continue;\n    }\n    for (let i=0; i < mxn.addedNodes.length; i++) {\n      let n = mxn.addedNodes[i];\n      if (n.nodeType !== Node.ELEMENT_NODE) {\n        continue;\n      }\n      n = /** @type {HTMLElement} */(n); // eslint-disable-line no-self-assign\n      let root = n.getRootNode();\n      let currentScope = getCurrentScope(n);\n      // node was scoped, but now is in document\n      // If this element has built css, we must not remove scoping as this node\n      // will be used as a template or style without re - applying scoping as an optimization\n      if (currentScope && root === n.ownerDocument && !isElementWithBuiltCss(n)) {\n        StyleTransformer.domRemoveScope(n, currentScope);\n      } else if (root instanceof ShadowRoot) {\n        const newScope = getOwnerScope(n);\n        // rescope current node and subtree if necessary\n        if (newScope !== currentScope) {\n          StyleTransformer.domReplaceScope(n, currentScope, newScope);\n        }\n        // make sure all the subtree elements are scoped correctly\n        ensureCorrectSubtreeScoping(n);\n      }\n    }\n  }\n}\n\n// if native Shadow DOM is being used, or ShadyDOM handles dynamic scoiping, do not activate the MutationObserver\nif (!nativeShadow && !(window['ShadyDOM'] && window['ShadyDOM']['handlesDynamicScoping'])) {\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  }\n  let nativeCustomElements = (window['customElements'] &&\n    !window['customElements']['polyfillWrapFlushCallback']);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    }\n    // use polyfill timing if it's available\n    if (window['HTMLImports']) {\n      window['HTMLImports']['whenReady'](delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          }\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  }\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {parse, StyleNode} from './css-parse.js';\nimport {nativeShadow, nativeCssVariables} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport * as StyleUtil from './style-util.js';\nimport StyleProperties from './style-properties.js';\nimport {ensureStylePlaceholder, getStylePlaceholder} from './style-placeholder.js';\nimport StyleInfo from './style-info.js';\nimport StyleCache from './style-cache.js';\nimport {flush as watcherFlush, getOwnerScope, getCurrentScope} from './document-watcher.js';\nimport templateMap from './template-map.js';\nimport * as ApplyShimUtils from './apply-shim-utils.js';\nimport {updateNativeProperties, detectMixin} from './common-utils.js';\nimport {CustomStyleInterfaceInterface} from './custom-style-interface.js'; // eslint-disable-line no-unused-vars\n\n/**\n * @const {StyleCache}\n */\nconst styleCache = new StyleCache();\n\nexport default class ScopingShim {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = /** @type {!HTMLElement} */(document.documentElement);\n    let ast = new StyleNode();\n    ast['rules'] = [];\n    this._documentOwnerStyleInfo = StyleInfo.set(this._documentOwner, new StyleInfo(ast));\n    this._elementsHaveApplied = false;\n    /** @type {?Object} */\n    this._applyShim = null;\n    /** @type {?CustomStyleInterfaceInterface} */\n    this._customStyleInterface = null;\n  }\n  flush() {\n    watcherFlush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return StyleUtil.rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return StyleUtil.toCssText(ast);\n  }\n  _gatherStyles(template) {\n    return StyleUtil.gatherStyleText(template.content);\n  }\n  /**\n   * Prepare the styling and template for the given element type\n   *\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} typeExtension\n   */\n  prepareTemplate(template, elementName, typeExtension) {\n    this.prepareTemplateDom(template, elementName);\n    this.prepareTemplateStyles(template, elementName, typeExtension);\n  }\n  /**\n   * Prepare styling for the given element type\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} typeExtension\n   */\n  prepareTemplateStyles(template, elementName, typeExtension) {\n    if (template._prepared) {\n      return;\n    }\n    // style placeholders are only used when ShadyDOM is active\n    if (!nativeShadow) {\n      ensureStylePlaceholder(elementName);\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = StyleUtil.getCssBuild(template);\n    const optimalBuild = StyleUtil.isOptimalCssBuild(cssBuild);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n    };\n    let cssText = this._gatherStyles(template);\n    // check if the styling has mixin definitions or uses\n    this._ensure();\n    if (!optimalBuild) {\n      let hasMixins = !cssBuild && detectMixin(cssText);\n      let ast = parse(cssText);\n      // only run the applyshim transforms if there is a mixin involved\n      if (hasMixins && nativeCssVariables && this._applyShim) {\n        this._applyShim['transformRules'](ast, elementName);\n      }\n      template['_styleAst'] = ast;\n    }\n    let ownPropertyNames = [];\n    if (!nativeCssVariables) {\n      ownPropertyNames = StyleProperties.decorateStyles(template['_styleAst']);\n    }\n    if (!ownPropertyNames.length || nativeCssVariables) {\n      let root = nativeShadow ? template.content : null;\n      let placeholder = getStylePlaceholder(elementName);\n      let style = this._generateStaticStyle(info, template['_styleAst'], root, placeholder, cssBuild, optimalBuild ? cssText : '');\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n  /**\n   * Prepare template for the given element type\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplateDom(template, elementName) {\n    const cssBuild = StyleUtil.getCssBuild(template);\n    if (!nativeShadow && cssBuild !== 'shady' && !template._domPrepared) {\n      template._domPrepared = true;\n      StyleTransformer.domAddScope(template.content, elementName);\n    }\n  }\n  /**\n   * @param {!{is: string, extends: (string|undefined)}} info\n   * @param {!StyleNode} rules\n   * @param {DocumentFragment} shadowroot\n   * @param {Node} placeholder\n   * @param {string} cssBuild\n   * @param {string=} cssText\n   * @return {?HTMLStyleElement}\n   */\n  _generateStaticStyle(info, rules, shadowroot, placeholder, cssBuild, cssText) {\n    cssText = StyleTransformer.elementStyles(info, rules, null, cssBuild, cssText);\n    if (cssText.length) {\n      return StyleUtil.applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n    return null;\n  }\n  _prepareHost(host) {\n    let {is, typeExtension} = StyleUtil.getIsExtends(host);\n    let placeholder = getStylePlaceholder(is)\n    let template = templateMap[is];\n    let ast;\n    let ownStylePropertyNames;\n    let cssBuild;\n    if (template) {\n      ast = template['_styleAst'];\n      ownStylePropertyNames = template._ownPropertyNames;\n      cssBuild = StyleUtil.getCssBuild(template);\n    }\n    const styleInfo = new StyleInfo(\n      ast,\n      placeholder,\n      ownStylePropertyNames,\n      is,\n      typeExtension,\n      cssBuild\n    );\n    // only set the style info after this element has registered its template\n    if (template) {\n      StyleInfo.set(host, styleInfo);\n    }\n    return styleInfo;\n  }\n  _ensureApplyShim() {\n    if (this._applyShim) {\n      return;\n    } else if (window.ShadyCSS && window.ShadyCSS.ApplyShim) {\n      this._applyShim = /** @type {!Object} */ (window.ShadyCSS.ApplyShim);\n      this._applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n    }\n  }\n  _ensureCustomStyleInterface() {\n    if (this._customStyleInterface) {\n      return;\n    } else if (window.ShadyCSS && window.ShadyCSS.CustomStyleInterface) {\n      this._customStyleInterface = /** @type {!CustomStyleInterfaceInterface} */(window.ShadyCSS.CustomStyleInterface);\n      /** @type {function(!HTMLStyleElement)} */\n      this._customStyleInterface['transformCallback'] = (style) => {this.transformCustomStyleForDocument(style)};\n      this._customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this._customStyleInterface['enqueued'] || this._elementsHaveApplied) {\n            this.flushCustomStyles();\n          }\n        })\n      };\n    }\n  }\n  _ensure() {\n    this._ensureApplyShim();\n    this._ensureCustomStyleInterface();\n  }\n  /**\n   * Flush and apply custom styles to document\n   */\n  flushCustomStyles() {\n    this._ensure();\n    if (!this._customStyleInterface) {\n      return;\n    }\n    let customStyles = this._customStyleInterface['processStyles']();\n    // early return if custom-styles don't need validation\n    if (!this._customStyleInterface['enqueued']) {\n      return;\n    }\n    // bail if custom styles are built optimally\n    if (StyleUtil.isOptimalCssBuild(this._documentOwnerStyleInfo.cssBuild)) {\n      return;\n    }\n    if (!nativeCssVariables) {\n      this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n      this._applyCustomStyles(customStyles);\n      if (this._elementsHaveApplied) {\n        // if custom elements have upgraded and there are no native css variables, we must recalculate the whole tree\n        this.styleDocument();\n      }\n    } else if (!this._documentOwnerStyleInfo.cssBuild) {\n      this._revalidateCustomStyleApplyShim(customStyles);\n    }\n    this._customStyleInterface['enqueued'] = false;\n  }\n  /**\n   * Apply styles for the given element\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} overrideProps\n   */\n  styleElement(host, overrideProps) {\n    let styleInfo = StyleInfo.get(host);\n    if (!styleInfo) {\n      styleInfo = this._prepareHost(host);\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (overrideProps) {\n      styleInfo.overrideStyleProperties =\n        styleInfo.overrideStyleProperties || {};\n      Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n    }\n    if (!nativeCssVariables) {\n      this.styleElementShimVariables(host, styleInfo);\n    } else {\n      this.styleElementNativeVariables(host, styleInfo);\n    }\n  }\n  /**\n   * @param {!HTMLElement} host\n   * @param {!StyleInfo} styleInfo\n   */\n  styleElementShimVariables(host, styleInfo) {\n    this.flush();\n    this._updateProperties(host, styleInfo);\n    if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n      this._applyStyleProperties(host, styleInfo);\n    }\n  }\n  /**\n   * @param {!HTMLElement} host\n   * @param {!StyleInfo} styleInfo\n   */\n  styleElementNativeVariables(host, styleInfo) {\n    const { is } = StyleUtil.getIsExtends(host);\n    if (styleInfo.overrideStyleProperties) {\n      updateNativeProperties(host, styleInfo.overrideStyleProperties);\n    }\n    const template = templateMap[is];\n    // bail early if there is no shadowroot for this element\n    if (!template && !this._isRootOwner(host)) {\n      return;\n    }\n    // bail early if the template was built with polymer-css-build\n    if (template && StyleUtil.elementHasBuiltCss(template)) {\n      return;\n    }\n    if (template && template._style && !ApplyShimUtils.templateIsValid(template)) {\n      // update template\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this._ensure();\n        this._applyShim && this._applyShim['transformRules'](template['_styleAst'], is);\n        template._style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update instance if native shadowdom\n      if (nativeShadow) {\n        let root = host.shadowRoot;\n        if (root) {\n          let style = root.querySelector('style');\n          if (style) {\n            style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n      }\n      styleInfo.styleRules = template['_styleAst'];\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = node.getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = StyleUtil.getIsExtends(host).is;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!nativeShadow) {\n      StyleProperties.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties.hostAndRootPropertiesForScope(host, styleInfo.styleRules, styleInfo.cssBuild);\n    let propertyData = StyleProperties.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  /**\n   * Update styles of the whole document\n   *\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.styleSubtree(this._documentOwner, properties);\n  }\n  /**\n   * Update styles of a subtree\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} properties\n   */\n  styleSubtree(host, properties) {\n    let root = host.shadowRoot;\n    if (root || this._isRootOwner(host)) {\n      this.styleElement(host, properties);\n    }\n    // process the shadowdom children of `host`\n    let shadowChildren =\n        root && (/** @type {!ParentNode} */ (root).children || root.childNodes);\n    if (shadowChildren) {\n      for (let i = 0; i < shadowChildren.length; i++) {\n        let c = /** @type {!HTMLElement} */(shadowChildren[i]);\n        this.styleSubtree(c);\n      }\n    } else {\n      // process the lightdom children of `host`\n      let children = host.children || host.childNodes;\n      if (children) {\n        for (let i = 0; i < children.length; i++) {\n          let c = /** @type {!HTMLElement} */(children[i]);\n          this.styleSubtree(c);\n        }\n      }\n    }\n  }\n  /* Custom Style operations */\n  _revalidateCustomStyleApplyShim(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        this._revalidateApplyShim(s);\n      }\n    }\n  }\n  _applyCustomStyles(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        StyleProperties.applyCustomStyle(s, this._documentOwnerStyleInfo.styleProperties);\n      }\n    }\n  }\n  transformCustomStyleForDocument(style) {\n    const cssBuild = StyleUtil.getCssBuild(style);\n    if (cssBuild !== this._documentOwnerStyleInfo.cssBuild) {\n      this._documentOwnerStyleInfo.cssBuild = cssBuild;\n    }\n    if (StyleUtil.isOptimalCssBuild(cssBuild)) {\n      return;\n    }\n    let ast = StyleUtil.rulesForStyle(style);\n    StyleUtil.forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer.documentRule(rule);\n      }\n      if (nativeCssVariables && cssBuild === '') {\n        this._ensure();\n        this._applyShim && this._applyShim['transformRule'](rule);\n      }\n    });\n    if (nativeCssVariables) {\n      style.textContent = StyleUtil.toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules['rules'].push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (nativeCssVariables && this._applyShim) {\n      let ast = StyleUtil.rulesForStyle(style);\n      this._ensure();\n      this._applyShim['transformRules'](ast);\n      style.textContent = StyleUtil.toCssText(ast);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!nativeCssVariables) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value ? value.trim() : '';\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = element.getRootNode();\n    let classes = classString ? classString.split(/\\s/) : [];\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer.SCOPE_NAME, scopeName);\n    }\n    if (!nativeCssVariables) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    StyleUtil.setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n  /**\n   * @param {!Element} node\n   * @param {string} scope\n   */\n  scopeNode(node, scope) {\n    StyleTransformer.element(node, scope);\n  }\n  /**\n   * @param {!Element} node\n   * @param {string} scope\n   */\n  unscopeNode(node, scope) {\n    StyleTransformer.element(node, scope, true);\n  }\n  /**\n   * @param {!Node} node\n   * @return {string}\n   */\n  scopeForNode(node) {\n    return getOwnerScope(node);\n  }\n  /**\n   * @param {!Element} node\n   * @return {string}\n   */\n  currentScopeForNode(node) {\n    return getCurrentScope(node);\n  }\n}\n\n/* exports */\n/* eslint-disable no-self-assign */\nScopingShim.prototype['flush'] = ScopingShim.prototype.flush;\nScopingShim.prototype['prepareTemplate'] = ScopingShim.prototype.prepareTemplate;\nScopingShim.prototype['styleElement'] = ScopingShim.prototype.styleElement;\nScopingShim.prototype['styleDocument'] = ScopingShim.prototype.styleDocument;\nScopingShim.prototype['styleSubtree'] = ScopingShim.prototype.styleSubtree;\nScopingShim.prototype['getComputedStyleValue'] = ScopingShim.prototype.getComputedStyleValue;\nScopingShim.prototype['setElementClass'] = ScopingShim.prototype.setElementClass;\nScopingShim.prototype['_styleInfoForNode'] = ScopingShim.prototype._styleInfoForNode;\nScopingShim.prototype['transformCustomStyleForDocument'] = ScopingShim.prototype.transformCustomStyleForDocument;\nScopingShim.prototype['getStyleAst'] = ScopingShim.prototype.getStyleAst;\nScopingShim.prototype['styleAstToString'] = ScopingShim.prototype.styleAstToString;\nScopingShim.prototype['flushCustomStyles'] = ScopingShim.prototype.flushCustomStyles;\nScopingShim.prototype['scopeNode'] = ScopingShim.prototype.scopeNode;\nScopingShim.prototype['unscopeNode'] = ScopingShim.prototype.unscopeNode;\nScopingShim.prototype['scopeForNode'] = ScopingShim.prototype.scopeForNode;\nScopingShim.prototype['currentScopeForNode'] = ScopingShim.prototype.currentScopeForNode;\n/* eslint-enable no-self-assign */\nObject.defineProperties(ScopingShim.prototype, {\n  'nativeShadow': {\n    get() {\n      return nativeShadow;\n    }\n  },\n  'nativeCss': {\n    get() {\n      return nativeCssVariables;\n    }\n  }\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';\n\nexport default class StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    /** @type {number} */\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ScopingShim from '../src/scoping-shim.js';\nimport {nativeCssVariables, nativeShadow, cssBuild} from '../src/style-settings.js';\n\n/** @const {ScopingShim} */\nconst scopingShim = new ScopingShim();\n\nlet ApplyShim, CustomStyleInterface;\n\nif (window['ShadyCSS']) {\n  ApplyShim = window['ShadyCSS']['ApplyShim'];\n  CustomStyleInterface = window['ShadyCSS']['CustomStyleInterface'];\n}\n\nwindow.ShadyCSS = {\n  ScopingShim: scopingShim,\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplate(template, elementName, elementExtends) {\n    scopingShim.flushCustomStyles();\n    scopingShim.prepareTemplate(template, elementName, elementExtends)\n  },\n\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplateDom(template, elementName) {\n    scopingShim.prepareTemplateDom(template, elementName);\n  },\n\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplateStyles(template, elementName, elementExtends) {\n    scopingShim.flushCustomStyles();\n    scopingShim.prepareTemplateStyles(template, elementName, elementExtends)\n  },\n  /**\n   * @param {!HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleSubtree(element, properties);\n  },\n\n  /**\n   * @param {!HTMLElement} element\n   */\n  styleElement(element) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleElement(element);\n  },\n\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleDocument(properties);\n  },\n\n  flushCustomStyles() {\n    scopingShim.flushCustomStyles();\n  },\n\n  /**\n   * @param {Element} element\n   * @param {string} property\n   * @return {string}\n   */\n  getComputedStyleValue(element, property) {\n    return scopingShim.getComputedStyleValue(element, property);\n  },\n\n  nativeCss: nativeCssVariables,\n\n  nativeShadow: nativeShadow,\n\n  cssBuild: cssBuild\n};\n\nif (ApplyShim) {\n  window.ShadyCSS.ApplyShim = ApplyShim;\n}\n\nif (CustomStyleInterface) {\n  window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    `@apply` --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\n'use strict';\n\nimport {forEachRule, processVariableAndFallback, rulesForStyle, toCssText, gatherStyleText} from './style-util.js';\nimport {MIXIN_MATCH, VAR_ASSIGN} from './common-regex.js';\nimport {detectMixin} from './common-utils.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\nconst APPLY_NAME_CLEAN = /;\\s*/m;\nconst INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\nconst IMPORTANT = /\\s*!important/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nconst MIXIN_VAR_SEP = '_-_';\n\n/**\n * @typedef {!Object<string, string>}\n */\nlet PropertyEntry; // eslint-disable-line no-unused-vars\n\n/**\n * @typedef {!Object<string, boolean>}\n */\nlet DependantsEntry; // eslint-disable-line no-unused-vars\n\n/** @typedef {{\n *    properties: PropertyEntry,\n *    dependants: DependantsEntry\n * }}\n */\nlet MixinMapEntry; // eslint-disable-line no-unused-vars\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    /** @type {!Object<string, !MixinMapEntry>} */\n    this._map = {};\n  }\n  /**\n   * @param {string} name\n   * @param {!PropertyEntry} props\n   */\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    }\n  }\n  /**\n   * @param {string} name\n   * @return {MixinMapEntry}\n   */\n  get(name) {\n    name = name.trim();\n    return this._map[name] || null;\n  }\n}\n\n/**\n * Callback for when an element is marked invalid\n * @type {?function(string)}\n */\nlet invalidCallback = null;\n\n/** @unrestricted */\nclass ApplyShim {\n  constructor() {\n    /** @type {?string} */\n    this._currentElement = null;\n    /** @type {HTMLMetaElement} */\n    this._measureElement = null;\n    this._map = new MixinMap();\n  }\n  /**\n   * return true if `cssText` contains a mixin definition or consumption\n   * @param {string} cssText\n   * @return {boolean}\n   */\n  detectMixin(cssText) {\n    return detectMixin(cssText);\n  }\n\n  /**\n   * Gather styles into one style for easier processing\n   * @param {!HTMLTemplateElement} template\n   * @return {HTMLStyleElement}\n   */\n  gatherStyles(template) {\n    const styleText = gatherStyleText(template.content);\n    if (styleText) {\n      const style = /** @type {!HTMLStyleElement} */(document.createElement('style'));\n      style.textContent = styleText;\n      template.content.insertBefore(style, template.content.firstChild);\n      return style;\n    }\n    return null;\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformTemplate(template, elementName) {\n    if (template._gatheredStyle === undefined) {\n      template._gatheredStyle = this.gatherStyles(template);\n    }\n    /** @type {HTMLStyleElement} */\n    const style = template._gatheredStyle;\n    return style ? this.transformStyle(style, elementName) : null;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformStyle(style, elementName = '') {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @return {StyleNode}\n   */\n  transformCustomStyle(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (rule['selector'] === ':root') {\n        rule['selector'] = 'html';\n      }\n      this.transformRule(rule);\n    })\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {StyleNode} rules\n   * @param {string} elementName\n   */\n  transformRules(rules, elementName) {\n    this._currentElement = elementName;\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentElement = null;\n  }\n  /**\n   * @param {!StyleNode} rule\n   */\n  transformRule(rule) {\n    rule['cssText'] = this.transformCssText(rule['parsedCssText'], rule);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule['selector'] === ':root') {\n      rule['selector'] = ':host > *';\n    }\n  }\n  /**\n   * @param {string} cssText\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  transformCssText(cssText, rule) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, (matchText, propertyName, valueProperty, valueMixin) =>\n      this._produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule));\n    // consume mixins\n    return this._consumeCssProperties(cssText, rule);\n  }\n  /**\n   * @param {string} property\n   * @return {string}\n   */\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = /** @type {HTMLMetaElement} */(document.createElement('meta'));\n      this._measureElement.setAttribute('apply-shim-measure', '');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  /**\n   * Walk over all rules before this rule to find fallbacks for mixins\n   *\n   * @param {!StyleNode} startRule\n   * @return {!Object}\n   */\n  _fallbacksFromPreviousRules(startRule) {\n    // find the \"top\" rule\n    let topRule = startRule;\n    while (topRule['parent']) {\n      topRule = topRule['parent'];\n    }\n    const fallbacks = {};\n    let seenStartRule = false;\n    forEachRule(topRule, (r) => {\n      // stop when we hit the input rule\n      seenStartRule = seenStartRule || r === startRule;\n      if (seenStartRule) {\n        return;\n      }\n      // NOTE: Only matching selectors are \"safe\" for this fallback processing\n      // It would be prohibitive to run `matchesSelector()` on each selector,\n      // so we cheat and only check if the same selector string is used, which\n      // guarantees things like specificity matching\n      if (r['selector'] === startRule['selector']) {\n        Object.assign(fallbacks, this._cssTextToMap(r['parsedCssText']));\n      }\n    });\n    return fallbacks;\n  }\n  /**\n   * replace mixin consumption with variable consumption\n   * @param {string} text\n   * @param {!StyleNode=} rule\n   * @return {string}\n   */\n  _consumeCssProperties(text, rule) {\n    /** @type {Array} */\n    let m = null;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = rule ? this._fallbacksFromPreviousRules(rule) : {};\n      Object.assign(defaults, this._cssTextToMap(textBeforeApply));\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = `${textBeforeApply}${replacement}${textAfterApply}`;\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  /**\n   * produce variable consumption at the site of mixin consumption\n   * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n   * Example:\n   *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n   *\n   * @param {string} mixinName\n   * @param {Object} fallbacks\n   * @return {string}\n   */\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentElement) {\n        mixinEntry.dependants[this._currentElement] = true;\n      }\n      let p, parts, f;\n      const properties = mixinEntry.properties;\n      for (p in properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f.replace(IMPORTANT, ''));\n        }\n        parts.push(')');\n        if (IMPORTANT.test(properties[p])) {\n          parts.push(' !important');\n        }\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  /**\n   * @param {string} property\n   * @param {string} value\n   * @return {string}\n   */\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = this._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  /**\n   * \"parse\" a mixin definition into a map of properties and values\n   * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n   * @param {string} text\n   * @param {boolean=} replaceInitialOrInherit\n   * @return {!Object<string, string>}\n   */\n  _cssTextToMap(text, replaceInitialOrInherit = false) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = sp.slice(1).join(':');\n          if (replaceInitialOrInherit) {\n            value = this._replaceInitialOrInherit(property, value);\n          }\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * @param {MixinMapEntry} mixinEntry\n   */\n  _invalidateMixinEntry(mixinEntry) {\n    if (!invalidCallback) {\n      return;\n    }\n    for (let elementName in mixinEntry.dependants) {\n      if (elementName !== this._currentElement) {\n        invalidCallback(elementName);\n      }\n    }\n  }\n\n  /**\n   * @param {string} matchText\n   * @param {string} propertyName\n   * @param {?string} valueProperty\n   * @param {?string} valueMixin\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = `@apply ${value};`\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties('' + valueMixin, rule);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    // `initial` and `inherit` as properties in a map should be replaced because\n    // these keywords are eagerly evaluated when the mixin becomes CSS Custom Properties,\n    // and would set the variable value, rather than carry the keyword to the `var()` usage.\n    let mixinValues = this._cssTextToMap(mixinAsProperties, true);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = `${matchText};${prefix}`;\n    }\n    return `${prefix}${out.join('; ')};`;\n  }\n}\n\n/* exports */\n/* eslint-disable no-self-assign */\nApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin;\nApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle;\nApplyShim.prototype['transformCustomStyle'] = ApplyShim.prototype.transformCustomStyle;\nApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules;\nApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule;\nApplyShim.prototype['transformTemplate'] = ApplyShim.prototype.transformTemplate;\nApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;\n/* eslint-enable no-self-assign */\nObject.defineProperty(ApplyShim.prototype, 'invalidCallback', {\n  /** @return {?function(string)} */\n  get() {\n    return invalidCallback;\n  },\n  /** @param {?function(string)} cb */\n  set(cb) {\n    invalidCallback = cb;\n  }\n});\n\nexport default ApplyShim;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ApplyShim from '../src/apply-shim.js';\nimport templateMap from '../src/template-map.js';\nimport {getIsExtends, toCssText, elementHasBuiltCss} from '../src/style-util.js';\nimport * as ApplyShimUtils from '../src/apply-shim-utils.js';\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js';\nimport {CustomStyleInterfaceInterface} from '../src/custom-style-interface.js'; // eslint-disable-line no-unused-vars\nimport {nativeCssVariables, nativeShadow, cssBuild} from '../src/style-settings.js';\n\n/** @const {ApplyShim} */\nconst applyShim = new ApplyShim();\n\nclass ApplyShimInterface {\n  constructor() {\n    /** @type {?CustomStyleInterfaceInterface} */\n    this.customStyleInterface = null;\n    applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n  }\n  ensure() {\n    if (this.customStyleInterface) {\n      return;\n    }\n    if (window.ShadyCSS.CustomStyleInterface) {\n      this.customStyleInterface =\n          /** @type {!CustomStyleInterfaceInterface} */ (\n              window.ShadyCSS.CustomStyleInterface);\n      this.customStyleInterface['transformCallback'] = (style) => {\n        applyShim.transformCustomStyle(style);\n      };\n      this.customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this.customStyleInterface['enqueued']) {\n            this.flushCustomStyles();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplate(template, elementName) {\n    this.ensure();\n    if (elementHasBuiltCss(template)) {\n      return;\n    }\n    templateMap[elementName] = template;\n    let ast = applyShim.transformTemplate(template, elementName);\n    // save original style ast to use for revalidating instances\n    template['_styleAst'] = ast;\n  }\n  flushCustomStyles() {\n    this.ensure();\n    if (!this.customStyleInterface) {\n      return;\n    }\n    let styles = this.customStyleInterface['processStyles']();\n    if (!this.customStyleInterface['enqueued']) {\n      return;\n    }\n    for (let i = 0; i < styles.length; i++ ) {\n      let cs = styles[i];\n      let style = this.customStyleInterface['getStyleForCustomStyle'](cs);\n      if (style) {\n        applyShim.transformCustomStyle(style);\n      }\n    }\n    this.customStyleInterface['enqueued'] = false;\n  }\n  /**\n   * @param {HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    this.ensure();\n    if (properties) {\n      updateNativeProperties(element, properties);\n    }\n    if (element.shadowRoot) {\n      this.styleElement(element);\n      let shadowChildren =\n          /** @type {!ParentNode} */ (element.shadowRoot).children ||\n          element.shadowRoot.childNodes;\n      for (let i = 0; i < shadowChildren.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */(shadowChildren[i]));\n      }\n    } else {\n      let children = element.children || element.childNodes;\n      for (let i = 0; i < children.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */(children[i]));\n      }\n    }\n  }\n  /**\n   * @param {HTMLElement} element\n   */\n  styleElement(element) {\n    this.ensure();\n    let {is} = getIsExtends(element);\n    let template = templateMap[is];\n    if (template && elementHasBuiltCss(template)) {\n      return;\n    }\n    if (template && !ApplyShimUtils.templateIsValid(template)) {\n      // only revalidate template once\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this.prepareTemplate(template, is);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update this element instance\n      let root = element.shadowRoot;\n      if (root) {\n        let style = /** @type {HTMLStyleElement} */(root.querySelector('style'));\n        if (style) {\n          // reuse the template's style ast, it has all the original css text\n          style['__cssRules'] = template['_styleAst'];\n          style.textContent = toCssText(template['_styleAst'])\n        }\n      }\n    }\n  }\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.ensure();\n    this.styleSubtree(document.body, properties);\n  }\n}\n\nif (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {\n  const applyShimInterface = new ApplyShimInterface();\n  let CustomStyleInterface = window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;\n\n  /** @suppress {duplicate} */\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplate(template, elementName, elementExtends) { // eslint-disable-line no-unused-vars\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.prepareTemplate(template, elementName);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplateStyles(template, elementName, elementExtends) {\n      window.ShadyCSS.prepareTemplate(template, elementName, elementExtends);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n    prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLElement} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleSubtree(element, properties);\n    },\n\n    /**\n     * @param {!HTMLElement} element\n     */\n    styleElement(element) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleElement(element);\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleDocument(properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n\n    flushCustomStyles() {\n      applyShimInterface.flushCustomStyles();\n    },\n\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    cssBuild: cssBuild\n  };\n\n  if (CustomStyleInterface) {\n    window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n  }\n}\n\nwindow.ShadyCSS.ApplyShim = applyShim;\n"],"sourceRoot":""}
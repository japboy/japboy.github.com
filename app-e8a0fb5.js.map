{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/modify-template.js","webpack:///./node_modules/lit-html/lib/shady-render.js","webpack:///./node_modules/lit-element/lib/updating-element.js","webpack:///./node_modules/lit-element/lib/decorators.js","webpack:///./node_modules/lit-element/lib/css-tag.js","webpack:///./node_modules/lit-element/lit-element.js","webpack:///./src/components/atoms/Balloon/index.ts","webpack:///./src/components/templates/Home/index.ts","webpack:///./src/components/pages/Home/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","directives","WeakMap","isDirective","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","node","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","this","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","document","createTreeWalker","lastPartIndex","nextNode","currentNode","nodeType","hasAttributes","attributes","count","length","indexOf","stringForPart","strings","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","getAttribute","split","push","type","removeAttribute","tagName","data","parent","parentNode","lastIndex","insertBefore","createMarker","createTextNode","previousSibling","isTemplatePartActive","part","createComment","template_instance_TemplateInstance","processor","options","_parts","values","setValue","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","template_result_TemplateResult","endIndex","html","match","substr","createElement","innerHTML","getHTML","isPrimitive","AttributeCommitter","dirty","_createPart","parts_AttributePart","text","v","Array","isArray","iterator","setAttribute","_getValue","comitter","committer","directive","parts_NodePart","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","Node","_commitNode","_commitIterable","clear","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","parts_BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","parts_EventPart","eventName","eventContext","_boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","event","defaultTemplateProcessor","prefix","templateCache","templateCaches","stringsArray","keyString","Map","set","join","getTemplateElement","render_parts","lit_html_html","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","nativeShadow","querySelector","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","oldValue","requestUpdate","configurable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","previousUpdatePromise","res","_hasConnected","performUpdate","then","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","standardProperty","kind","descriptor","placement","initializer","clazz","assign","legacyProperty","proto","protoOrDescriptor","_query","target","selector","legacyQuery","standardQuery","queryFn","renderRoot","supportsAdoptingStyleSheets","Document","CSSStyleSheet","flattenStyles","flat","Infinity","arrayFlat","lit_element_LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","cssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","firstScopeRender","renderContainer","createDocumentFragment","appendInto","cacheKey","shadyTemplateFactory","delete","host","Direction","__decorate","decorators","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","Balloon_AtomBalloon","direction","Bottom","define","Home_TemplateHome","active","initialized","setTimeout","toggle","hired","gravatar","Home_decorate"],"mappings":"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","file":"app-e8a0fb5.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            // Keeps track of the last index associated with a part. We try to delete\n            // unnecessary nodes, but we never want to associate two different parts\n            // to the same index. They must have a constant node between.\n            let lastPartIndex = 0;\n            while (walker.nextNode()) {\n                index++;\n                const node = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // All bound attributes have had a suffix added in\n                            // TemplateResult#getHTML to opt out of special attribute\n                            // handling. To look up the attribute value we also need to add\n                            // the suffix.\n                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const data = node.data;\n                    if (data.indexOf(marker) >= 0) {\n                        const parent = node.parentNode;\n                        const strings = data.split(markerRegex);\n                        const lastIndex = strings.length - 1;\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        for (let i = 0; i < lastIndex; i++) {\n                            parent.insertBefore((strings[i] === '') ? createMarker() :\n                                document.createTextNode(strings[i]), node);\n                            this.parts.push({ type: 'node', index: ++index });\n                        }\n                        // If there's no text, we must insert a comment to mark our place.\n                        // Else, we can trust it will stick around after cloning.\n                        if (strings[lastIndex] === '') {\n                            parent.insertBefore(createMarker(), node);\n                            nodesToRemove.push(node);\n                        }\n                        else {\n                            node.data = strings[lastIndex];\n                        }\n                        // We have a part for each match found\n                        partIndex += lastIndex;\n                    }\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.data === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * The previousSibling is already the start of a previous part\n                        if (node.previousSibling === null || index === lastPartIndex) {\n                            index++;\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        lastPartIndex = index;\n                        this.parts.push({ type: 'node', index });\n                        // If we don't have a nextSibling, keep this node so we have an end.\n                        // Else, we can remove it to save future costs.\n                        if (node.nextSibling === null) {\n                            node.data = '';\n                        }\n                        else {\n                            nodesToRemove.push(node);\n                            index--;\n                        }\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.data.indexOf(marker, i + 1)) !==\n                            -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node.previousSibling);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const endIndex = this.strings.length - 1;\n        let html = '';\n        for (let i = 0; i < endIndex; i++) {\n            const s = this.strings[i];\n            // This exec() call does two things:\n            // 1) Appends a suffix to the bound attribute name to opt out of special\n            // attribute value parsing that IE11 and Edge do, like for style and\n            // many SVG attributes. The Template class also appends the same suffix\n            // when looking up attributes to create Parts.\n            // 2) Adds an unquoted-attribute-safe marker for the first expression in\n            // an attribute. Subsequent attribute expressions will use node markers,\n            // and this is safe since attributes with multiple expressions are\n            // guaranteed to be quoted.\n            const match = lastAttributeNameRegex.exec(s);\n            if (match) {\n                // We're starting a new bound attribute.\n                // Add the safe attribute suffix, and use unquoted-attribute-safe\n                // marker.\n                html += s.substr(0, match.index) + match[1] + match[2] +\n                    boundAttributeSuffix + match[3] + marker;\n            }\n            else {\n                // We're either in a bound node, or trailing bound attribute.\n                // Either way, nodeMarker is safe to use.\n                html += s + nodeMarker;\n            }\n        }\n        return html + this.strings[endIndex];\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) ||\n                        // tslint:disable-next-line:no-any\n                        typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) ||\n            // tslint:disable-next-line:no-any\n            value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        if (shouldAddListener) {\n            this._options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, skip unnecessary work\n    if (styles.length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = container instanceof ShadowRoot &&\n        compatibleShadyCSSVersion && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                // tslint:disable-next-line:no-any no symbol in index\n                return this[key];\n            },\n            set(value) {\n                // tslint:disable-next-line:no-any no symbol in index\n                const oldValue = this[name];\n                // tslint:disable-next-line:no-any no symbol in index\n                this[key] = value;\n                this.requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure connection triggers an update. Updates cannot complete before\n        // connection and if one is pending connection the `_hasConnectionResolver`\n        // will exist. If so, resolve it to complete the update, otherwise\n        // requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n        else {\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // if we have a property key, perform property update steps.\n        if (name !== undefined && !this._changedProperties.has(name)) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                // track old value when changing.\n                this._changedProperties.set(name, oldValue);\n                // add to reflecting properties set\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n                // abort the request if the property should not be considered changed.\n            }\n            else {\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res) => resolve = res);\n        // Ensure any previous update has resolved before updating.\n        // This `await` also ensures that property changes are batched.\n        await previousUpdatePromise;\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        // Allow `performUpdate` to be asynchronous to enable scheduling of updates.\n        const result = this.performUpdate();\n        // Note, this is to avoid delaying an additional microtask unless we need\n        // to.\n        if (result != null &&\n            typeof result.then === 'function') {\n            await result;\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update.\n     *\n     * You can override this method to change the timing of updates. For instance,\n     * to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        if (this.shouldUpdate(this._changedProperties)) {\n            const changedProperties = this._changedProperties;\n            this.update(changedProperties);\n            this._markUpdated();\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n        else {\n            this._markUpdated();\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            // tslint:disable-next-line:no-any decorator\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n */\nexport const query = _query((target, selector) => target.querySelector(selector));\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n */\nexport const queryAll = _query((target, selector) => target.querySelectorAll(selector));\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\n/**\n * Base-implementation of `@query` and `@queryAll` decorators.\n *\n * @param queryFn exectute a `selector` (ie, querySelector or querySelectorAll)\n * against `target`.\n * @suppress {visibility} The descriptor accesses an internal field on the\n * element.\n */\nfunction _query(queryFn) {\n    return (selector) => (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return queryFn(this.renderRoot, selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.0.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot = this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, property } from 'lit-element';\nvar Direction;\n(function (Direction) {\n    Direction[\"Top\"] = \"top\";\n    Direction[\"Left\"] = \"left\";\n    Direction[\"Right\"] = \"right\";\n    Direction[\"Bottom\"] = \"bottom\";\n})(Direction || (Direction = {}));\nclass AtomBalloon extends LitElement {\n    constructor() {\n        super();\n        this.direction = Direction.Bottom;\n    }\n    render() {\n        return html `\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n        }\n        .balloon {\n          background-color: #0a0a0a;\n          border-radius: 3px;\n          box-sizing: border-box;\n          color: #fff;\n          display: inline-block;\n          font-size: 16px;\n          margin: 1.5em 0;\n          width: 280px;\n          padding: 7px 10px;\n          position: relative;\n        }\n        .balloon.bottom::before {\n          border-bottom: 15px solid transparent;\n          border-left: 15px solid transparent;\n          border-right: 15px solid transparent;\n          border-top: 15px solid #0a0a0a;\n          content: \"\";\n          left: 50%;\n          margin-left: -15px;\n          position: absolute;\n          top: 100%;\n        }\n        .balloon.top::before {\n          border-bottom: 15px solid #0a0a0a;\n          border-left: 15px solid transparent;\n          border-right: 15px solid transparent;\n          border-top: 15px solid transparent;\n          content: \"\";\n          left: 50%;\n          margin-left: -15px;\n          margin-top: -30px;\n          position: absolute;\n          top: 0;\n        }\n        @media only screen and (max-height: 400px) and (min-width: 600px) {\n          .balloon {\n            width: 480px;\n          }\n        }\n      </style>\n      <div class=\"balloon ${this.direction}\">\n        <slot></slot>\n      </div>\n    `;\n    }\n}\n__decorate([\n    property({ type: String })\n], AtomBalloon.prototype, \"direction\", void 0);\nwindow.customElements.define('atom-balloon', AtomBalloon);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, property } from 'lit-element';\nimport '@/components/atoms/Balloon';\nclass TemplateHome extends LitElement {\n    constructor() {\n        super();\n        this.active = false;\n        this.initialized = false;\n        setTimeout(this.toggle.bind(this), 600);\n    }\n    firstUpdated() {\n        this.initialized = true;\n    }\n    toggle() {\n        this.active = !this.active;\n        if (this.initialized && !this.active) {\n            this.hired = !this.hired;\n        }\n        else {\n            this.hired = false;\n        }\n        this.requestUpdate();\n    }\n    render() {\n        return html `\n      <style>\n        .portrait {\n          background-color: #eee;\n          border-radius: 50px;\n          cursor: pointer;\n          height: 100px;\n          left: calc(50% - 50px);\n          position: absolute;\n          top: calc(75% - 50px);\n          transform: rotate(0);\n          transition-duration: 0.3s;\n          transition-property: transform;\n          width: 100px;\n        }\n        .portrait[aria-selected=\"true\"] {\n          transform: rotate(10deg);\n        }\n        .balloon {\n          left: calc(50% - 140px);\n          margin-top: 10px;\n          opacity: 0;\n          position: absolute;\n          top: calc(75% - 340px);\n          transition-duration: 0.3s;\n          transition-property: margin-top, opacity;\n        }\n        .balloon[aria-selected=\"true\"] {\n          margin-top: 0;\n          opacity: 1;\n        }\n        .linkedin {\n          background-color: #0077b5;\n          border-radius: 3px;\n          box-sizing: border-box;\n          color: #fff;\n          left: 50%;\n          margin-left: -38px;\n          margin-top: 70px;\n          position: absolute;\n          text-align: center;\n          top: 75%;\n          width: 76px;\n          padding: 3px;\n          font-size: smaller;\n        }\n        .linkedin a:link,\n        .linkedin a:visited {\n          color: #fff;\n          text-decoration: none;\n        }\n        @media only screen and (max-height: 400px) and (min-width: 600px) {\n          .balloon {\n            top: calc(75% - 260px);\n            left: calc(50% - 240px);\n          }\n          .linkedin {\n            margin-left: 60px;\n            margin-top: 20px;\n          }\n        }\n      </style>\n\n      <main>\n        <img\n          aria-selected=\"${this.active ? 'true' : 'false'}\"\n          class=\"portrait\"\n          height=\"100\"\n          src=\"https://www.gravatar.com/avatar/${this.gravatar}?s=200\"\n          width=\"100\"\n          @click=\"${this.toggle}\"\n        >\n        <atom-balloon\n          aria-selected=\"${this.active ? 'true' : 'false'}\"\n          class=\"balloon\"\n          direction=\"bottom\"\n        >\n          <p>Hi, I'm Yu Inao.<br>Currently working as a senior web frontend developer in Tokyo.</p>\n          <p>My passions focus on web UI development, component-based UI design, performant web, web apps, &amp; web standards.</p>\n        </atom-balloon>\n        ${this.hired\n            ? html `\n            <p class=\"linkedin\">\n              <a href=\"https://www.linkedin.com/in/yuinao/\">LinkedIn</a>\n            </p>\n          `\n            : html ``}\n      </main>\n    `;\n    }\n}\n__decorate([\n    property({ type: String })\n], TemplateHome.prototype, \"gravatar\", void 0);\nwindow.customElements.define('template-home', TemplateHome);\n","import { LitElement, html } from 'lit-element';\nimport '@/components/templates/Home';\nexport class PageHome extends LitElement {\n    static get properties() {\n        return {};\n    }\n    constructor() {\n        super();\n    }\n    render() {\n        return html `\n      <template-home gravatar=\"1e4b7d2f20a2ecb20497d9b8704e6107\"></template-home>\n    `;\n    }\n}\nwindow.customElements.define('page-home', PageHome);\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@webcomponents/shadycss/src/unscoped-style-handler.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-util.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-settings.js","webpack:///./node_modules/@webcomponents/shadycss/src/common-regex.js","webpack:///./node_modules/@webcomponents/shadycss/src/css-parse.js","webpack:///./node_modules/@webcomponents/shadycss/src/template-map.js","webpack:///./node_modules/@webcomponents/shadycss/src/common-utils.js","webpack:///./node_modules/@webcomponents/shadycss/src/apply-shim-utils.js","webpack:///./node_modules/@webcomponents/shadycss/src/document-wait.js","webpack:///./node_modules/@webcomponents/shadycss/src/custom-style-interface.js","webpack:///./node_modules/@webcomponents/shadycss/entrypoints/custom-style-interface.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-transformer.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-info.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-properties.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-placeholder.js","webpack:///./node_modules/@webcomponents/shadycss/src/document-watcher.js","webpack:///./node_modules/@webcomponents/shadycss/src/scoping-shim.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-cache.js","webpack:///./node_modules/@webcomponents/shadycss/entrypoints/scoping-shim.js","webpack:///./node_modules/@webcomponents/shadycss/src/apply-shim.js","webpack:///./node_modules/@webcomponents/shadycss/entrypoints/apply-shim.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","styleTextSet","Set","scopingAttribute","processUnscopedStyle","style","text","textContent","has","add","newStyle","cloneNode","document","head","appendChild","isUnscopedStyle","hasAttribute","toCssText","rules","callback","css_parse","forEachRule","style_settings","rulesForStyle","isKeyframesSelector","rule","Boolean","KEYFRAMES_RULE","node","styleRuleCallback","keyframesRuleCallback","onlyActiveRules","skipRules","type","MEDIA_RULE","matchMedia","match","common_regex","window","matches","STYLE_RULE","MIXIN_RULE","r$","length","applyCss","cssText","moniker","target","contextNode","createElement","setAttribute","createScopeStyle","applyStyle","__webpack_exports__","applyStylePlaceHolder","findMatchingParen","processVariableAndFallback","setElementClassRaw","wrap","getIsExtends","gatherStyleText","splitSelectorList","getCssBuild","elementHasBuiltCss","isOptimalCssBuild","lastHeadApplyNode","placeHolder","createComment","after","scope","insertBefore","firstChild","nextSibling","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","start","level","str","indexOf","end","inner","substring","prefix","suffix","comma","trim","element","localName","is","typeExtension","getAttribute","extends","styleTextParts","styles","querySelectorAll","parentNode","removeChild","push","join","selector","parts","part","slice","CSS_BUILD_ATTR","undefined","__cssBuild","attrValue","buildComment","content","Comment","commentParts","split","getBuildComment","removeBuildComment","cssBuild","nativeShadow","disableRuntime","nativeCssVariables","nativeCssVariables_","calcCssVariables","settings","navigator","userAgent","CSS","supports","ShadyCSS","nativeCss","VAR_ASSIGN","MIXIN_MATCH","VAR_CONSUMED","ANIMATION_MATCH","MEDIA_MATCH","BRACKETED","HOST_PREFIX","HOST_SUFFIX","StyleNode","parse","stringify","removeCustomPropAssignment","types","[object Object]","this","parseCss","ss","replace","code","arguments","repeat","_expandUnicodeEscapes","RX","multipleSpaces","lastIndexOf","AT_START","MEDIA_START","keyframesRule","pop","VAR_START","root","OPEN_BRACE","previous","CLOSE_BRACE","lex","comments","port","preserveProperties","_hasMixinRules","mixinApply","varApply","removeCustomPropApply","removeCustomProps","customProp","mixinProp","updateNativeProperties","getComputedStyleValue","detectMixin","_common_regex_js__WEBPACK_IMPORTED_MODULE_0__","properties","removeProperty","setProperty","getComputedStyle","getPropertyValue","test","lastIndex","invalidate","templateIsValid","templateIsValidating","startValidatingTemplate","_template_map_js__WEBPACK_IMPORTED_MODULE_0__","CURRENT_VERSION","NEXT_VERSION","VALIDATING_VERSION","promise","Promise","resolve","elementName","template","invalidateTemplate","_validating","then","resolveFn","readyPromise","whenReady","documentWait","requestAnimationFrame","readyState","addEventListener","custom_style_interface_CustomStyleInterface","SEEN_MARKER","CACHED_STYLE","transformFn","validateFn","enqueueDocumentValidation","customStyle","cs","getStyleForCustomStyle","styleToTransform","addCustomStyle","processStyles","defineProperties","transformCallback","fn","validateCallback","needsEnqueue","_src_custom_style_interface_js__WEBPACK_IMPORTED_MODULE_0__","_src_common_utils_js__WEBPACK_IMPORTED_MODULE_1__","_src_style_settings_js__WEBPACK_IMPORTED_MODULE_2__","customStyleInterface","elementExtends","body","CustomStyleInterface","SCOPE_NAME","NTH","SCOPE_DOC_SELECTOR","COMPLEX_SELECTOR_SEP","SIMPLE_SELECTOR_SEP","SIMPLE_SELECTOR_PREFIX","HOST","ROOT","SLOTTED","SLOTTED_START","RegExp","HOST_PAREN","SLOTTED_PAREN","DIR_PAREN","CSS_CLASS_PREFIX","PSEUDO_PREFIX","CLASS","SELECTOR_NO_MATCH","MATCHES","MATCHES_REPLACEMENT","style_transformer","shouldRemoveScope","_transformDom","startNode","transformer","c$","nodeType","ELEMENT_NODE","_content","childNodes","children","classList","remove","newValue","style_util","oldScope","newScope","styleRules","css","ext","hostScope","_calcHostScope","_calcElementScope","self","isScoped","_transformRule","_transformComplexSelector","transformedSelector","_transformRuleCss","p$","filter","inside","index","Error","input","reduce","acc","cur","idx","stop","isNth","_twiddleNthPlus","isMatches","_preserveMatchesPseudo","info","_transformCompoundSelector","combinator","_replaceMatchesPseudo","before","dir","slottedIndex","_transformHostSelector","_transformSimpleSelector","slotted","paren","attributes","output","host","normalizeRootSelector","_transformDocumentSelector","infoKey","StyleInfo","styleInfo","ast","placeholder","ownStylePropertyNames","overrideStyleProperties","styleProperties","scopeSelector","_getStyleRules","matchesSelector","method","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","IS_IE","XSCOPE_NAME","style_properties","props","keyframes","ruleIndex","decorateRule","collectPropertiesInCssText","propertyInfo","_keyframes","names","collectProperties","collectCssText","any","rx","exec","assign","collectConsumingCssText","getOwnPropertyNames","valueForProperty","valueForProperties","fallback","propertyValue","colon","pp","keyframeTransforms","hasAnimations","transform","keyframeNamesToTransform","keyframe","selectorToMatch","bits","parseInt","v","addToBitMask","parsedSelector","isRoot","isHost","hostProps","rootProps","whenHostOrRootRule","_element","hostSelector","rxHostSelector","hostRx","_elementKeyframeTransforms","elementStyles","applyProperties","applyKeyframeTransforms","_scopeSelector","keyframesRules","_scopeKeyframes","_keyframesRuleTransformer","keyframesNameRx","transformedKeyframesName","scopeId","old","transformStyles","shadowRoot","placeholderMap","getStylePlaceholder","ensureStylePlaceholder","ce","origDefine","wrappedDefine","clazz","options","flush","scopeRegExp","getCurrentScope","getClasses","getOwnerScope","ownerRoot","getRootNode","ownerDocument","ensureCorrectSubtreeScoping","unscopedNodes","j","unscopedNode","scopeForPreviouslyUnscopedNode","handler","mxns","x","mxn","documentElement","addedNodes","currentScope","el","domRemoveScope","ShadowRoot","domReplaceScope","observer","MutationObserver","observe","childList","subtree","delayedStart","listener","removeEventListener","takeRecords","adoptedCssTextMap","styleCache","typeMax","cache","cacheEntry","ownPropertyNames","pn","tagname","styleElement","list","shift","entry","_validate","scoping_shim_ScopingShim","_scopeCounter","_documentOwner","_documentOwnerStyleInfo","set","_elementsHaveApplied","_applyShim","_customStyleInterface","prepareTemplateDom","prepareTemplateStyles","_prepared","template_map","optimalBuild","_gatherStyles","_ensure","hasMixins","common_utils","decorateStyles","_generateStaticStyle","_style","_ownPropertyNames","cssTextArray","_domPrepared","domAddScope","shadowroot","ApplyShim","apply_shim_utils","transformCustomStyleForDocument","flushCustomStyles","_ensureApplyShim","_ensureCustomStyleInterface","customStyles","_revalidateCustomStyleApplyShim","_updateProperties","_applyCustomStyles","styleDocument","overrideProps","_mixOverrideStyleProps","styleElementNativeVariables","_prepareHost","_isRootOwner","styleElementShimVariables","_applyStyleProperties","querySelector","_styleOwnerForNode","fetch","cachedScopeSelector","cachedStyle","oldScopeSelector","_generateScopeSelector","applyElementStyle","applyElementScopeSelector","store","owner","ownerStyleInfo","ownerProperties","hostAndRootProps","hostAndRootPropertiesForScope","propertiesMatchingHost","propertyDataFromStyles","_mixinOverrideStyles","reify","overrides","styleSubtree","wrappedHost","shadowChildren","_revalidateApplyShim","applyCustomStyle","documentRule","classString","classes","scopeName","classAttr","k$","prepareTemplate","setElementClass","_styleInfoForNode","getStyleAst","styleAstToString","scopeNode","unscopeNode","scopeForNode","currentScopeForNode","prepareAdoptedCssText","scopingShim","ScopingShim","APPLY_NAME_CLEAN","INITIAL_INHERIT","IMPORTANT","MIXIN_VAR_SEP","MixinMap","_map","dependants","invalidCallback","apply_shim_ApplyShim","_currentElement","_measureElement","styleText","_gatheredStyle","gatherStyles","transformStyle","transformRules","transformRule","transformCssText","matchText","propertyName","valueProperty","valueMixin","_produceCssProperties","_consumeCssProperties","all","startRule","topRule","fallbacks","seenStartRule","_cssTextToMap","mixinName","applyPos","afterApplyPos","textBeforeApply","textAfterApply","defaults","_fallbacksFromPreviousRules","replacement","_atApplyToCssProperties","vars","mixinEntry","f","_getInitialValueForProperty","replaceInitialOrInherit","out","sp","_replaceInitialOrInherit","mixinAsProperties","mixinValues","combinedProps","oldProps","needToInvalidate","_invalidateMixinEntry","transformCustomStyle","transformTemplate","cb","apply_shim","applyShim","apply_shim_ApplyShimInterface","ensure","applyShimInterface"],"mappings":"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","file":"shadycss-8e72b4c.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {!Set<string>} */\nconst styleTextSet = new Set();\n\nexport const scopingAttribute = 'shady-unscoped';\n\n/**\n * Add a specifically-marked style to the document directly, and only one copy of that style.\n *\n * @param {!HTMLStyleElement} style\n * @return {undefined}\n */\nexport function processUnscopedStyle(style) {\n  const text = style.textContent;\n  if (!styleTextSet.has(text)) {\n    styleTextSet.add(text);\n    const newStyle = style.cloneNode(true);\n    document.head.appendChild(newStyle);\n  }\n}\n\n/**\n * Check if a style is supposed to be unscoped\n * @param {!HTMLStyleElement} style\n * @return {boolean} true if the style has the unscoping attribute\n */\nexport function isUnscopedStyle(style) {\n  return style.hasAttribute(scopingAttribute);\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables, cssBuild} from './style-settings.js';\nimport {parse, stringify, types, StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport {MEDIA_MATCH} from './common-regex.js';\nimport {processUnscopedStyle, isUnscopedStyle} from './unscoped-style-handler.js';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n * @return {string}\n */\nexport function toCssText (rules, callback) {\n  if (!rules) {\n    return '';\n  }\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'] || null;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) &&\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  applyStyle(style, target, contextNode);\n  return style;\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {HTMLStyleElement}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = /** @type {HTMLStyleElement} */(document.createElement('style'));\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/**\n * Track the position of the last added style for placing placeholders\n * @type {Node}\n */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {!Comment}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @param {?Node} target\n * @param {?Node} contextNode\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n    target.firstChild;\n  target.insertBefore(style, after);\n  if (!lastHeadApplyNode) {\n    lastHeadApplyNode = style;\n  } else {\n    // only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode\n    let position = style.compareDocumentPosition(lastHeadApplyNode);\n    if (position === Node.DOCUMENT_POSITION_PRECEDING) {\n      lastHeadApplyNode = style;\n    }\n  }\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nexport function findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (nativeShadow) {\n    element.setAttribute('class', value);\n  } else {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  }\n}\n\n/**\n * @type {function(*):*}\n */\nexport const wrap = window['ShadyDOM'] && window['ShadyDOM']['wrap'] || ((node) => node);\n\n/**\n * @param {Element | {is: string, extends: string}} element\n * @return {{is: string, typeExtension: string}}\n */\nexport function getIsExtends(element) {\n  let localName = element['localName'];\n  let is = '', typeExtension = '';\n  /*\n  NOTE: technically, this can be wrong for certain svg elements\n  with `-` in the name like `<font-face>`\n  */\n  if (localName) {\n    if (localName.indexOf('-') > -1) {\n      is = localName;\n    } else {\n      typeExtension = localName;\n      is = (element.getAttribute && element.getAttribute('is')) || '';\n    }\n  } else {\n    is = /** @type {?} */(element).is;\n    typeExtension = /** @type {?} */(element).extends;\n  }\n  return {is, typeExtension};\n}\n\n/**\n * @param {Element|DocumentFragment} element\n * @return {string}\n */\nexport function gatherStyleText(element) {\n  /** @type {!Array<string>} */\n  const styleTextParts = [];\n  const styles = /** @type {!NodeList<!HTMLStyleElement>} */(element.querySelectorAll('style'));\n  for (let i = 0; i < styles.length; i++) {\n    const style = styles[i];\n    if (isUnscopedStyle(style)) {\n      if (!nativeShadow) {\n        processUnscopedStyle(style);\n        style.parentNode.removeChild(style);\n      }\n    } else {\n      styleTextParts.push(style.textContent);\n      style.parentNode.removeChild(style);\n    }\n  }\n  return styleTextParts.join('').trim();\n}\n\n/**\n * Split a selector separated by commas into an array in a smart way\n * @param {string} selector\n * @return {!Array<string>}\n */\nexport function splitSelectorList(selector) {\n  const parts = [];\n  let part = '';\n  for (let i = 0; i >= 0 && i < selector.length; i++) {\n    // A selector with parentheses will be one complete part\n    if (selector[i] === '(') {\n      // find the matching paren\n      const end = findMatchingParen(selector, i);\n      // push the paren block into the part\n      part += selector.slice(i, end + 1);\n      // move the index to after the paren block\n      i = end;\n    } else if (selector[i] === ',') {\n      parts.push(part);\n      part = '';\n    } else {\n      part += selector[i];\n    }\n  }\n  // catch any pieces after the last comma\n  if (part) {\n    parts.push(part);\n  }\n  return parts;\n}\n\nconst CSS_BUILD_ATTR = 'css-build';\n\n/**\n * Return the polymer-css-build \"build type\" applied to this element\n *\n * @param {!HTMLElement} element\n * @return {string} Can be \"\", \"shady\", or \"shadow\"\n */\nexport function getCssBuild(element) {\n  if (cssBuild !== undefined) {\n    return /** @type {string} */(cssBuild);\n  }\n  if (element.__cssBuild === undefined) {\n    // try attribute first, as it is the common case\n    const attrValue = element.getAttribute(CSS_BUILD_ATTR);\n    if (attrValue) {\n      element.__cssBuild = attrValue;\n    } else {\n      const buildComment = getBuildComment(element);\n      if (buildComment !== '') {\n        // remove build comment so it is not needlessly copied into every element instance\n        removeBuildComment(element);\n      }\n      element.__cssBuild = buildComment;\n    }\n  }\n  return element.__cssBuild || '';\n}\n\n/**\n * Check if the given element, either a <template> or <style>, has been processed\n * by polymer-css-build.\n *\n * If so, then we can make a number of optimizations:\n * - polymer-css-build will decompose mixins into individual CSS Custom Properties,\n * so the ApplyShim can be skipped entirely.\n * - Under native ShadowDOM, the style text can just be copied into each instance\n * without modification\n * - If the build is \"shady\" and ShadyDOM is in use, the styling does not need\n * scoping beyond the shimming of CSS Custom Properties\n *\n * @param {!HTMLElement} element\n * @return {boolean}\n */\nexport function elementHasBuiltCss(element) {\n  return getCssBuild(element) !== '';\n}\n\n/**\n * For templates made with tagged template literals, polymer-css-build will\n * insert a comment of the form `<!--css-build:shadow-->`\n *\n * @param {!HTMLElement} element\n * @return {string}\n */\nexport function getBuildComment(element) {\n  const buildComment = element.localName === 'template' ?\n      /** @type {!HTMLTemplateElement} */ (element).content.firstChild :\n      element.firstChild;\n  if (buildComment instanceof Comment) {\n    const commentParts = buildComment.textContent.trim().split(':');\n    if (commentParts[0] === CSS_BUILD_ATTR) {\n      return commentParts[1];\n    }\n  }\n  return '';\n}\n\n/**\n * Check if the css build status is optimal, and do no unneeded work.\n *\n * @param {string=} cssBuild CSS build status\n * @return {boolean} css build is optimal or not\n */\nexport function isOptimalCssBuild(cssBuild = '') {\n  // CSS custom property shim always requires work\n  if (cssBuild === '' || !nativeCssVariables) {\n    return false;\n  }\n  return nativeShadow ? cssBuild === 'shadow' : cssBuild === 'shady';\n}\n\n/**\n * @param {!HTMLElement} element\n */\nfunction removeBuildComment(element) {\n  const buildComment = element.localName === 'template' ?\n      /** @type {!HTMLTemplateElement} */ (element).content.firstChild :\n      element.firstChild;\n  buildComment.parentNode.removeChild(buildComment);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport const nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\nlet nativeCssVariables_;\n\n/**\n * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings\n */\nfunction calcCssVariables(settings) {\n  if (settings && settings['shimcssproperties']) {\n    nativeCssVariables_ = false;\n  } else {\n    // chrome 49 has semi-working css vars, check if box-shadow works\n    // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\n    // However, shim css custom properties are only supported with ShadyDOM enabled,\n    // so fall back on native if we do not detect ShadyDOM\n    // Edge 15: custom properties used in ::before and ::after will also be used in the parent element\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/\n    nativeCssVariables_ = nativeShadow || Boolean(!navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/) &&\n      window.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n  }\n}\n\n/** @type {string | undefined} */\nexport let cssBuild;\nif (window.ShadyCSS && window.ShadyCSS.cssBuild !== undefined) {\n  cssBuild = window.ShadyCSS.cssBuild;\n}\n\n/** @type {boolean} */\nexport const disableRuntime = Boolean(window.ShadyCSS && window.ShadyCSS.disableRuntime);\n\nif (window.ShadyCSS && window.ShadyCSS.nativeCss !== undefined) {\n  nativeCssVariables_ = window.ShadyCSS.nativeCss;\n} else if (window.ShadyCSS) {\n  calcCssVariables(window.ShadyCSS);\n  // reset window variable to let ShadyCSS API take its place\n  window.ShadyCSS = undefined;\n} else {\n  calcCssVariables(window['WebComponents'] && window['WebComponents']['flags']);\n}\n\n// Hack for type error under new type inference which doesn't like that\n// nativeCssVariables is updated in a function and assigns the type\n// `function(): ?` instead of `boolean`.\nexport const nativeCssVariables = /** @type {boolean} */(nativeCssVariables_);","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi;\nexport const MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\nexport const VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\nexport const ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\nexport const MEDIA_MATCH = /@media\\s(.*)/;\nexport const IS_VAR = /^--/;\nexport const BRACKETED = /\\{[^}]*\\}/g;\nexport const HOST_PREFIX = '(?:^|[^.#[:])';\nexport const HOST_SUFFIX = '($|[.:[\\\\s>+~])';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n/** @unrestricted */\nclass StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\nexport {StyleNode}\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node['parsedSelector'] = node['selector'] = t.trim();\n    node['atRule'] = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] =\n          node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nexport function stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node['cssText'] :\n        removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nexport const types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @const {!Object<string, !HTMLTemplateElement>}\n */\nconst templateMap = {};\nexport default templateMap;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport { MIXIN_MATCH, VAR_ASSIGN } from './common-regex.js';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  /**\n   * @const {string}\n   */\n  const value = window.getComputedStyle(element).getPropertyValue(property);\n  if (!value) {\n    return '';\n  } else {\n    return value.trim();\n  }\n}\n\n/**\n * return true if `cssText` contains a mixin definition or consumption\n * @param {string} cssText\n * @return {boolean}\n */\nexport function detectMixin(cssText) {\n  const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n  // reset state of the regexes\n  MIXIN_MATCH.lastIndex = 0;\n  VAR_ASSIGN.lastIndex = 0;\n  return has;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\nimport templateMap from './template-map.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\n/*\n * Utilities for handling invalidating apply-shim mixins for a given template.\n *\n * The invalidation strategy involves keeping track of the \"current\" version of a template's mixins, and updating that count when a mixin is invalidated.\n * The template\n */\n\n/** @const {string} */\nconst CURRENT_VERSION = '_applyShimCurrentVersion';\n\n/** @const {string} */\nconst NEXT_VERSION = '_applyShimNextVersion';\n\n/** @const {string} */\nconst VALIDATING_VERSION = '_applyShimValidatingVersion';\n\n/**\n * @const {Promise<void>}\n */\nconst promise = Promise.resolve();\n\n/**\n * @param {string} elementName\n */\nexport function invalidate(elementName){\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\n/**\n * This function can be called multiple times to mark a template invalid\n * and signal that the style inside must be regenerated.\n *\n * Use `startValidatingTemplate` to begin an asynchronous validation cycle.\n * During that cycle, call `templateIsValidating` to see if the template must\n * be revalidated\n * @param {HTMLTemplateElement} template\n */\nexport function invalidateTemplate(template) {\n  // default the current version to 0\n  template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;\n  // ensure the \"validating for\" flag exists\n  template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;\n  // increment the next version\n  template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValid(template) {\n  return template[CURRENT_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\n/**\n * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.\n * If false, the template must be validated.\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValidating(template) {\n  return !templateIsValid(template) && template[VALIDATING_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * the template is marked as `validating` for one microtask so that all instances\n * found in the tree crawl of `applyStyle` will update themselves,\n * but the template will only be updated once.\n * @param {string} elementName\n*/\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\n/**\n * Begin an asynchronous invalidation cycle.\n * This should be called after every validation of a template\n *\n * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`\n * @param {HTMLTemplateElement} template\n */\nexport function startValidatingTemplate(template) {\n  // remember that the current \"next version\" is the reason for this validation cycle\n  template[VALIDATING_VERSION] = template[NEXT_VERSION];\n  // however, there only needs to be one async task to clear the counters\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function() {\n      // sync the current version to let future invalidations cause a refresh cycle\n      template[CURRENT_VERSION] = template[NEXT_VERSION];\n      template._validating = false;\n    });\n  }\n}\n\n/**\n * @return {boolean}\n */\nexport function elementsAreInvalid() {\n  for (let elementName in templateMap) {\n    let template = templateMap[elementName];\n    if (!templateIsValid(template)) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {Promise<void>} */\nlet readyPromise = null;\n\n/** @type {?function(?function())} */\nlet whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;\n\n/** @type {function()} */\nlet resolveFn;\n\n/**\n * @param {?function()} callback\n */\nexport default function documentWait(callback) {\n  requestAnimationFrame(function() {\n    if (whenReady) {\n      whenReady(callback)\n    } else {\n      if (!readyPromise) {\n        readyPromise = new Promise((resolve) => {resolveFn = resolve});\n        if (document.readyState === 'complete') {\n          resolveFn();\n        } else {\n          document.addEventListener('readystatechange', () => {\n            if (document.readyState === 'complete') {\n              resolveFn();\n            }\n          });\n        }\n      }\n      readyPromise.then(function(){ callback && callback(); });\n    }\n  });\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport documentWait from './document-wait.js';\n\n/**\n * @typedef {HTMLStyleElement | {getStyle: function():HTMLStyleElement}}\n */\nexport let CustomStyleProvider;\n\nconst SEEN_MARKER = '__seenByShadyCSS';\nconst CACHED_STYLE = '__shadyCSSCachedStyle';\n\n/** @type {?function(!HTMLStyleElement)} */\nlet transformFn = null;\n\n/** @type {?function()} */\nlet validateFn = null;\n\n/**\nThis interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`\n\n@unrestricted\n*/\nexport default class CustomStyleInterface {\n  constructor() {\n    /** @type {!Array<!CustomStyleProvider>} */\n    this['customStyles'] = [];\n    this['enqueued'] = false;\n    // NOTE(dfreedm): use quotes here to prevent closure inlining to `function(){}`;\n    documentWait(() => {\n      if (window['ShadyCSS']['flushCustomStyles']) {\n        window['ShadyCSS']['flushCustomStyles']();\n      }\n    })\n  }\n  /**\n   * Queue a validation for new custom styles to batch style recalculations\n   */\n  enqueueDocumentValidation() {\n    if (this['enqueued'] || !validateFn) {\n      return;\n    }\n    this['enqueued'] = true;\n    documentWait(validateFn);\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  addCustomStyle(style) {\n    if (!style[SEEN_MARKER]) {\n      style[SEEN_MARKER] = true;\n      this['customStyles'].push(style);\n      this.enqueueDocumentValidation();\n    }\n  }\n  /**\n   * @param {!CustomStyleProvider} customStyle\n   * @return {HTMLStyleElement}\n   */\n  getStyleForCustomStyle(customStyle) {\n    if (customStyle[CACHED_STYLE]) {\n      return customStyle[CACHED_STYLE];\n    }\n    let style;\n    if (customStyle['getStyle']) {\n      style = customStyle['getStyle']();\n    } else {\n      style = customStyle;\n    }\n    return style;\n  }\n  /**\n   * @return {!Array<!CustomStyleProvider>}\n   */\n  processStyles() {\n    const cs = this['customStyles'];\n    for (let i = 0; i < cs.length; i++) {\n      const customStyle = cs[i];\n      if (customStyle[CACHED_STYLE]) {\n        continue;\n      }\n      const style = this.getStyleForCustomStyle(customStyle);\n      if (style) {\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        const styleToTransform = /** @type {!HTMLStyleElement} */(style['__appliedElement'] || style);\n        if (transformFn) {\n          transformFn(styleToTransform);\n        }\n        customStyle[CACHED_STYLE] = styleToTransform;\n      }\n    }\n    return cs;\n  }\n}\n\n/* eslint-disable no-self-assign */\nCustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;\nCustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;\nCustomStyleInterface.prototype['processStyles'] = CustomStyleInterface.prototype.processStyles;\n/* eslint-enable no-self-assign */\n\nObject.defineProperties(CustomStyleInterface.prototype, {\n  'transformCallback': {\n    /** @return {?function(!HTMLStyleElement)} */\n    get() {\n      return transformFn;\n    },\n    /** @param {?function(!HTMLStyleElement)} fn */\n    set(fn) {\n      transformFn = fn;\n    }\n  },\n  'validateCallback': {\n    /** @return {?function()} */\n    get() {\n      return validateFn;\n    },\n    /**\n     * @param {?function()} fn\n     * @this {CustomStyleInterface}\n     */\n    set(fn) {\n      let needsEnqueue = false;\n      if (!validateFn) {\n        needsEnqueue = true;\n      }\n      validateFn = fn;\n      if (needsEnqueue) {\n        this.enqueueDocumentValidation();\n      }\n    },\n  }\n})\n\n/** @typedef {{\n * customStyles: !Array<!CustomStyleProvider>,\n * addCustomStyle: function(!CustomStyleProvider),\n * getStyleForCustomStyle: function(!CustomStyleProvider): HTMLStyleElement,\n * findStyles: function(),\n * transformCallback: ?function(!HTMLStyleElement),\n * validateCallback: ?function()\n * }}\n */\nexport const CustomStyleInterfaceInterface = {};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport CustomStyleInterface from '../src/custom-style-interface.js';\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js';\nimport {nativeCssVariables, nativeShadow, cssBuild, disableRuntime} from '../src/style-settings.js';\n\nconst customStyleInterface = new CustomStyleInterface();\n\nif (!window.ShadyCSS) {\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplate(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n    prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplateStyles(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {Element} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      customStyleInterface.processStyles();\n      updateNativeProperties(element, properties);\n    },\n\n    /**\n     * @param {Element} element\n     */\n    styleElement(element) { // eslint-disable-line no-unused-vars\n      customStyleInterface.processStyles();\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      customStyleInterface.processStyles();\n      updateNativeProperties(document.body, properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n\n    flushCustomStyles() {},\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    cssBuild: cssBuild,\n    disableRuntime: disableRuntime,\n  }\n}\n\nwindow.ShadyCSS.CustomStyleInterface = customStyleInterface;","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport * as StyleUtil from './style-util.js';\nimport {nativeShadow} from './style-settings.js';\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  /**\n   * Given a node and scope name, add a scoping class to each node\n   * in the tree. This facilitates transforming css into scoped rules.\n   * @param {!Node} node\n   * @param {string} scope\n   * @param {boolean=} shouldRemoveScope\n   * @deprecated\n   */\n  dom(node, scope, shouldRemoveScope) {\n    const fn = (node) => {\n      this.element(node, scope || '', shouldRemoveScope);\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * Given a node and scope name, add a scoping class to each node in the tree.\n   * @param {!Node} node\n   * @param {string} scope\n   */\n  domAddScope(node, scope) {\n    const fn = (node) => {\n      this.element(node, scope || '');\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * @param {!Node} startNode\n   * @param {!function(!Node)} transformer\n   */\n  _transformDom(startNode, transformer) {\n    if (startNode.nodeType === Node.ELEMENT_NODE) {\n      transformer(startNode)\n    }\n    let c$;\n    if (startNode.localName === 'template') {\n      const template = /** @type {!HTMLTemplateElement} */ (startNode);\n      // In case the template is in svg context, fall back to the node\n      // since it won't be an HTMLTemplateElement with a .content property\n      c$ = (template.content || template._content || template).childNodes;\n    } else {\n      c$ = /** @type {!ParentNode} */ (startNode).children ||\n          startNode.childNodes;\n    }\n    if (c$) {\n      for (let i = 0; i < c$.length; i++) {\n        this._transformDom(c$[i], transformer);\n      }\n    }\n  }\n\n  /**\n   * @param {?} element\n   * @param {?} scope\n   * @param {?=} shouldRemoveScope\n   */\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            StyleUtil.setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          StyleUtil.setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  /**\n   * Given a node, replace the scoping class to each subnode in the tree.\n   * @param {!Node} node\n   * @param {string} oldScope\n   * @param {string} newScope\n   */\n  domReplaceScope(node, oldScope, newScope) {\n    const fn = (node) => {\n      this.element(node, oldScope, true);\n      this.element(node, newScope);\n    };\n    this._transformDom(node, fn);\n  }\n  /**\n   * Given a node, remove the scoping class to each subnode in the tree.\n   * @param {!Node} node\n   * @param {string} oldScope\n   */\n  domRemoveScope(node, oldScope) {\n    const fn = (node) => {\n      this.element(node, oldScope || '', true);\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * @param {?} element\n   * @param {?} styleRules\n   * @param {?=} callback\n   * @param {string=} cssBuild\n   * @param {string=} cssText\n   * @return {string}\n   */\n  elementStyles(element, styleRules, callback, cssBuild = '', cssText = '') {\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    if (cssText === '') {\n      if (nativeShadow || cssBuild === 'shady') {\n        cssText = StyleUtil.toCssText(styleRules, callback);\n      } else {\n        let {is, typeExtension} = StyleUtil.getIsExtends(element);\n        cssText = this.css(styleRules, is, typeExtension, callback) + '\\n\\n';\n      }\n    }\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return StyleUtil.toCssText(rules, function(/** StyleNode */rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? `[is=${scope}]` : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  /**\n   * transforms a css rule to a scoped rule.\n   *\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule['selector'] = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = StyleUtil.splitSelectorList(rule['selector']);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!StyleUtil.isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.filter((part) => Boolean(part)).join(COMPLEX_SELECTOR_SEP);\n  }\n\n  /**\n   * @param {string} selector\n   * @return {string}\n   */\n  _twiddleNthPlus(selector) {\n    return selector.replace(NTH, (m, type, inside) => {\n      if (inside.indexOf('+') > -1) {\n        inside = inside.replace(/\\+/g, '___');\n      } else if (inside.indexOf('___') > -1) {\n        inside = inside.replace(/___/g, '+');\n      }\n      return `:${type}(${inside})`;\n    });\n  }\n\n  /**\n   * Preserve `:matches()` selectors by replacing them with MATCHES_REPLACMENT\n   * and returning an array of `:matches()` selectors.\n   * Use `_replacesMatchesPseudo` to replace the `:matches()` parts\n   *\n   * @param {string} selector\n   * @return {{selector: string, matches: !Array<string>}}\n   */\n  _preserveMatchesPseudo(selector) {\n    /** @type {!Array<string>} */\n    const matches = [];\n    let match;\n    while ((match = selector.match(MATCHES))) {\n      const start = match.index;\n      const end = StyleUtil.findMatchingParen(selector, start);\n      if (end === -1) {\n        throw new Error(`${match.input} selector missing ')'`)\n      }\n      const part = selector.slice(start, end + 1);\n      selector = selector.replace(part, MATCHES_REPLACEMENT);\n      matches.push(part);\n    }\n    return {selector, matches};\n  }\n\n  /**\n   * Replace MATCHES_REPLACMENT character with the given set of `:matches()`\n   * selectors.\n   *\n   * @param {string} selector\n   * @param {!Array<string>} matches\n   * @return {string}\n   */\n  _replaceMatchesPseudo(selector, matches) {\n    const parts = selector.split(MATCHES_REPLACEMENT);\n    return matches.reduce((acc, cur, idx) => acc + cur + parts[idx + 1], parts[0]);\n  }\n\n/**\n * @param {string} selector\n * @param {string} scope\n * @param {string=} hostScope\n */\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    let isNth = NTH.test(selector);\n    if (isNth) {\n      selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`)\n      selector = this._twiddleNthPlus(selector);\n    }\n    // Preserve selectors like `:-webkit-any` so that SIMPLE_SELECTOR_SEP does\n    // not get confused by spaces inside the pseudo selector\n    const isMatches = MATCHES.test(selector);\n    /** @type {!Array<string>} */\n    let matches;\n    if (isMatches) {\n      ({selector, matches} = this._preserveMatchesPseudo(selector));\n    }\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    // replace `:matches()` selectors\n    if (isMatches) {\n      selector = this._replaceMatchesPseudo(selector, matches);\n    }\n    if (isNth) {\n      selector = this._twiddleNthPlus(selector);\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir, after) =>\n      `[dir=\"${dir}\"] ${before}${after}, ${before}[dir=\"${dir}\"]${after}`);\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    const attributes = selector.split(/(\\[.+?\\])/);\n\n    const output = [];\n    for (let i = 0; i < attributes.length; i++) {\n      // Do not attempt to transform any attribute selector content\n      if ((i % 2) === 1) {\n        output.push(attributes[i]);\n      } else {\n        const part = attributes[i];\n\n        if (!(part === '' && i === attributes.length - 1)) {\n          let p$ = part.split(PSEUDO_PREFIX);\n          p$[0] += scope;\n          output.push(p$.join(PSEUDO_PREFIX));\n        }\n      }\n    }\n\n    return output.join('');\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule['selector'] = rule['parsedSelector'];\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  normalizeRootSelector(rule) {\n    if (rule['selector'] === ROOT) {\n      rule['selector'] = 'html';\n    }\n  }\n\n/**\n * @param {string} selector\n */\n  _transformDocumentSelector(selector) {\n    if (selector.match(HOST)) {\n      // remove ':host' type selectors in document rules\n      return '';\n    } else if (selector.match(SLOTTED)) {\n      return this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR)\n    } else {\n      return this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n    }\n  }\n}\n\nconst NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nconst SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nconst COMPLEX_SELECTOR_SEP = ',';\nconst SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=[])+)/g;\nconst SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nconst HOST = ':host';\nconst ROOT = ':root';\nconst SLOTTED = '::slotted';\nconst SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nconst HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nconst SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nconst DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)(.*)/;\nconst CSS_CLASS_PREFIX = '.';\nconst PSEUDO_PREFIX = ':';\nconst CLASS = 'class';\nconst SELECTOR_NO_MATCH = 'should_not_match';\nconst MATCHES = /:(?:matches|any|-(?:webkit|moz)-any)/;\nconst MATCHES_REPLACEMENT = '\\u{e000}';\n\nexport default new StyleTransformer()\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\n/** @const {string} */\nconst infoKey = '__styleInfo';\n\nexport default class StyleInfo {\n  /**\n   * @param {Element} node\n   * @return {StyleInfo}\n   */\n  static get(node) {\n    if (node) {\n      return node[infoKey];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * @param {!Element} node\n   * @param {StyleInfo} styleInfo\n   * @return {StyleInfo}\n   */\n  static set(node, styleInfo) {\n    node[infoKey] = styleInfo;\n    return styleInfo;\n  }\n  /**\n   * @param {StyleNode} ast\n   * @param {Node=} placeholder\n   * @param {Array<string>=} ownStylePropertyNames\n   * @param {string=} elementName\n   * @param {string=} typeExtension\n   * @param {string=} cssBuild\n   */\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    /** @type {StyleNode} */\n    this.styleRules = ast || null;\n    /** @type {Node} */\n    this.placeholder = placeholder || null;\n    /** @type {!Array<string>} */\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    /** @type {Object} */\n    this.overrideStyleProperties = null;\n    /** @type {string} */\n    this.elementName = elementName || '';\n    /** @type {string} */\n    this.cssBuild = cssBuild || '';\n    /** @type {string} */\n    this.typeExtension = typeExtension || '';\n    /** @type {Object<string, string>} */\n    this.styleProperties = null;\n    /** @type {?string} */\n    this.scopeSelector = null;\n    /** @type {HTMLStyleElement} */\n    this.customStyle = null;\n  }\n  _getStyleRules() {\n    return this.styleRules;\n  }\n}\n\n/* eslint-disable-next-line no-self-assign */\nStyleInfo.prototype['_getStyleRules'] = StyleInfo.prototype._getStyleRules;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {removeCustomPropAssignment, StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport {nativeShadow} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport * as StyleUtil from './style-util.js';\nimport * as RX from './common-regex.js';\nimport StyleInfo from './style-info.js';\n\n// TODO: dedupe with shady\n/**\n * @param {string} selector\n * @return {boolean}\n * @this {Element}\n */\nconst matchesSelector = function(selector) {\n  const method = this.matches || this.matchesSelector ||\n    this.mozMatchesSelector || this.msMatchesSelector ||\n    this.oMatchesSelector || this.webkitMatchesSelector;\n  return method && method.call(this, selector);\n};\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n/**\n * decorates styles with rule info and returns an array of used style property names\n *\n * @param {StyleNode} rules\n * @return {Array<string>}\n */\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    StyleUtil.forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule['rules'] = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx = RX.VAR_ASSIGN;\n      let cssText = rule['parsedCssText'];\n      let value;\n      let any;\n      while ((m = rx.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule['parsedCssText']);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(RX.BRACKETED, '')\n      .replace(RX.VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = RX.VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = StyleUtil.processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        RX.MIXIN_MATCH.lastIndex = 0;\n        m = RX.MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule['cssText'] = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule['cssText'];\n    let output = rule['cssText'];\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = RX.ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule['cssText'] = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  /**\n   * @param {StyleNode} rules\n   * @param {Element} element\n   */\n  propertyDataFromStyles(rules, element) {\n    let props = {};\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, (rule) => {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        this.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule['parsedSelector'];\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          this.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  /**\n   * @param {Element} scope\n   * @param {StyleNode} rule\n   * @param {string} cssBuild\n   * @param {function(Object)} callback\n   */\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let {is, typeExtension} = StyleUtil.getIsExtends(scope);\n    let hostScope = is ?\n      StyleTransformer._calcHostScope(is, typeExtension) :\n      'html';\n    let parsedSelector = rule['parsedSelector'];\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host because `:host` does not work with `matches`\n      if (!rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer._transformRuleCss(\n          rule,\n          StyleTransformer._transformComplexSelector,\n          StyleTransformer._calcElementScope(is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n/**\n * @param {Element} scope\n * @param {StyleNode} rules\n * @param {string} cssBuild\n * @return {Object}\n */\n  hostAndRootPropertiesForScope(scope, rules, cssBuild) {\n    let hostProps = {}, rootProps = {};\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, (rule) => {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      this.whenHostOrRootRule(scope, rule, cssBuild, (info) => {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            this.collectProperties(rule, hostProps);\n          } else {\n            this.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  /**\n   * @param {Element} element\n   * @param {Object} properties\n   * @param {string} scopeSelector\n   */\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let {is, typeExtension} = StyleUtil.getIsExtends(element);\n    let hostSelector = StyleTransformer\n      ._calcHostScope(is, typeExtension);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(RX.HOST_PREFIX + rxHostSelector +\n      RX.HOST_SUFFIX);\n    let {styleRules: rules, cssBuild} = StyleInfo.get(element);\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !StyleUtil.isKeyframesSelector(rule) &&\n          rule['cssText']) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    }, cssBuild);\n  }\n\n  /**\n   * @param {Element} element\n   * @param {StyleNode} rules\n   * @param {string} scopeSelector\n   * @return {Object}\n   */\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule['keyframesName']] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  /**\n   * @param {StyleNode} keyframesRule\n   * @return {function(string):string}\n   */\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n/**\n * Transforms `@keyframes` names to be unique for the current host.\n * Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n *\n * @param {StyleNode} rule\n * @param {string} scopeId\n */\n  _scopeKeyframes(rule, scopeId) {\n    // Animation names are of the form [\\w-], so ensure that the name regex does not partially apply\n    // to similarly named keyframe names by checking for a word boundary at the beginning and\n    // a non-word boundary or `-` at the end.\n    rule.keyframesNameRx = new RegExp(`\\\\b${rule['keyframesName']}(?!\\\\B|-)`, 'g');\n    rule.transformedKeyframesName = rule['keyframesName'] + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    rule['selector'] = rule.transformedSelector.replace(\n        rule['keyframesName'], rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  /**\n   * @param {StyleNode} rule\n   * @param {RegExp} hostRx\n   * @param {string} hostSelector\n   * @param {string} scopeId\n   */\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = StyleUtil.splitSelectorList(selector);\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule['selector'] = parts.join(',');\n  }\n\n  /**\n   * @param {Element} element\n   * @param {string} selector\n   * @param {string} old\n   */\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      StyleUtil.setElementClassRaw(element, v);\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element\n   * @param {Object} properties\n   * @param {string} selector\n   * @param {HTMLStyleElement} style\n   * @return {HTMLStyleElement}\n   */\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s['_useCount']--;\n      if (s['_useCount'] <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = StyleUtil.applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = StyleUtil.applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        if (IS_IE && cssText.indexOf('@media') > -1) {\n            // @media rules may be stale in IE 10 and 11\n            // refresh the text content of the style to revalidate them.\n          style.textContent = cssText;\n        }\n        StyleUtil.applyStyle(style, null, styleInfo.placeholder);\n      }\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style['_useCount'] = style['_useCount'] || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style['_useCount']++;\n      }\n      styleInfo.customStyle = style;\n    }\n    return style;\n  }\n\n  /**\n   * @param {Element} style\n   * @param {Object} properties\n   */\n  applyCustomStyle(style, properties) {\n    let rules = StyleUtil.rulesForStyle(/** @type {HTMLStyleElement} */(style));\n    let self = this;\n    style.textContent = StyleUtil.toCssText(rules, function(/** StyleNode */rule) {\n      let css = rule['cssText'] = rule['parsedCssText'];\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(/** @type {string} */(css));\n        // replace with reified properties, scenario is same as mixin\n        rule['cssText'] = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\n/**\n * @param {number} n\n * @param {Array<number>} bits\n */\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32, 10);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nexport default new StyleProperties();","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {applyStylePlaceHolder} from './style-util.js';\nimport {nativeShadow, disableRuntime} from './style-settings.js';\n\n/** @type {!Object<string, !Node>} */\nconst placeholderMap = {};\n\n/**\n * @param {string} elementName\n * @return {Node}\n */\nexport function getStylePlaceholder(elementName) {\n  return placeholderMap[elementName] || null;\n}\n\n/**\n * @param {string} elementName\n */\nexport function ensureStylePlaceholder(elementName) {\n  if (!placeholderMap[elementName]) {\n    placeholderMap[elementName] = applyStylePlaceHolder(elementName);\n  }\n}\n\n/**\n * @const {CustomElementRegistry}\n */\nconst ce = window['customElements'];\nif (ce && !nativeShadow && !disableRuntime) {\n  /**\n   * @const {function(this:CustomElementRegistry, string,function(new:HTMLElement),{extends: string}=)}\n   */\n  const origDefine = ce['define'];\n  /**\n   * @param {string} name\n   * @param {function(new:HTMLElement)} clazz\n   * @param {{extends: string}=} options\n   */\n  const wrappedDefine = (name, clazz, options) => {\n    ensureStylePlaceholder(name);\n    origDefine.call(/** @type {!CustomElementRegistry} */(ce), name, clazz, options);\n  };\n  ce['define'] = wrappedDefine;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport {getIsExtends, elementHasBuiltCss, wrap} from './style-util.js';\n\nexport let flush = function() {};\n\n/**\n * @param {!Element} element\n * @return {string}\n */\nfunction getClasses(element) {\n  if (element.classList && element.classList.value) {\n    return element.classList.value;\n  } else {\n    // NOTE: className is patched to remove scoping classes in ShadyDOM\n    // use getAttribute('class') instead, which is unpatched\n    return element.getAttribute('class') || '';\n  }\n}\n\nconst scopeRegExp = new RegExp(`${StyleTransformer.SCOPE_NAME}\\\\s*([^\\\\s]*)`);\n\n/**\n * @param {!Element} element\n * @return {string}\n */\nexport function getCurrentScope(element) {\n  const match = getClasses(element).match(scopeRegExp);\n  if (match) {\n    return match[1];\n  } else {\n    return '';\n  }\n}\n\n/**\n * @param {!Node} node\n */\nexport function getOwnerScope(node) {\n  const ownerRoot = wrap(node).getRootNode();\n  if (ownerRoot === node || ownerRoot === node.ownerDocument) {\n    return '';\n  }\n  const host = /** @type {!ShadowRoot} */(ownerRoot).host;\n  if (!host) {\n    // this may actually be a document fragment\n    return '';\n  }\n  return getIsExtends(host).is;\n}\n\n/**\n * @param {!Element} element\n */\nexport function ensureCorrectScope(element) {\n  const currentScope = getCurrentScope(element);\n  const ownerRoot = wrap(element).getRootNode();\n  if (ownerRoot === element) {\n    return;\n  }\n  if (currentScope && ownerRoot === element.ownerDocument) {\n    // node was scoped, but now is in document\n    StyleTransformer.domRemoveScope(element, currentScope);\n  } else if (ownerRoot instanceof ShadowRoot) {\n    const ownerScope = getOwnerScope(element);\n    if (ownerScope !== currentScope) {\n      // node was scoped, but not by its current owner\n      StyleTransformer.domReplaceScope(element, currentScope, ownerScope);\n    }\n  }\n}\n\n/**\n * @param {!HTMLElement|!HTMLDocument} element\n */\nexport function ensureCorrectSubtreeScoping(element) {\n  // find unscoped subtree nodes\n  const unscopedNodes = window['ShadyDOM']['nativeMethods']['querySelectorAll'].call(\n    element, `:not(.${StyleTransformer.SCOPE_NAME})`);\n\n  for (let j = 0; j < unscopedNodes.length; j++) {\n    // it's possible, during large batch inserts, that nodes that aren't\n    // scoped within the current scope were added.\n    // To make sure that any unscoped nodes that were inserted in the current batch are correctly styled,\n    // query all unscoped nodes and force their style-scope to be applied.\n    // This could happen if a sub-element appended an unscoped node in its shadowroot and this function\n    // runs on a parent element of the host of that unscoped node:\n    // parent-element -> element -> unscoped node\n    // Here unscoped node should have the style-scope element, not parent-element.\n    const unscopedNode = unscopedNodes[j];\n    const scopeForPreviouslyUnscopedNode = getOwnerScope(unscopedNode);\n    if (scopeForPreviouslyUnscopedNode) {\n      StyleTransformer.element(unscopedNode, scopeForPreviouslyUnscopedNode);\n    }\n  }\n}\n\n/**\n * @param {HTMLElement} el\n * @return {boolean}\n */\nfunction isElementWithBuiltCss(el) {\n  if (el.localName === 'style' || el.localName === 'template') {\n    return elementHasBuiltCss(el);\n  }\n  return false;\n}\n\n/**\n * @param {Array<MutationRecord|null>|null} mxns\n */\nfunction handler(mxns) {\n  for (let x=0; x < mxns.length; x++) {\n    let mxn = mxns[x];\n    if (mxn.target === document.documentElement ||\n      mxn.target === document.head) {\n      continue;\n    }\n    for (let i=0; i < mxn.addedNodes.length; i++) {\n      let n = mxn.addedNodes[i];\n      if (n.nodeType !== Node.ELEMENT_NODE) {\n        continue;\n      }\n      n = /** @type {HTMLElement} */(n); // eslint-disable-line no-self-assign\n      let root = n.getRootNode();\n      let currentScope = getCurrentScope(n);\n      // node was scoped, but now is in document\n      // If this element has built css, we must not remove scoping as this node\n      // will be used as a template or style without re - applying scoping as an optimization\n      if (currentScope && root === n.ownerDocument && !isElementWithBuiltCss(n)) {\n        StyleTransformer.domRemoveScope(n, currentScope);\n      } else if (root instanceof ShadowRoot) {\n        const newScope = getOwnerScope(n);\n        // rescope current node and subtree if necessary\n        if (newScope !== currentScope) {\n          StyleTransformer.domReplaceScope(n, currentScope, newScope);\n        }\n        // make sure all the subtree elements are scoped correctly\n        ensureCorrectSubtreeScoping(n);\n      }\n    }\n  }\n}\n\n// if native Shadow DOM is being used, or ShadyDOM handles dynamic scoiping, do not activate the MutationObserver\nif (!nativeShadow && !(window['ShadyDOM'] && window['ShadyDOM']['handlesDynamicScoping'])) {\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  }\n  let nativeCustomElements = (window['customElements'] &&\n    !window['customElements']['polyfillWrapFlushCallback']);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    }\n    // use polyfill timing if it's available\n    if (window['HTMLImports']) {\n      window['HTMLImports']['whenReady'](delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          }\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  }\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {parse, StyleNode} from './css-parse.js';\nimport {nativeShadow, nativeCssVariables, disableRuntime} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport * as StyleUtil from './style-util.js';\nimport StyleProperties from './style-properties.js';\nimport {ensureStylePlaceholder, getStylePlaceholder} from './style-placeholder.js';\nimport StyleInfo from './style-info.js';\nimport StyleCache from './style-cache.js';\nimport {flush as watcherFlush, getOwnerScope, getCurrentScope} from './document-watcher.js';\nimport templateMap from './template-map.js';\nimport * as ApplyShimUtils from './apply-shim-utils.js';\nimport {updateNativeProperties, detectMixin} from './common-utils.js';\nimport {CustomStyleInterfaceInterface} from './custom-style-interface.js'; // eslint-disable-line no-unused-vars\n\n/** @type {!Object<string, string>} */\nconst adoptedCssTextMap = {};\n\n/**\n * @const {StyleCache}\n */\nconst styleCache = new StyleCache();\n\nexport default class ScopingShim {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = /** @type {!HTMLElement} */(document.documentElement);\n    let ast = new StyleNode();\n    ast['rules'] = [];\n    this._documentOwnerStyleInfo = StyleInfo.set(this._documentOwner, new StyleInfo(ast));\n    this._elementsHaveApplied = false;\n    /** @type {?Object} */\n    this._applyShim = null;\n    /** @type {?CustomStyleInterfaceInterface} */\n    this._customStyleInterface = null;\n  }\n  flush() {\n    watcherFlush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return StyleUtil.rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return StyleUtil.toCssText(ast);\n  }\n  _gatherStyles(template) {\n    return StyleUtil.gatherStyleText(template.content);\n  }\n  /**\n   * Prepare the styling and template for the given element type\n   *\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} typeExtension\n   */\n  prepareTemplate(template, elementName, typeExtension) {\n    this.prepareTemplateDom(template, elementName);\n    this.prepareTemplateStyles(template, elementName, typeExtension);\n  }\n  /**\n   * Prepare styling for the given element type\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} typeExtension\n   */\n  prepareTemplateStyles(template, elementName, typeExtension) {\n    if (template._prepared || disableRuntime) {\n      return;\n    }\n    // style placeholders are only used when ShadyDOM is active\n    if (!nativeShadow) {\n      ensureStylePlaceholder(elementName);\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = StyleUtil.getCssBuild(template);\n    const optimalBuild = StyleUtil.isOptimalCssBuild(cssBuild);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n    };\n    let cssText = this._gatherStyles(template) + (adoptedCssTextMap[elementName] || '');\n    // check if the styling has mixin definitions or uses\n    this._ensure();\n    if (!optimalBuild) {\n      let hasMixins = !cssBuild && detectMixin(cssText);\n      let ast = parse(cssText);\n      // only run the applyshim transforms if there is a mixin involved\n      if (hasMixins && nativeCssVariables && this._applyShim) {\n        this._applyShim['transformRules'](ast, elementName);\n      }\n      template['_styleAst'] = ast;\n    }\n    let ownPropertyNames = [];\n    if (!nativeCssVariables) {\n      ownPropertyNames = StyleProperties.decorateStyles(template['_styleAst']);\n    }\n    if (!ownPropertyNames.length || nativeCssVariables) {\n      let root = nativeShadow ? template.content : null;\n      let placeholder = getStylePlaceholder(elementName);\n      let style = this._generateStaticStyle(info, template['_styleAst'], root, placeholder, cssBuild, optimalBuild ? cssText : '');\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n\n  /**\n   * @param {!Array<string>} cssTextArray\n   * @param {string} elementName\n   */\n  prepareAdoptedCssText(cssTextArray, elementName) {\n    adoptedCssTextMap[elementName] = cssTextArray.join(' ');\n  }\n  /**\n   * Prepare template for the given element type\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplateDom(template, elementName) {\n    if (disableRuntime) {\n      return;\n    }\n    const cssBuild = StyleUtil.getCssBuild(template);\n    if (!nativeShadow && cssBuild !== 'shady' && !template._domPrepared) {\n      template._domPrepared = true;\n      StyleTransformer.domAddScope(template.content, elementName);\n    }\n  }\n  /**\n   * @param {!{is: string, extends: (string|undefined)}} info\n   * @param {!StyleNode} rules\n   * @param {DocumentFragment} shadowroot\n   * @param {Node} placeholder\n   * @param {string} cssBuild\n   * @param {string=} cssText\n   * @return {?HTMLStyleElement}\n   */\n  _generateStaticStyle(info, rules, shadowroot, placeholder, cssBuild, cssText) {\n    cssText = StyleTransformer.elementStyles(info, rules, null, cssBuild, cssText);\n    if (cssText.length) {\n      return StyleUtil.applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n    return null;\n  }\n  _prepareHost(host) {\n    const {is, typeExtension} = StyleUtil.getIsExtends(host);\n    const placeholder = getStylePlaceholder(is);\n    const template = templateMap[is];\n    if (!template) {\n      return;\n    }\n    const ast = template['_styleAst'];\n    const ownStylePropertyNames = template._ownPropertyNames;\n    const cssBuild = StyleUtil.getCssBuild(template);\n    const styleInfo = new StyleInfo(\n      ast,\n      placeholder,\n      ownStylePropertyNames,\n      is,\n      typeExtension,\n      cssBuild\n    );\n    StyleInfo.set(host, styleInfo);\n    return styleInfo;\n  }\n  _ensureApplyShim() {\n    if (this._applyShim) {\n      return;\n    } else if (window.ShadyCSS && window.ShadyCSS.ApplyShim) {\n      this._applyShim = /** @type {!Object} */ (window.ShadyCSS.ApplyShim);\n      this._applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n    }\n  }\n  _ensureCustomStyleInterface() {\n    if (this._customStyleInterface) {\n      return;\n    } else if (window.ShadyCSS && window.ShadyCSS.CustomStyleInterface) {\n      this._customStyleInterface = /** @type {!CustomStyleInterfaceInterface} */(window.ShadyCSS.CustomStyleInterface);\n      /** @type {function(!HTMLStyleElement)} */\n      this._customStyleInterface['transformCallback'] = (style) => {this.transformCustomStyleForDocument(style)};\n      this._customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this._customStyleInterface['enqueued'] || this._elementsHaveApplied) {\n            this.flushCustomStyles();\n          }\n        })\n      };\n    }\n  }\n  _ensure() {\n    this._ensureApplyShim();\n    this._ensureCustomStyleInterface();\n  }\n  /**\n   * Flush and apply custom styles to document\n   */\n  flushCustomStyles() {\n    if (disableRuntime) {\n      return;\n    }\n    this._ensure();\n    if (!this._customStyleInterface) {\n      return;\n    }\n    let customStyles = this._customStyleInterface['processStyles']();\n    // early return if custom-styles don't need validation\n    if (!this._customStyleInterface['enqueued']) {\n      return;\n    }\n    // bail if custom styles are built optimally\n    if (StyleUtil.isOptimalCssBuild(this._documentOwnerStyleInfo.cssBuild)) {\n      return;\n    }\n    if (!nativeCssVariables) {\n      this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n      this._applyCustomStyles(customStyles);\n      if (this._elementsHaveApplied) {\n        // if custom elements have upgraded and there are no native css variables, we must recalculate the whole tree\n        this.styleDocument();\n      }\n    } else if (!this._documentOwnerStyleInfo.cssBuild) {\n      this._revalidateCustomStyleApplyShim(customStyles);\n    }\n    this._customStyleInterface['enqueued'] = false;\n  }\n  /**\n   * Apply styles for the given element\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} overrideProps\n   */\n  styleElement(host, overrideProps) {\n    if (disableRuntime) {\n      if (overrideProps) {\n        if (!StyleInfo.get(host)) {\n          StyleInfo.set(host, new StyleInfo(null));\n        }\n        const styleInfo = /** @type {!StyleInfo} */(StyleInfo.get(host));\n        this._mixOverrideStyleProps(styleInfo, overrideProps);\n        this.styleElementNativeVariables(host, styleInfo);\n      }\n      return;\n    }\n    const styleInfo = StyleInfo.get(host) || this._prepareHost(host);\n    // if there is no style info at this point, bail\n    if (!styleInfo) {\n      return;\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (overrideProps) {\n      this._mixOverrideStyleProps(styleInfo, overrideProps);\n    }\n    if (!nativeCssVariables) {\n      this.styleElementShimVariables(host, styleInfo);\n    } else {\n      this.styleElementNativeVariables(host, styleInfo);\n    }\n  }\n  /**\n   * @param {!StyleInfo} styleInfo\n   * @param {Object} overrideProps\n   */\n  _mixOverrideStyleProps(styleInfo, overrideProps) {\n    styleInfo.overrideStyleProperties =\n      styleInfo.overrideStyleProperties || {};\n    Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n  }\n  /**\n   * @param {!HTMLElement} host\n   * @param {!StyleInfo} styleInfo\n   */\n  styleElementShimVariables(host, styleInfo) {\n    this.flush();\n    this._updateProperties(host, styleInfo);\n    if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n      this._applyStyleProperties(host, styleInfo);\n    }\n  }\n  /**\n   * @param {!HTMLElement} host\n   * @param {!StyleInfo} styleInfo\n   */\n  styleElementNativeVariables(host, styleInfo) {\n    const { is } = StyleUtil.getIsExtends(host);\n    if (styleInfo.overrideStyleProperties) {\n      updateNativeProperties(host, styleInfo.overrideStyleProperties);\n    }\n    const template = templateMap[is];\n    // bail early if there is no shadowroot for this element\n    if (!template && !this._isRootOwner(host)) {\n      return;\n    }\n    // bail early if the template was built with polymer-css-build\n    if (template && StyleUtil.elementHasBuiltCss(template)) {\n      return;\n    }\n    if (template && template._style && !ApplyShimUtils.templateIsValid(template)) {\n      // update template\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this._ensure();\n        this._applyShim && this._applyShim['transformRules'](template['_styleAst'], is);\n        template._style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update instance if native shadowdom\n      if (nativeShadow) {\n        let root = host.shadowRoot;\n        if (root) {\n          let style = root.querySelector('style');\n          if (style) {\n            style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n      }\n      styleInfo.styleRules = template['_styleAst'];\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = StyleUtil.wrap(node).getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host) || this._prepareHost(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = StyleUtil.getIsExtends(host).is;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!nativeShadow) {\n      StyleProperties.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    // style owner has not updated properties yet\n    // go up the chain and force property update,\n    // except if the owner is the document\n    if (owner !== this._documentOwner && !ownerProperties) {\n      this._updateProperties(owner, ownerStyleInfo);\n      ownerProperties = ownerStyleInfo.styleProperties;\n    }\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties.hostAndRootPropertiesForScope(host, styleInfo.styleRules, styleInfo.cssBuild);\n    let propertyData = StyleProperties.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  /**\n   * Update styles of the whole document\n   *\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.styleSubtree(this._documentOwner, properties);\n  }\n  /**\n   * Update styles of a subtree\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} properties\n   */\n  styleSubtree(host, properties) {\n    const wrappedHost = StyleUtil.wrap(host);\n    let root = wrappedHost.shadowRoot;\n    if (root || this._isRootOwner(host)) {\n      this.styleElement(host, properties);\n    }\n    // process the shadowdom children of `host`\n    let shadowChildren =\n        root && (/** @type {!ParentNode} */ (root).children || root.childNodes);\n    if (shadowChildren) {\n      for (let i = 0; i < shadowChildren.length; i++) {\n        let c = /** @type {!HTMLElement} */(shadowChildren[i]);\n        this.styleSubtree(c);\n      }\n    } else {\n      // process the lightdom children of `host`\n      let children = wrappedHost.children || wrappedHost.childNodes;\n      if (children) {\n        for (let i = 0; i < children.length; i++) {\n          let c = /** @type {!HTMLElement} */(children[i]);\n          this.styleSubtree(c);\n        }\n      }\n    }\n  }\n  /* Custom Style operations */\n  _revalidateCustomStyleApplyShim(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        this._revalidateApplyShim(s);\n      }\n    }\n  }\n  _applyCustomStyles(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        StyleProperties.applyCustomStyle(s, this._documentOwnerStyleInfo.styleProperties);\n      }\n    }\n  }\n  transformCustomStyleForDocument(style) {\n    const cssBuild = StyleUtil.getCssBuild(style);\n    if (cssBuild !== this._documentOwnerStyleInfo.cssBuild) {\n      this._documentOwnerStyleInfo.cssBuild = cssBuild;\n    }\n    if (StyleUtil.isOptimalCssBuild(cssBuild)) {\n      return;\n    }\n    let ast = StyleUtil.rulesForStyle(style);\n    StyleUtil.forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer.documentRule(rule);\n      }\n      if (nativeCssVariables && cssBuild === '') {\n        this._ensure();\n        this._applyShim && this._applyShim['transformRule'](rule);\n      }\n    });\n    if (nativeCssVariables) {\n      style.textContent = StyleUtil.toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules['rules'].push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (nativeCssVariables && this._applyShim) {\n      let ast = StyleUtil.rulesForStyle(style);\n      this._ensure();\n      this._applyShim['transformRules'](ast);\n      style.textContent = StyleUtil.toCssText(ast);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!nativeCssVariables) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value ? value.trim() : '';\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = StyleUtil.wrap(element).getRootNode();\n    let classes = classString ? classString.split(/\\s/) : [];\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer.SCOPE_NAME, scopeName);\n    }\n    if (!nativeCssVariables) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    StyleUtil.setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n  /**\n   * @param {!Element} node\n   * @param {string} scope\n   */\n  scopeNode(node, scope) {\n    StyleTransformer.element(node, scope);\n  }\n  /**\n   * @param {!Element} node\n   * @param {string} scope\n   */\n  unscopeNode(node, scope) {\n    StyleTransformer.element(node, scope, true);\n  }\n  /**\n   * @param {!Node} node\n   * @return {string}\n   */\n  scopeForNode(node) {\n    return getOwnerScope(node);\n  }\n  /**\n   * @param {!Element} node\n   * @return {string}\n   */\n  currentScopeForNode(node) {\n    return getCurrentScope(node);\n  }\n}\n\n/* exports */\n/* eslint-disable no-self-assign */\nScopingShim.prototype['flush'] = ScopingShim.prototype.flush;\nScopingShim.prototype['prepareTemplate'] = ScopingShim.prototype.prepareTemplate;\nScopingShim.prototype['styleElement'] = ScopingShim.prototype.styleElement;\nScopingShim.prototype['styleDocument'] = ScopingShim.prototype.styleDocument;\nScopingShim.prototype['styleSubtree'] = ScopingShim.prototype.styleSubtree;\nScopingShim.prototype['getComputedStyleValue'] = ScopingShim.prototype.getComputedStyleValue;\nScopingShim.prototype['setElementClass'] = ScopingShim.prototype.setElementClass;\nScopingShim.prototype['_styleInfoForNode'] = ScopingShim.prototype._styleInfoForNode;\nScopingShim.prototype['transformCustomStyleForDocument'] = ScopingShim.prototype.transformCustomStyleForDocument;\nScopingShim.prototype['getStyleAst'] = ScopingShim.prototype.getStyleAst;\nScopingShim.prototype['styleAstToString'] = ScopingShim.prototype.styleAstToString;\nScopingShim.prototype['flushCustomStyles'] = ScopingShim.prototype.flushCustomStyles;\nScopingShim.prototype['scopeNode'] = ScopingShim.prototype.scopeNode;\nScopingShim.prototype['unscopeNode'] = ScopingShim.prototype.unscopeNode;\nScopingShim.prototype['scopeForNode'] = ScopingShim.prototype.scopeForNode;\nScopingShim.prototype['currentScopeForNode'] = ScopingShim.prototype.currentScopeForNode;\nScopingShim.prototype['prepareAdoptedCssText'] = ScopingShim.prototype.prepareAdoptedCssText;\n/* eslint-enable no-self-assign */\nObject.defineProperties(ScopingShim.prototype, {\n  'nativeShadow': {\n    get() {\n      return nativeShadow;\n    }\n  },\n  'nativeCss': {\n    get() {\n      return nativeCssVariables;\n    }\n  }\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';\n\nexport default class StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    /** @type {number} */\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ScopingShim from '../src/scoping-shim.js';\nimport {nativeCssVariables, nativeShadow, cssBuild, disableRuntime} from '../src/style-settings.js';\n\n/** @const {ScopingShim} */\nconst scopingShim = new ScopingShim();\n\nlet ApplyShim, CustomStyleInterface;\n\nif (window['ShadyCSS']) {\n  ApplyShim = window['ShadyCSS']['ApplyShim'];\n  CustomStyleInterface = window['ShadyCSS']['CustomStyleInterface'];\n}\n\nwindow.ShadyCSS = {\n  ScopingShim: scopingShim,\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplate(template, elementName, elementExtends) {\n    scopingShim.flushCustomStyles();\n    scopingShim.prepareTemplate(template, elementName, elementExtends)\n  },\n\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplateDom(template, elementName) {\n    scopingShim.prepareTemplateDom(template, elementName);\n  },\n\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplateStyles(template, elementName, elementExtends) {\n    scopingShim.flushCustomStyles();\n    scopingShim.prepareTemplateStyles(template, elementName, elementExtends)\n  },\n  /**\n   * @param {!HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleSubtree(element, properties);\n  },\n\n  /**\n   * @param {!HTMLElement} element\n   */\n  styleElement(element) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleElement(element);\n  },\n\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleDocument(properties);\n  },\n\n  flushCustomStyles() {\n    scopingShim.flushCustomStyles();\n  },\n\n  /**\n   * @param {Element} element\n   * @param {string} property\n   * @return {string}\n   */\n  getComputedStyleValue(element, property) {\n    return scopingShim.getComputedStyleValue(element, property);\n  },\n\n  nativeCss: nativeCssVariables,\n\n  nativeShadow: nativeShadow,\n\n  cssBuild: cssBuild,\n\n  disableRuntime: disableRuntime,\n};\n\nif (ApplyShim) {\n  window.ShadyCSS.ApplyShim = ApplyShim;\n}\n\nif (CustomStyleInterface) {\n  window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    `@apply` --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\n'use strict';\n\nimport {forEachRule, processVariableAndFallback, rulesForStyle, toCssText, gatherStyleText} from './style-util.js';\nimport {MIXIN_MATCH, VAR_ASSIGN} from './common-regex.js';\nimport {detectMixin} from './common-utils.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\nconst APPLY_NAME_CLEAN = /;\\s*/m;\nconst INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\nconst IMPORTANT = /\\s*!important/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nconst MIXIN_VAR_SEP = '_-_';\n\n/**\n * @typedef {!Object<string, string>}\n */\nlet PropertyEntry; // eslint-disable-line no-unused-vars\n\n/**\n * @typedef {!Object<string, boolean>}\n */\nlet DependantsEntry; // eslint-disable-line no-unused-vars\n\n/** @typedef {{\n *    properties: PropertyEntry,\n *    dependants: DependantsEntry\n * }}\n */\nlet MixinMapEntry; // eslint-disable-line no-unused-vars\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    /** @type {!Object<string, !MixinMapEntry>} */\n    this._map = {};\n  }\n  /**\n   * @param {string} name\n   * @param {!PropertyEntry} props\n   */\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    }\n  }\n  /**\n   * @param {string} name\n   * @return {MixinMapEntry}\n   */\n  get(name) {\n    name = name.trim();\n    return this._map[name] || null;\n  }\n}\n\n/**\n * Callback for when an element is marked invalid\n * @type {?function(string)}\n */\nlet invalidCallback = null;\n\n/** @unrestricted */\nclass ApplyShim {\n  constructor() {\n    /** @type {?string} */\n    this._currentElement = null;\n    /** @type {HTMLMetaElement} */\n    this._measureElement = null;\n    this._map = new MixinMap();\n  }\n  /**\n   * return true if `cssText` contains a mixin definition or consumption\n   * @param {string} cssText\n   * @return {boolean}\n   */\n  detectMixin(cssText) {\n    return detectMixin(cssText);\n  }\n\n  /**\n   * Gather styles into one style for easier processing\n   * @param {!HTMLTemplateElement} template\n   * @return {HTMLStyleElement}\n   */\n  gatherStyles(template) {\n    const styleText = gatherStyleText(template.content);\n    if (styleText) {\n      const style = /** @type {!HTMLStyleElement} */(document.createElement('style'));\n      style.textContent = styleText;\n      template.content.insertBefore(style, template.content.firstChild);\n      return style;\n    }\n    return null;\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformTemplate(template, elementName) {\n    if (template._gatheredStyle === undefined) {\n      template._gatheredStyle = this.gatherStyles(template);\n    }\n    /** @type {HTMLStyleElement} */\n    const style = template._gatheredStyle;\n    return style ? this.transformStyle(style, elementName) : null;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformStyle(style, elementName = '') {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @return {StyleNode}\n   */\n  transformCustomStyle(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (rule['selector'] === ':root') {\n        rule['selector'] = 'html';\n      }\n      this.transformRule(rule);\n    })\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {StyleNode} rules\n   * @param {string} elementName\n   */\n  transformRules(rules, elementName) {\n    this._currentElement = elementName;\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentElement = null;\n  }\n  /**\n   * @param {!StyleNode} rule\n   */\n  transformRule(rule) {\n    rule['cssText'] = this.transformCssText(rule['parsedCssText'], rule);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule['selector'] === ':root') {\n      rule['selector'] = ':host > *';\n    }\n  }\n  /**\n   * @param {string} cssText\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  transformCssText(cssText, rule) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, (matchText, propertyName, valueProperty, valueMixin) =>\n      this._produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule));\n    // consume mixins\n    return this._consumeCssProperties(cssText, rule);\n  }\n  /**\n   * @param {string} property\n   * @return {string}\n   */\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = /** @type {HTMLMetaElement} */(document.createElement('meta'));\n      this._measureElement.setAttribute('apply-shim-measure', '');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  /**\n   * Walk over all rules before this rule to find fallbacks for mixins\n   *\n   * @param {!StyleNode} startRule\n   * @return {!Object}\n   */\n  _fallbacksFromPreviousRules(startRule) {\n    // find the \"top\" rule\n    let topRule = startRule;\n    while (topRule['parent']) {\n      topRule = topRule['parent'];\n    }\n    const fallbacks = {};\n    let seenStartRule = false;\n    forEachRule(topRule, (r) => {\n      // stop when we hit the input rule\n      seenStartRule = seenStartRule || r === startRule;\n      if (seenStartRule) {\n        return;\n      }\n      // NOTE: Only matching selectors are \"safe\" for this fallback processing\n      // It would be prohibitive to run `matchesSelector()` on each selector,\n      // so we cheat and only check if the same selector string is used, which\n      // guarantees things like specificity matching\n      if (r['selector'] === startRule['selector']) {\n        Object.assign(fallbacks, this._cssTextToMap(r['parsedCssText']));\n      }\n    });\n    return fallbacks;\n  }\n  /**\n   * replace mixin consumption with variable consumption\n   * @param {string} text\n   * @param {!StyleNode=} rule\n   * @return {string}\n   */\n  _consumeCssProperties(text, rule) {\n    /** @type {Array} */\n    let m = null;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = rule ? this._fallbacksFromPreviousRules(rule) : {};\n      Object.assign(defaults, this._cssTextToMap(textBeforeApply));\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = `${textBeforeApply}${replacement}${textAfterApply}`;\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  /**\n   * produce variable consumption at the site of mixin consumption\n   * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n   * Example:\n   *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n   *\n   * @param {string} mixinName\n   * @param {Object} fallbacks\n   * @return {string}\n   */\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentElement) {\n        mixinEntry.dependants[this._currentElement] = true;\n      }\n      let p, parts, f;\n      const properties = mixinEntry.properties;\n      for (p in properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f.replace(IMPORTANT, ''));\n        }\n        parts.push(')');\n        if (IMPORTANT.test(properties[p])) {\n          parts.push(' !important');\n        }\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  /**\n   * @param {string} property\n   * @param {string} value\n   * @return {string}\n   */\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = this._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  /**\n   * \"parse\" a mixin definition into a map of properties and values\n   * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n   * @param {string} text\n   * @param {boolean=} replaceInitialOrInherit\n   * @return {!Object<string, string>}\n   */\n  _cssTextToMap(text, replaceInitialOrInherit = false) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = sp.slice(1).join(':');\n          if (replaceInitialOrInherit) {\n            value = this._replaceInitialOrInherit(property, value);\n          }\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * @param {MixinMapEntry} mixinEntry\n   */\n  _invalidateMixinEntry(mixinEntry) {\n    if (!invalidCallback) {\n      return;\n    }\n    for (let elementName in mixinEntry.dependants) {\n      if (elementName !== this._currentElement) {\n        invalidCallback(elementName);\n      }\n    }\n  }\n\n  /**\n   * @param {string} matchText\n   * @param {string} propertyName\n   * @param {?string} valueProperty\n   * @param {?string} valueMixin\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = `@apply ${value};`\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties('' + valueMixin, rule);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    // `initial` and `inherit` as properties in a map should be replaced because\n    // these keywords are eagerly evaluated when the mixin becomes CSS Custom Properties,\n    // and would set the variable value, rather than carry the keyword to the `var()` usage.\n    let mixinValues = this._cssTextToMap(mixinAsProperties, true);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = `${matchText};${prefix}`;\n    }\n    return `${prefix}${out.join('; ')};`;\n  }\n}\n\n/* exports */\n/* eslint-disable no-self-assign */\nApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin;\nApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle;\nApplyShim.prototype['transformCustomStyle'] = ApplyShim.prototype.transformCustomStyle;\nApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules;\nApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule;\nApplyShim.prototype['transformTemplate'] = ApplyShim.prototype.transformTemplate;\nApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;\n/* eslint-enable no-self-assign */\nObject.defineProperty(ApplyShim.prototype, 'invalidCallback', {\n  /** @return {?function(string)} */\n  get() {\n    return invalidCallback;\n  },\n  /** @param {?function(string)} cb */\n  set(cb) {\n    invalidCallback = cb;\n  }\n});\n\nexport default ApplyShim;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ApplyShim from '../src/apply-shim.js';\nimport templateMap from '../src/template-map.js';\nimport {getIsExtends, toCssText, elementHasBuiltCss} from '../src/style-util.js';\nimport * as ApplyShimUtils from '../src/apply-shim-utils.js';\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js';\nimport {CustomStyleInterfaceInterface} from '../src/custom-style-interface.js'; // eslint-disable-line no-unused-vars\nimport {nativeCssVariables, nativeShadow, cssBuild, disableRuntime} from '../src/style-settings.js';\n\n/** @const {ApplyShim} */\nconst applyShim = new ApplyShim();\n\nclass ApplyShimInterface {\n  constructor() {\n    /** @type {?CustomStyleInterfaceInterface} */\n    this.customStyleInterface = null;\n    applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n  }\n  ensure() {\n    if (this.customStyleInterface) {\n      return;\n    }\n    if (window.ShadyCSS.CustomStyleInterface) {\n      this.customStyleInterface =\n          /** @type {!CustomStyleInterfaceInterface} */ (\n              window.ShadyCSS.CustomStyleInterface);\n      this.customStyleInterface['transformCallback'] = (style) => {\n        applyShim.transformCustomStyle(style);\n      };\n      this.customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this.customStyleInterface['enqueued']) {\n            this.flushCustomStyles();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplate(template, elementName) {\n    this.ensure();\n    if (elementHasBuiltCss(template)) {\n      return;\n    }\n    templateMap[elementName] = template;\n    let ast = applyShim.transformTemplate(template, elementName);\n    // save original style ast to use for revalidating instances\n    template['_styleAst'] = ast;\n  }\n  flushCustomStyles() {\n    this.ensure();\n    if (!this.customStyleInterface) {\n      return;\n    }\n    let styles = this.customStyleInterface['processStyles']();\n    if (!this.customStyleInterface['enqueued']) {\n      return;\n    }\n    for (let i = 0; i < styles.length; i++ ) {\n      let cs = styles[i];\n      let style = this.customStyleInterface['getStyleForCustomStyle'](cs);\n      if (style) {\n        applyShim.transformCustomStyle(style);\n      }\n    }\n    this.customStyleInterface['enqueued'] = false;\n  }\n  /**\n   * @param {HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    this.ensure();\n    if (properties) {\n      updateNativeProperties(element, properties);\n    }\n    if (element.shadowRoot) {\n      this.styleElement(element);\n      let shadowChildren =\n          /** @type {!ParentNode} */ (element.shadowRoot).children ||\n          element.shadowRoot.childNodes;\n      for (let i = 0; i < shadowChildren.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */(shadowChildren[i]));\n      }\n    } else {\n      let children = element.children || element.childNodes;\n      for (let i = 0; i < children.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */(children[i]));\n      }\n    }\n  }\n  /**\n   * @param {HTMLElement} element\n   */\n  styleElement(element) {\n    this.ensure();\n    let {is} = getIsExtends(element);\n    let template = templateMap[is];\n    if (template && elementHasBuiltCss(template)) {\n      return;\n    }\n    if (template && !ApplyShimUtils.templateIsValid(template)) {\n      // only revalidate template once\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this.prepareTemplate(template, is);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update this element instance\n      let root = element.shadowRoot;\n      if (root) {\n        let style = /** @type {HTMLStyleElement} */(root.querySelector('style'));\n        if (style) {\n          // reuse the template's style ast, it has all the original css text\n          style['__cssRules'] = template['_styleAst'];\n          style.textContent = toCssText(template['_styleAst'])\n        }\n      }\n    }\n  }\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.ensure();\n    this.styleSubtree(document.body, properties);\n  }\n}\n\nif (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {\n  const applyShimInterface = new ApplyShimInterface();\n  let CustomStyleInterface = window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;\n\n  /** @suppress {duplicate} */\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplate(template, elementName, elementExtends) { // eslint-disable-line no-unused-vars\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.prepareTemplate(template, elementName);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplateStyles(template, elementName, elementExtends) {\n      window.ShadyCSS.prepareTemplate(template, elementName, elementExtends);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n    prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLElement} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleSubtree(element, properties);\n    },\n\n    /**\n     * @param {!HTMLElement} element\n     */\n    styleElement(element) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleElement(element);\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleDocument(properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n\n    flushCustomStyles() {\n      applyShimInterface.flushCustomStyles();\n    },\n\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    cssBuild: cssBuild,\n    disableRuntime: disableRuntime,\n  };\n\n  if (CustomStyleInterface) {\n    window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n  }\n}\n\nwindow.ShadyCSS.ApplyShim = applyShim;\n"],"sourceRoot":""}
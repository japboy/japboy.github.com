{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@polymer/polymer/lib/utils/boot.js","webpack:///./node_modules/@polymer/polymer/lib/utils/settings.js","webpack:///./node_modules/@polymer/polymer/lib/utils/resolve-url.js","webpack:///./node_modules/@polymer/polymer/lib/utils/mixin.js","webpack:///./node_modules/@polymer/polymer/lib/utils/async.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-changed.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-mixin.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/shady-render.js","webpack:///./node_modules/lit-html/lib/lit-extended.js","webpack:///./node_modules/@polymer/lit-element/lit-element.js","webpack:///./src/components/atoms/Layout/grid.ts","webpack:///./src/components/atoms/Layout/layout.ts","webpack:///./src/components/atoms/Heading/index.ts","webpack:///./src/components/templates/Home/index.ts","webpack:///./src/components/pages/Home/index.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","window","JSCompiler_renameProperty","prop","Boolean","ShadyCSS","nativeCss","customElements","rootPath","url","document","baseURI","location","href","substring","lastIndexOf","passiveTouchGestures","dedupeId","MixinFunction","__mixinApplications","__mixinSet","dedupingMixin","mixin","mixinApplications","WeakMap","mixinDedupeId","base","baseSet","map","extended","set","mixinSet","create","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","len","length","cb","e","setTimeout","splice","observe","characterData","microtask","run","callback","textContent","push","[object Object]","handle","idx","Error","PropertiesChanged","superClass","props","proto","this","_createPropertyAccessor","toLowerCase","readOnly","_addPropertyToAttributeMap","__dataHasAccessor","assign","_definePropertyAccessor","__dataAttributes","attr","constructor","attributeNameForProperty","_getProperty","_setProperty","super","__dataEnabled","__dataReady","__dataInvalid","__data","__dataPending","__dataOld","__dataInstanceProps","__serializing","_initializeProperties","_flushProperties","_setPendingProperty","_invalidateProperties","ext","old","changed","_shouldPropertyChange","_initializeInstanceProperties","ready","changedProps","_shouldPropertiesChange","_propertiesChanged","currentProps","oldProps","namespace","_attributeToProperty","attributeChangedCallback","attribute","type","_deserializeValue","typeForProperty","arguments","_valueToNodeAttribute","node","str","_serializeValue","undefined","removeAttribute","setAttribute","toString","Number","properties_mixin_PropertiesMixin","superPropertiesClass","superCtor","getPrototypeOf","PropertiesMixin","ownProperties","properties","output","normalizeProperties","__ownProperties","observedAttributes","_properties","keys","finalize","__finalized","_finalizeClass","createProperties","__properties","info","connectedCallback","_enableProperties","disconnectedCallback","templateCaches","Map","TemplateResult","strings","values","partCallback","defaultPartCallback","html","isTextBinding","closing","findTagClose","nodeMarker","marker","template","createElement","innerHTML","getHTML","render","result","container","templateFactory","templateCache","Template","getTemplateElement","instance","__templateInstance","_partCallback","update","TemplateInstance","fragment","_clone","removeNodes","firstChild","appendChild","String","Math","random","slice","markerRegex","RegExp","lastAttributeNameRegex","close","indexOf","TemplatePart","index","rawName","element","parts","content","walker","createTreeWalker","partIndex","nodesToRemove","previousNode","currentNode","nextNode","nodeType","hasAttributes","attributes","count","stringForPart","attributeNameInPart","exec","getNamedItem","stringsForAttributeValue","split","nodeValue","parent","parentNode","lastIndex","insertBefore","createComment","previousSibling","Node","TEXT_NODE","nextSibling","removeChild","getValue","part","isDirective","directiveValue","__litDirective","isPrimitiveValue","AttributePart","size","_previousValues","startIndex","text","v","Array","isArray","Symbol","iterator","t","_equalToPreviousValues","join","_interpolate","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","_setNode","then","_setPromise","clear","_insert","_getTemplate","itemParts","item","itemPart","itemStart","setValue","lastPart","templatePart","getTemplate","_parts","valueIndex","importNode","shadyTemplateFactory","scopeName","cacheKey","prepareTemplate","lit_extended_html","extendedPartCallback","substr","eventName","listener","_listener","removeEventListener","addEventListener","event","handleEvent","lastChar","lit_element_LitElement","HTMLElement","__renderComplete","__resolveRenderComplete","__isInvalid","__isChanging","_root","_createRoot","_firstRendered","attachShadow","mode","_props","_changedProps","_prevProps","shouldRender","_shouldRender","prevProps","_render","_applyRender","_didRender","change","console","trace","shady_render_render","localName","renderComplete","Promise","resolve","define","column","margin","messages","message","path","MyAppGlobals"],"mappings":"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","file":"app-12ca1e2.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nwindow.JSCompiler_renameProperty = function(prop) { return prop; };\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\n\n\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\nexport let rootPath = undefined ||\n  pathFromUrl(document.baseURI || window.location.href);\n\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:\n *\n *     Polymer = {\n *       sanitizeDOMValue: function(value, name, type, node) { ... }\n *     }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n */\nexport let sanitizeDOMValue = undefined;\n\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\nexport let passiveTouchGestures = false;\n\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\nexport const setPassiveTouchGestures = function(usePassive) {\n  passiveTouchGestures = usePassive;\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * Note that this function performs no resolution for URLs that start\n * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n * URL resolution, use `window.URL`.\n *\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nexport function resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return (new URL(url, baseURI)).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nexport function resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nexport function pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return /** @type {T} */ (dedupingMixin);\n};\n/* eslint-enable valid-jsdoc */\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * This module provides a number of strategies for enqueuing asynchronous\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\n * handle, and a `cancel(handle)` interface for canceling async tasks before\n * they run.\n *\n * @summary Module that provides a number of strategies for enqueuing\n * asynchronous tasks.\n */\n\nimport './boot.js';\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\n/**\n * Async interface wrapper around `setTimeout`.\n *\n * @namespace\n * @summary Async interface wrapper around `setTimeout`.\n */\nconst timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof timeOut\n   * @param {number=} delay Time to wait before calling callbacks in ms\n   * @return {!AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return {\n      run(fn) { return window.setTimeout(fn, delay); },\n      cancel(handle) {\n        window.clearTimeout(handle);\n      }\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof timeOut\n   * @param {!Function} fn Callback to run\n   * @param {number=} delay Delay in milliseconds\n   * @return {number} Handle used for canceling task\n   */\n  run(fn, delay) {\n    return window.setTimeout(fn, delay);\n  },\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.clearTimeout(handle);\n  }\n};\nexport {timeOut};\n\n/**\n * Async interface wrapper around `requestAnimationFrame`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestAnimationFrame`.\n */\nconst animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof animationFrame\n   * @param {function(number):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestAnimationFrame(fn);\n  },\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof animationFrame\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\nexport {animationFrame};\n\n/**\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestIdleCallback`.\n */\nconst idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof idlePeriod\n   * @param {function(!IdleDeadline):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\nexport {idlePeriod};\n\n/**\n * Async interface for enqueuing callbacks that run at microtask timing.\n *\n * Note that microtask timing is achieved via a single `MutationObserver`,\n * and thus callbacks enqueued with this API will all run in a single\n * batch, and not interleaved with other microtasks such as promises.\n * Promises are avoided as an implementation choice for the time being\n * due to Safari bugs that cause Promises to lack microtask guarantees.\n *\n * @namespace\n * @summary Async interface for enqueuing callbacks that run at microtask\n *   timing.\n */\nconst microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof microTask\n   * @param {!Function=} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\nexport {microTask};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertiesChanged = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @extends {superClass}\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty('__dataAttributes')) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      if (!this.__dataAttributes[property]) {\n        const attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          return this._getProperty(property);\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          this._setProperty(property, value);\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {Object} props Properties to normalize\n * @return {Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @extends {superClass}\n  * @implements {Polymer_PropertiesChanged}\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor)) && constructor.properties) {\n       props = normalizeProperties(constructor.properties);\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    */\n   static get observedAttributes() {\n     const props = this._properties;\n     return props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {PropertiesMixinConstructor} */(this));\n     if (props) {\n       this.createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html');\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, partCallback = defaultPartCallback) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.partCallback = partCallback;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            // We're in a text position if the previous string closed its tags.\n            // If it doesn't have any tags, then we use the previous text position\n            // state.\n            const closing = findTagClose(s);\n            isTextBinding = closing > -1 ? closing < s.length : isTextBinding;\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function defaultTemplateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-posisitions, not attribute positions,\n * in template.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n/**\n * Finds the closing index of the last closed HTML tag.\n * This has 3 possible return values:\n *   - `-1`, meaning there is no tag in str.\n *   - `string.length`, meaning the last opened tag is unclosed.\n *   - Some positive number < str.length, meaning the index of the closing '>'.\n */\nfunction findTagClose(str) {\n    const close = str.lastIndexOf('>');\n    const open = str.indexOf('<', close + 1);\n    return open > -1 ? str.length : close;\n}\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const content = this.element.content;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                // Per https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                // attributes are not guaranteed to be returned in document order. In\n                // particular, Edge/IE can return them out of order, so we cannot assume\n                // a correspondance between part index and attribute index.\n                let count = 0;\n                for (let i = 0; i < attributes.length; i++) {\n                    if (attributes[i].value.indexOf(marker) >= 0) {\n                        count++;\n                    }\n                }\n                while (count-- > 0) {\n                    // Get the template literal section leading up to the first\n                    // expression in this attribute attribute\n                    const stringForPart = result.strings[partIndex];\n                    // Find the attribute name\n                    const attributeNameInPart = lastAttributeNameRegex.exec(stringForPart)[1];\n                    // Find the corresponding attribute\n                    // TODO(justinfagnani): remove non-null assertion\n                    const attribute = attributes.getNamedItem(attributeNameInPart);\n                    const stringsForAttributeValue = attribute.value.split(markerRegex);\n                    this.parts.push(new TemplatePart('attribute', index, attribute.name, attributeNameInPart, stringsForAttributeValue));\n                    node.removeAttribute(attribute.name);\n                    partIndex += stringsForAttributeValue.length - 1;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue.indexOf(marker) < 0) {\n                    continue;\n                }\n                const parent = node.parentNode;\n                const strings = nodeValue.split(markerRegex);\n                const lastIndex = strings.length - 1;\n                // We have a part for each match found\n                partIndex += lastIndex;\n                // Generate a new text node for each literal section\n                // These nodes are also used as the markers for node parts\n                for (let i = 0; i < lastIndex; i++) {\n                    parent.insertBefore((strings[i] === '')\n                        ? document.createComment('')\n                        : document.createTextNode(strings[i]), node);\n                    this.parts.push(new TemplatePart('node', index++));\n                }\n                parent.insertBefore(strings[lastIndex] === '' ?\n                    document.createComment('') :\n                    document.createTextNode(strings[lastIndex]), node);\n                nodesToRemove.push(node);\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === marker) {\n                const parent = node.parentNode;\n                // Add a new marker node to be the startNode of the Part if any of the\n                // following are true:\n                //  * We don't have a previousSibling\n                //  * previousSibling is being removed (thus it's not the\n                //    `previousNode`)\n                //  * previousSibling is not a Text node\n                //\n                // TODO(justinfagnani): We should be able to use the previousNode here\n                // as the marker node and reduce the number of extra nodes we add to a\n                // template. See https://github.com/PolymerLabs/lit-html/issues/147\n                const previousSibling = node.previousSibling;\n                if (previousSibling === null || previousSibling !== previousNode ||\n                    previousSibling.nodeType !== Node.TEXT_NODE) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a nextSibling add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a new marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\n/**\n * Returns a value ready to be inserted into a Part from a user-provided value.\n *\n * If the user value is a directive, this invokes the directive with the given\n * part. If the value is null, it's converted to undefined to work better\n * with certain DOM APIs, like textContent.\n */\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (isDirective(value)) {\n        value = value(part);\n        return directiveValue;\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nconst isDirective = (o) => typeof o === 'function' && o.__litDirective === true;\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const directiveValue = {};\nconst isPrimitiveValue = (value) => value === null ||\n    !(typeof value === 'object' || typeof value === 'function');\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n        this._previousValues = [];\n    }\n    _interpolate(values, startIndex) {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const v = getValue(this, values[startIndex + i]);\n            if (v && v !== directiveValue &&\n                (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                for (const t of v) {\n                    // TODO: we need to recursively call getValue into iterables...\n                    text += t;\n                }\n            }\n            else {\n                text += v;\n            }\n        }\n        return text + strings[l];\n    }\n    _equalToPreviousValues(values, startIndex) {\n        for (let i = startIndex; i < startIndex + this.size; i++) {\n            if (this._previousValues[i] !== values[i] ||\n                !isPrimitiveValue(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setValue(values, startIndex) {\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n            if (Array.isArray(value)) {\n                value = value.join('');\n            }\n        }\n        else {\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element.setAttribute(this.name, value);\n        }\n        this._previousValues = values;\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === directiveValue) {\n            return;\n        }\n        if (isPrimitiveValue(value)) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        if (this._previousValue === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        value = value === undefined ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        const template = this.instance._getTemplate(value);\n        let instance;\n        if (this._previousValue && this._previousValue.template === template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance = new TemplateInstance(template, this.instance._partCallback, this.instance._getTemplate);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        this._previousValue = value;\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        const fragment = document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        if (parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            let index = -1;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                while (index < part.index) {\n                    index++;\n                    walker.nextNode();\n                }\n                this._parts.push(this._partCallback(this, part, walker.currentNode));\n            }\n        }\n        return fragment;\n    }\n}\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { render as baseRender, Template, templateCaches } from '../lit-html.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = `${result.type}--${scopeName}`;\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (typeof window.ShadyCSS === 'object') {\n            window.ShadyCSS.prepareTemplate(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n    }\n    return template;\n};\nexport function render(result, container, scopeName) {\n    return baseRender(result, container, shadyTemplateFactory(scopeName));\n}\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, defaultPartCallback, directiveValue, getValue, SVGTemplateResult, TemplateResult } from '../lit-html.js';\nexport { render } from '../lit-html.js';\n/**\n * Interprets a template literal as a lit-extended HTML template.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', extendedPartCallback);\n/**\n * Interprets a template literal as a lit-extended SVG template.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', extendedPartCallback);\n/**\n * A PartCallback which allows templates to set properties and declarative\n * event handlers.\n *\n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n *\n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n *\n * Example:\n *\n *     html`<button class$=\"primary\">Buy Now</button>`\n *\n * To set an event handler, prefix the attribute name with `on-`:\n *\n * Example:\n *\n *     html`<button on-click=${(e)=> this.onClickHandler(e)}>Buy Now</button>`\n *\n */\nexport const extendedPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        if (templatePart.rawName.substr(0, 3) === 'on-') {\n            const eventName = templatePart.rawName.slice(3);\n            return new EventPart(instance, node, eventName);\n        }\n        const lastChar = templatePart.name.substr(templatePart.name.length - 1);\n        if (lastChar === '$') {\n            const name = templatePart.name.slice(0, -1);\n            return new AttributePart(instance, node, name, templatePart.strings);\n        }\n        if (lastChar === '?') {\n            const name = templatePart.name.slice(0, -1);\n            return new BooleanAttributePart(instance, node, name, templatePart.strings);\n        }\n        return new PropertyPart(instance, node, templatePart.rawName, templatePart.strings);\n    }\n    return defaultPartCallback(instance, templatePart, node);\n};\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            const value = getValue(this, values[startIndex]);\n            if (value === directiveValue) {\n                return;\n            }\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        else {\n            throw new Error('boolean attributes can only contain a single expression');\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        let value;\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n        }\n        else {\n            // Interpolation, so interpolate\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element[this.name] = value;\n        }\n        this._previousValues = values;\n    }\n}\nexport class EventPart {\n    constructor(instance, element, eventName) {\n        this.instance = instance;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        const listener = getValue(this, value);\n        if (listener === this._listener) {\n            return;\n        }\n        if (listener == null) {\n            this.element.removeEventListener(this.eventName, this);\n        }\n        else if (this._listener == null) {\n            this.element.addEventListener(this.eventName, this);\n        }\n        this._listener = listener;\n    }\n    handleEvent(event) {\n        if (typeof this._listener === 'function') {\n            this._listener.call(this.element, event);\n        }\n        else if (typeof this._listener.handleEvent === 'function') {\n            this._listener.handleEvent(event);\n        }\n    }\n}\n//# sourceMappingURL=lit-extended.js.map","import { PropertiesMixin } from '@polymer/polymer/lib/mixins/properties-mixin.js';\nimport { camelToDashCase } from '@polymer/polymer/lib/utils/case-map.js';\nimport { render } from 'lit-html/lib/shady-render.js';\nexport { html } from 'lit-html/lib/lit-extended.js';\n/**\n * Renders attributes to the given element based on the `attrInfo` object where\n * boolean values are added/removed as attributes.\n * @param element Element on which to set attributes.\n * @param attrInfo Object describing attributes.\n */\nexport function renderAttributes(element, attrInfo) {\n    for (const a in attrInfo) {\n        const v = attrInfo[a] === true ? '' : attrInfo[a];\n        if (v || v === '' || v === 0) {\n            if (element.getAttribute(a) !== v) {\n                element.setAttribute(a, v);\n            }\n        }\n        else if (element.hasAttribute(a)) {\n            element.removeAttribute(a);\n        }\n    }\n}\n/**\n * Returns a string of css class names formed by taking the properties\n * in the `classInfo` object and appending the property name to the string of\n * class names if the property value is truthy.\n * @param classInfo\n */\nexport function classString(classInfo) {\n    const o = [];\n    for (const name in classInfo) {\n        const v = classInfo[name];\n        if (v) {\n            o.push(name);\n        }\n    }\n    return o.join(' ');\n}\n/**\n * Returns a css style string formed by taking the properties in the `styleInfo`\n * object and appending the property name (dash-cased) colon the\n * property value. Properties are separated by a semi-colon.\n * @param styleInfo\n */\nexport function styleString(styleInfo) {\n    const o = [];\n    for (const name in styleInfo) {\n        const v = styleInfo[name];\n        if (v || v === 0) {\n            o.push(`${camelToDashCase(name)}: ${v}`);\n        }\n    }\n    return o.join('; ');\n}\nexport class LitElement extends PropertiesMixin(HTMLElement) {\n    constructor() {\n        super(...arguments);\n        this.__renderComplete = null;\n        this.__resolveRenderComplete = null;\n        this.__isInvalid = false;\n        this.__isChanging = false;\n    }\n    /**\n     * Override which sets up element rendering by calling* `_createRoot`\n     * and `_firstRendered`.\n     */\n    ready() {\n        this._root = this._createRoot();\n        super.ready();\n        this._firstRendered();\n    }\n    /**\n     * Called after the element DOM is rendered for the first time.\n     * Implement to perform tasks after first rendering like capturing a\n     * reference to a static node which must be directly manipulated.\n     * This should not be commonly needed. For tasks which should be performed\n     * before first render, use the element constructor.\n     */\n    _firstRendered() { }\n    /**\n     * Implement to customize where the element's template is rendered by\n     * returning an element into which to render. By default this creates\n     * a shadowRoot for the element. To render into the element's childNodes,\n     * return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    _createRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Override which returns the value of `_shouldRender` which users\n     * should implement to control rendering. If this method returns false,\n     * _propertiesChanged will not be called and no rendering will occur even\n     * if property values change or `_requestRender` is called.\n     * @param _props Current element properties\n     * @param _changedProps Changing element properties\n     * @param _prevProps Previous element properties\n     * @returns {boolean} Default implementation always returns true.\n     */\n    _shouldPropertiesChange(_props, _changedProps, _prevProps) {\n        const shouldRender = this._shouldRender(_props, _changedProps, _prevProps);\n        if (!shouldRender && this.__resolveRenderComplete) {\n            this.__resolveRenderComplete(false);\n        }\n        return shouldRender;\n    }\n    /**\n     * Implement to control if rendering should occur when property values\n     * change or `_requestRender` is called. By default, this method always\n     * returns true, but this can be customized as an optimization to avoid\n     * rendering work when changes occur which should not be rendered.\n     * @param _props Current element properties\n     * @param _changedProps Changing element properties\n     * @param _prevProps Previous element properties\n     * @returns {boolean} Default implementation always returns true.\n     */\n    _shouldRender(_props, _changedProps, _prevProps) {\n        return true;\n    }\n    /**\n     * Override which performs element rendering by calling\n     * `_render`, `_applyRender`, and finally `_didRender`.\n     * @param props Current element properties\n     * @param changedProps Changing element properties\n     * @param prevProps Previous element properties\n     */\n    _propertiesChanged(props, changedProps, prevProps) {\n        super._propertiesChanged(props, changedProps, prevProps);\n        const result = this._render(props);\n        if (result && this._root !== undefined) {\n            this._applyRender(result, this._root);\n        }\n        this._didRender(props, changedProps, prevProps);\n        if (this.__resolveRenderComplete) {\n            this.__resolveRenderComplete(true);\n        }\n    }\n    _flushProperties() {\n        this.__isChanging = true;\n        this.__isInvalid = false;\n        super._flushProperties();\n        this.__isChanging = false;\n    }\n    /**\n     * Override which warns when a user attempts to change a property during\n     * the rendering lifecycle. This is an anti-pattern and should be avoided.\n     * @param property {string}\n     * @param value {any}\n     * @param old {any}\n     */\n    _shouldPropertyChange(property, value, old) {\n        const change = super._shouldPropertyChange(property, value, old);\n        if (change && this.__isChanging) {\n            console.trace(`Setting properties in response to other properties changing ` +\n                `considered harmful. Setting '${property}' from ` +\n                `'${this._getProperty(property)}' to '${value}'.`);\n        }\n        return change;\n    }\n    /**\n     * Implement to describe the DOM which should be rendered in the element.\n     * Ideally, the implementation is a pure function using only props to describe\n     * the element template. The implementation must a `lit-html` TemplateResult.\n     * By default this template is rendered into the element's shadowRoot.\n     * This can be customized by implementing `_createRoot`. This method must be\n     * implemented.\n     * @param {*} _props Current element properties\n     * @returns {TemplateResult} Must return a lit-html TemplateResult.\n     */\n    _render(_props) {\n        throw new Error('_render() not implemented');\n    }\n    /**\n     * Renders the given lit-html template `result` into the given `node`.\n     * Implement to customize the way rendering is applied. This is should not\n     * typically be needed and is provided for advanced use cases.\n     * @param result {TemplateResult} `lit-html` template result to render\n     * @param node {Element|DocumentFragment} node into which to render\n     */\n    _applyRender(result, node) {\n        render(result, node, this.localName);\n    }\n    /**\n     * Called after element DOM has been rendered. Implement to\n     * directly control rendered DOM. Typically this is not needed as `lit-html`\n     * can be used in the `_render` method to set properties, attributes, and\n     * event listeners. However, it is sometimes useful for calling methods on\n     * rendered elements, like calling `focus()` on an element to focus it.\n     * @param _props Current element properties\n     * @param _changedProps Changing element properties\n     * @param _prevProps Previous element properties\n     */\n    _didRender(_props, _changedProps, _prevProps) { }\n    /**\n     * Call to request the element to asynchronously re-render regardless\n     * of whether or not any property changes are pending.\n     */\n    _requestRender() { this._invalidateProperties(); }\n    /**\n     * Override which provides tracking of invalidated state.\n     */\n    _invalidateProperties() {\n        this.__isInvalid = true;\n        super._invalidateProperties();\n    }\n    /**\n     * Returns a promise which resolves after the element next renders.\n     * The promise resolves to `true` if the element rendered and `false` if the\n     * element did not render.\n     * This is useful when users (e.g. tests) need to react to the rendered state\n     * of the element after a change is made.\n     * This can also be useful in event handlers if it is desireable to wait\n     * to send an event until after rendering. If possible implement the\n     * `_didRender` method to directly respond to rendering within the\n     * rendering lifecycle.\n     */\n    get renderComplete() {\n        if (!this.__renderComplete) {\n            this.__renderComplete = new Promise((resolve) => {\n                this.__resolveRenderComplete =\n                    (value) => {\n                        this.__resolveRenderComplete = this.__renderComplete = null;\n                        resolve(value);\n                    };\n            });\n            if (!this.__isInvalid && this.__resolveRenderComplete) {\n                Promise.resolve().then(() => this.__resolveRenderComplete(false));\n            }\n        }\n        return this.__renderComplete;\n    }\n}\n//# sourceMappingURL=lit-element.js.map","import { LitElement, html } from '@polymer/lit-element';\nclass AtomLayoutGrid extends LitElement {\n    static get properties() {\n        return {\n            column: Number,\n        };\n    }\n    constructor() {\n        super();\n    }\n    _render({ column }) {\n        return html `\n      <style>\n        :host {\n          --atom-layout-grid: calc((var(--app-column) * ${column}) + (var(--app-gutter) * ${column - 1}));\n        }\n        div {\n          background-color: #eee;\n          display: inline-block;\n          margin-bottom: var(--app-gutter);\n          margin-right: var(--app-gutter);\n          width: var(--atom-layout-grid);\n          min-height: var(--atom-layout-grid);\n        }\n      </style>\n      <div>\n        <h1>Yo</h1>\n        <slot></slot>\n      </div>\n    `;\n    }\n}\nwindow.customElements.define('atom-layout-grid', AtomLayoutGrid);\n","import { LitElement, html } from '@polymer/lit-element';\nclass AtomLayout extends LitElement {\n    static get properties() {\n        return {\n            margin: Number,\n        };\n    }\n    constructor() {\n        super();\n    }\n    _render({ margin }) {\n        return html `\n      <style>\n        :host {\n          --atom-layout-margin: ${margin};\n        }\n        div {\n          margin-left: calc(var(--app-baseline-regular) * var(--atom-layout-margin));\n          margin-right: calc(var(--app-baseline-regular) * var(--atom-layout-margin));\n        }\n      </style>\n      <div>\n        <slot></slot>\n      </div>\n    `;\n    }\n}\nwindow.customElements.define('atom-layout', AtomLayout);\n","import { LitElement, html } from '@polymer/lit-element';\nclass AtomHeading extends LitElement {\n    static get properties() {\n        return {};\n    }\n    _render() {\n        return html `\n      <style>\n        :host {\n          color: #f00;\n        }\n        h1 {\n          color: #0f0;\n          font-weight: normal;\n        }\n        h1 ::slotted {\n          color: #00f;\n        }\n      </style>\n      <h1><slot></slot></h1>\n    `;\n    }\n}\nwindow.customElements.define('atom-heading', AtomHeading);\n","import { LitElement, html } from '@polymer/lit-element';\nimport '@/components/atoms/Layout';\nimport '@/components/atoms/Heading';\nclass TemplateHome extends LitElement {\n    static get properties() {\n        return {\n            messages: Array,\n        };\n    }\n    constructor() {\n        super();\n        this.messages = [\n            'Hey',\n            'Hi!',\n            'Hello.',\n            'Greetings!',\n            'Yo',\n            'Hola~',\n            'Hey',\n            'Hi!',\n            'Hello.',\n            'Greetings!',\n            'Yo',\n            'Hola~',\n        ];\n    }\n    _render({ messages }) {\n        return html `\n      <style>\n        :host {\n          --app-primary-color: #eee;\n          --app-secondary-color: #000;\n\n          display: block;\n        }\n\n        .testing {\n          background-color: #eee;\n        }\n      </style>\n\n      <atom-layout margin=\"3\">\n        <header>\n          <h1>My portal.</h1>\n          <ul role=\"navigation\">\n            <li>Unko</li>\n            <li>Unko</li>\n            <li>Unko</li>\n          </ul>\n        </header>\n\n        <main>\n          ${messages.map((message) => html `\n            <atom-layout-grid column=\"3\">\n              <p>${message}</p>\n            </atom-layout-grid>\n          `)}\n        </main>\n      </atom-layout>\n    `;\n    }\n}\nwindow.customElements.define('template-home', TemplateHome);\n","import { LitElement, html } from '@polymer/lit-element';\nimport '@/components/templates/Home';\nexport class PageHome extends LitElement {\n    static get properties() {\n        return {};\n    }\n    constructor() {\n        super();\n    }\n    _render() {\n        return html `\n      <template-home></template-home>\n    `;\n    }\n}\nwindow.customElements.define('page-home', PageHome);\n","import { setPassiveTouchGestures, setRootPath } from '@polymer/polymer/lib/utils/settings.js';\nimport '@/components/pages/Home';\nsetPassiveTouchGestures(true);\nsetRootPath(window.MyAppGlobals.rootPath);\n"],"sourceRoot":""}
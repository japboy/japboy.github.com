{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/modify-template.js","webpack:///./node_modules/lit-html/lib/shady-render.js","webpack:///./node_modules/lit-element/lib/updating-element.js","webpack:///./node_modules/lit-element/lib/decorators.js","webpack:///./node_modules/lit-element/lib/css-tag.js","webpack:///./node_modules/lit-element/lit-element.js","webpack:///./src/components/atoms/Balloon/index.ts","webpack:///./src/components/templates/Home/index.ts","webpack:///./src/components/pages/Home/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","directives","WeakMap","isDirective","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","node","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","this","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","document","createTreeWalker","lastPartIndex","nextNode","currentNode","nodeType","hasAttributes","attributes","count","length","indexOf","stringForPart","strings","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","getAttribute","split","push","type","removeAttribute","tagName","data","parent","parentNode","lastIndex","insertBefore","createMarker","createTextNode","previousSibling","isTemplatePartActive","part","createComment","template_instance_TemplateInstance","processor","options","_parts","values","setValue","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","template_result_TemplateResult","endIndex","html","match","substr","createElement","innerHTML","getHTML","isPrimitive","AttributeCommitter","dirty","_createPart","parts_AttributePart","text","v","Array","isArray","iterator","setAttribute","_getValue","comitter","committer","directive","parts_NodePart","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","Node","_commitNode","_commitIterable","clear","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","parts_BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","parts_EventPart","eventName","eventContext","_boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","event","defaultTemplateProcessor","prefix","templateCache","templateCaches","stringsArray","keyString","Map","set","join","getTemplateElement","render_parts","lit_html_html","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","nativeShadow","querySelector","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","finalized","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","oldValue","_requestUpdate","configurable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","standardProperty","kind","descriptor","placement","initializer","clazz","assign","legacyProperty","proto","protoOrDescriptor","supportsAdoptingStyleSheets","Document","CSSStyleSheet","flattenStyles","flat","Infinity","arrayFlat","lit_element_LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","cssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","firstScopeRender","renderContainer","createDocumentFragment","appendInto","delete","host","Direction","__decorate","decorators","target","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","Balloon_AtomBalloon","direction","Bottom","define","Home_TemplateHome","active","initialized","setTimeout","toggle","hired","requestUpdate","gravatar","Home_decorate"],"mappings":"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","file":"app-ee2edd3.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            // Keeps track of the last index associated with a part. We try to delete\n            // unnecessary nodes, but we never want to associate two different parts\n            // to the same index. They must have a constant node between.\n            let lastPartIndex = 0;\n            while (walker.nextNode()) {\n                index++;\n                const node = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // All bound attributes have had a suffix added in\n                            // TemplateResult#getHTML to opt out of special attribute\n                            // handling. To look up the attribute value we also need to add\n                            // the suffix.\n                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const data = node.data;\n                    if (data.indexOf(marker) >= 0) {\n                        const parent = node.parentNode;\n                        const strings = data.split(markerRegex);\n                        const lastIndex = strings.length - 1;\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        for (let i = 0; i < lastIndex; i++) {\n                            parent.insertBefore((strings[i] === '') ? createMarker() :\n                                document.createTextNode(strings[i]), node);\n                            this.parts.push({ type: 'node', index: ++index });\n                        }\n                        // If there's no text, we must insert a comment to mark our place.\n                        // Else, we can trust it will stick around after cloning.\n                        if (strings[lastIndex] === '') {\n                            parent.insertBefore(createMarker(), node);\n                            nodesToRemove.push(node);\n                        }\n                        else {\n                            node.data = strings[lastIndex];\n                        }\n                        // We have a part for each match found\n                        partIndex += lastIndex;\n                    }\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.data === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * The previousSibling is already the start of a previous part\n                        if (node.previousSibling === null || index === lastPartIndex) {\n                            index++;\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        lastPartIndex = index;\n                        this.parts.push({ type: 'node', index });\n                        // If we don't have a nextSibling, keep this node so we have an end.\n                        // Else, we can remove it to save future costs.\n                        if (node.nextSibling === null) {\n                            node.data = '';\n                        }\n                        else {\n                            nodesToRemove.push(node);\n                            index--;\n                        }\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.data.indexOf(marker, i + 1)) !==\n                            -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node.previousSibling);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const endIndex = this.strings.length - 1;\n        let html = '';\n        for (let i = 0; i < endIndex; i++) {\n            const s = this.strings[i];\n            // This exec() call does two things:\n            // 1) Appends a suffix to the bound attribute name to opt out of special\n            // attribute value parsing that IE11 and Edge do, like for style and\n            // many SVG attributes. The Template class also appends the same suffix\n            // when looking up attributes to create Parts.\n            // 2) Adds an unquoted-attribute-safe marker for the first expression in\n            // an attribute. Subsequent attribute expressions will use node markers,\n            // and this is safe since attributes with multiple expressions are\n            // guaranteed to be quoted.\n            const match = lastAttributeNameRegex.exec(s);\n            if (match) {\n                // We're starting a new bound attribute.\n                // Add the safe attribute suffix, and use unquoted-attribute-safe\n                // marker.\n                html += s.substr(0, match.index) + match[1] + match[2] +\n                    boundAttributeSuffix + match[3] + marker;\n            }\n            else {\n                // We're either in a bound node, or trailing bound attribute.\n                // Either way, nodeMarker is safe to use.\n                html += s + nodeMarker;\n            }\n        }\n        return html + this.strings[endIndex];\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) ||\n                        // tslint:disable-next-line:no-any\n                        typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) ||\n            // tslint:disable-next-line:no-any\n            value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        if (shouldAddListener) {\n            this._options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, skip unnecessary work\n    if (styles.length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = container instanceof ShadowRoot &&\n        compatibleShadyCSSVersion && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, property } from 'lit-element';\nvar Direction;\n(function (Direction) {\n    Direction[\"Top\"] = \"top\";\n    Direction[\"Left\"] = \"left\";\n    Direction[\"Right\"] = \"right\";\n    Direction[\"Bottom\"] = \"bottom\";\n})(Direction || (Direction = {}));\nclass AtomBalloon extends LitElement {\n    constructor() {\n        super();\n        this.direction = Direction.Bottom;\n    }\n    render() {\n        return html `\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n        }\n        .balloon {\n          background-color: #0a0a0a;\n          border-radius: 3px;\n          box-sizing: border-box;\n          color: #fff;\n          display: inline-block;\n          font-size: 16px;\n          margin: 1.5em 0;\n          width: 280px;\n          padding: 7px 10px;\n          position: relative;\n        }\n        .balloon.bottom::before {\n          border-bottom: 15px solid transparent;\n          border-left: 15px solid transparent;\n          border-right: 15px solid transparent;\n          border-top: 15px solid #0a0a0a;\n          content: \"\";\n          left: 50%;\n          margin-left: -15px;\n          position: absolute;\n          top: 100%;\n        }\n        .balloon.top::before {\n          border-bottom: 15px solid #0a0a0a;\n          border-left: 15px solid transparent;\n          border-right: 15px solid transparent;\n          border-top: 15px solid transparent;\n          content: \"\";\n          left: 50%;\n          margin-left: -15px;\n          margin-top: -30px;\n          position: absolute;\n          top: 0;\n        }\n        @media only screen and (max-height: 400px) and (min-width: 600px) {\n          .balloon {\n            width: 480px;\n          }\n        }\n      </style>\n      <div class=\"balloon ${this.direction}\">\n        <slot></slot>\n      </div>\n    `;\n    }\n}\n__decorate([\n    property({ type: String })\n], AtomBalloon.prototype, \"direction\", void 0);\nwindow.customElements.define('atom-balloon', AtomBalloon);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, property } from 'lit-element';\nimport '@/components/atoms/Balloon';\nclass TemplateHome extends LitElement {\n    constructor() {\n        super();\n        this.active = false;\n        this.initialized = false;\n        setTimeout(this.toggle.bind(this), 600);\n    }\n    firstUpdated() {\n        this.initialized = true;\n    }\n    toggle() {\n        this.active = !this.active;\n        if (this.initialized && !this.active) {\n            this.hired = !this.hired;\n        }\n        else {\n            this.hired = false;\n        }\n        this.requestUpdate();\n    }\n    render() {\n        return html `\n      <style>\n        .portrait {\n          background-color: #eee;\n          border-radius: 50px;\n          cursor: pointer;\n          height: 100px;\n          left: calc(50% - 50px);\n          position: absolute;\n          top: calc(75% - 50px);\n          transform: rotate(0);\n          transition-duration: 0.3s;\n          transition-property: transform;\n          width: 100px;\n        }\n        .portrait[aria-selected=\"true\"] {\n          transform: rotate(10deg);\n        }\n        .balloon {\n          left: calc(50% - 140px);\n          margin-top: 10px;\n          opacity: 0;\n          position: absolute;\n          top: calc(75% - 340px);\n          transition-duration: 0.3s;\n          transition-property: margin-top, opacity;\n        }\n        .balloon[aria-selected=\"true\"] {\n          margin-top: 0;\n          opacity: 1;\n        }\n        .linkedin {\n          background-color: #0077b5;\n          border-radius: 3px;\n          box-sizing: border-box;\n          color: #fff;\n          left: 50%;\n          margin-left: -38px;\n          margin-top: 70px;\n          position: absolute;\n          text-align: center;\n          top: 75%;\n          width: 76px;\n          padding: 3px;\n          font-size: smaller;\n        }\n        .linkedin a:link,\n        .linkedin a:visited {\n          color: #fff;\n          text-decoration: none;\n        }\n        @media only screen and (max-height: 400px) and (min-width: 600px) {\n          .balloon {\n            top: calc(75% - 260px);\n            left: calc(50% - 240px);\n          }\n          .linkedin {\n            margin-left: 60px;\n            margin-top: 20px;\n          }\n        }\n      </style>\n\n      <main>\n        <img\n          aria-selected=\"${this.active ? 'true' : 'false'}\"\n          class=\"portrait\"\n          height=\"100\"\n          src=\"https://www.gravatar.com/avatar/${this.gravatar}?s=200\"\n          width=\"100\"\n          @click=\"${this.toggle}\"\n        >\n        <atom-balloon\n          aria-selected=\"${this.active ? 'true' : 'false'}\"\n          class=\"balloon\"\n          direction=\"bottom\"\n        >\n          <p>Hi, I'm Yu Inao.<br>Currently working as a senior web frontend developer in Tokyo.</p>\n          <p>My passions focus on web UI development, component-based UI design, performant web, web apps, &amp; web standards.</p>\n        </atom-balloon>\n        ${this.hired\n            ? html `\n            <p class=\"linkedin\">\n              <a href=\"https://www.linkedin.com/in/yuinao/\">LinkedIn</a>\n            </p>\n          `\n            : html ``}\n      </main>\n    `;\n    }\n}\n__decorate([\n    property({ type: String })\n], TemplateHome.prototype, \"gravatar\", void 0);\nwindow.customElements.define('template-home', TemplateHome);\n","import { LitElement, html } from 'lit-element';\nimport '@/components/templates/Home';\nexport class PageHome extends LitElement {\n    static get properties() {\n        return {};\n    }\n    constructor() {\n        super();\n    }\n    render() {\n        return html `\n      <template-home gravatar=\"1e4b7d2f20a2ecb20497d9b8704e6107\"></template-home>\n    `;\n    }\n}\nwindow.customElements.define('page-home', PageHome);\n"],"sourceRoot":""}
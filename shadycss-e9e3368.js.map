{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@webcomponents/shadycss/src/unscoped-style-handler.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-util.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-settings.js","webpack:///./node_modules/@webcomponents/shadycss/src/common-regex.js","webpack:///./node_modules/@webcomponents/shadycss/src/css-parse.js","webpack:///./node_modules/@webcomponents/shadycss/src/template-map.js","webpack:///./node_modules/@webcomponents/shadycss/src/common-utils.js","webpack:///./node_modules/@webcomponents/shadycss/src/apply-shim-utils.js","webpack:///./node_modules/@webcomponents/shadycss/src/document-wait.js","webpack:///./node_modules/@webcomponents/shadycss/src/custom-style-interface.js","webpack:///./node_modules/@webcomponents/shadycss/entrypoints/custom-style-interface.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-transformer.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-info.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-properties.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-placeholder.js","webpack:///./node_modules/@webcomponents/shadycss/src/document-watcher.js","webpack:///./node_modules/@webcomponents/shadycss/src/scoping-shim.js","webpack:///./node_modules/@webcomponents/shadycss/src/style-cache.js","webpack:///./node_modules/@webcomponents/shadycss/entrypoints/scoping-shim.js","webpack:///./node_modules/@webcomponents/shadycss/src/apply-shim.js","webpack:///./node_modules/@webcomponents/shadycss/entrypoints/apply-shim.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","styleTextSet","Set","scopingAttribute","processUnscopedStyle","style","text","textContent","has","add","newStyle","cloneNode","document","head","appendChild","isUnscopedStyle","hasAttribute","toCssText","rules","callback","css_parse","forEachRule","style_settings","rulesForStyle","isKeyframesSelector","rule","Boolean","KEYFRAMES_RULE","node","styleRuleCallback","keyframesRuleCallback","onlyActiveRules","skipRules","type","MEDIA_RULE","matchMedia","match","common_regex","window","matches","STYLE_RULE","MIXIN_RULE","r$","length","applyCss","cssText","moniker","target","contextNode","createElement","setAttribute","createScopeStyle","applyStyle","__webpack_exports__","applyStylePlaceHolder","findMatchingParen","processVariableAndFallback","setElementClassRaw","wrap","getIsExtends","gatherStyleText","splitSelectorList","getCssBuild","elementHasBuiltCss","isOptimalCssBuild","lastHeadApplyNode","placeHolder","createComment","after","scope","insertBefore","firstChild","nextSibling","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","start","level","str","indexOf","end","inner","substring","prefix","suffix","comma","trim","element","localName","is","typeExtension","getAttribute","extends","styleTextParts","styles","querySelectorAll","parentNode","removeChild","push","join","selector","parts","part","slice","CSS_BUILD_ATTR","undefined","__cssBuild","attrValue","buildComment","content","Comment","commentParts","split","getBuildComment","removeBuildComment","cssBuild","nativeShadow","disableRuntime","nativeCssVariables","nativeCssVariables_","calcCssVariables","settings","navigator","userAgent","CSS","supports","ShadyCSS","nativeCss","VAR_ASSIGN","MIXIN_MATCH","VAR_CONSUMED","ANIMATION_MATCH","MEDIA_MATCH","BRACKETED","HOST_PREFIX","HOST_SUFFIX","StyleNode","parse","stringify","removeCustomPropAssignment","types","[object Object]","this","parseCss","ss","replace","code","arguments","repeat","_expandUnicodeEscapes","RX","multipleSpaces","lastIndexOf","AT_START","MEDIA_START","keyframesRule","pop","VAR_START","root","OPEN_BRACE","previous","CLOSE_BRACE","lex","comments","port","preserveProperties","_hasMixinRules","mixinApply","varApply","removeCustomPropApply","removeCustomProps","customProp","mixinProp","updateNativeProperties","getComputedStyleValue","detectMixin","_common_regex_js__WEBPACK_IMPORTED_MODULE_0__","properties","removeProperty","setProperty","getComputedStyle","getPropertyValue","test","lastIndex","invalidate","templateIsValid","templateIsValidating","startValidatingTemplate","_template_map_js__WEBPACK_IMPORTED_MODULE_0__","CURRENT_VERSION","NEXT_VERSION","VALIDATING_VERSION","promise","Promise","resolve","elementName","template","invalidateTemplate","_validating","then","resolveFn","readyPromise","whenReady","documentWait","requestAnimationFrame","readyState","addEventListener","custom_style_interface_CustomStyleInterface","SEEN_MARKER","CACHED_STYLE","transformFn","validateFn","enqueueDocumentValidation","customStyle","cs","getStyleForCustomStyle","styleToTransform","addCustomStyle","processStyles","defineProperties","transformCallback","fn","validateCallback","needsEnqueue","_src_custom_style_interface_js__WEBPACK_IMPORTED_MODULE_0__","_src_common_utils_js__WEBPACK_IMPORTED_MODULE_1__","_src_style_settings_js__WEBPACK_IMPORTED_MODULE_2__","customStyleInterface","elementExtends","body","CustomStyleInterface","SCOPE_NAME","NTH","SCOPE_DOC_SELECTOR","COMPLEX_SELECTOR_SEP","SIMPLE_SELECTOR_SEP","SIMPLE_SELECTOR_PREFIX","HOST","ROOT","SLOTTED","SLOTTED_START","RegExp","HOST_PAREN","SLOTTED_PAREN","DIR_PAREN","CSS_CLASS_PREFIX","PSEUDO_PREFIX","CLASS","SELECTOR_NO_MATCH","MATCHES","MATCHES_REPLACEMENT","style_transformer","shouldRemoveScope","_transformDom","startNode","transformer","c$","nodeType","ELEMENT_NODE","_content","childNodes","children","classList","remove","newValue","style_util","oldScope","newScope","styleRules","css","ext","hostScope","_calcHostScope","_calcElementScope","self","isScoped","_transformRule","_transformComplexSelector","transformedSelector","_transformRuleCss","p$","filter","inside","index","Error","input","reduce","acc","cur","idx","stop","isNth","_twiddleNthPlus","isMatches","_preserveMatchesPseudo","info","_transformCompoundSelector","combinator","_replaceMatchesPseudo","before","dir","slottedIndex","_transformHostSelector","_transformSimpleSelector","slotted","paren","attributes","output","host","normalizeRootSelector","_transformDocumentSelector","infoKey","StyleInfo","styleInfo","ast","placeholder","ownStylePropertyNames","overrideStyleProperties","styleProperties","scopeSelector","_getStyleRules","matchesSelector","method","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","IS_IE","XSCOPE_NAME","style_properties","props","keyframes","ruleIndex","decorateRule","collectPropertiesInCssText","propertyInfo","_keyframes","names","collectProperties","collectCssText","any","rx","exec","assign","collectConsumingCssText","getOwnPropertyNames","valueForProperty","valueForProperties","fallback","propertyValue","colon","pp","keyframeTransforms","hasAnimations","transform","keyframeNamesToTransform","keyframe","selectorToMatch","bits","parseInt","v","addToBitMask","parsedSelector","isRoot","isHost","hostProps","rootProps","whenHostOrRootRule","_element","hostSelector","rxHostSelector","hostRx","_elementKeyframeTransforms","elementStyles","applyProperties","applyKeyframeTransforms","_scopeSelector","keyframesRules","_scopeKeyframes","_keyframesRuleTransformer","keyframesNameRx","transformedKeyframesName","scopeId","old","transformStyles","shadowRoot","placeholderMap","getStylePlaceholder","ensureStylePlaceholder","ce","origDefine","wrappedDefine","clazz","options","flush","scopeRegExp","getCurrentScope","getClasses","getOwnerScope","ownerRoot","getRootNode","ownerDocument","ensureCorrectSubtreeScoping","unscopedNodes","j","unscopedNode","scopeForPreviouslyUnscopedNode","handler","mxns","x","mxn","documentElement","addedNodes","currentScope","el","domRemoveScope","ShadowRoot","domReplaceScope","observer","MutationObserver","observe","childList","subtree","delayedStart","listener","removeEventListener","takeRecords","adoptedCssTextMap","styleCache","typeMax","cache","cacheEntry","ownPropertyNames","pn","tagname","styleElement","list","shift","entry","_validate","scoping_shim_ScopingShim","_scopeCounter","_documentOwner","_documentOwnerStyleInfo","set","_elementsHaveApplied","_applyShim","_customStyleInterface","prepareTemplateDom","prepareTemplateStyles","_prepared","template_map","optimalBuild","_gatherStyles","_ensure","hasMixins","common_utils","decorateStyles","_generateStaticStyle","_style","_ownPropertyNames","cssTextArray","_domPrepared","domAddScope","shadowroot","ApplyShim","apply_shim_utils","transformCustomStyleForDocument","flushCustomStyles","_ensureApplyShim","_ensureCustomStyleInterface","customStyles","_revalidateCustomStyleApplyShim","_updateProperties","_applyCustomStyles","styleDocument","overrideProps","_mixOverrideStyleProps","styleElementNativeVariables","_prepareHost","_isRootOwner","styleElementShimVariables","_applyStyleProperties","querySelector","_styleOwnerForNode","fetch","cachedScopeSelector","cachedStyle","oldScopeSelector","_generateScopeSelector","applyElementStyle","applyElementScopeSelector","store","owner","ownerStyleInfo","ownerProperties","hostAndRootProps","hostAndRootPropertiesForScope","propertiesMatchingHost","propertyDataFromStyles","_mixinOverrideStyles","reify","overrides","styleSubtree","wrappedHost","shadowChildren","_revalidateApplyShim","applyCustomStyle","documentRule","classString","classes","scopeName","classAttr","k$","prepareTemplate","setElementClass","_styleInfoForNode","getStyleAst","styleAstToString","scopeNode","unscopeNode","scopeForNode","currentScopeForNode","prepareAdoptedCssText","scopingShim","ScopingShim","APPLY_NAME_CLEAN","INITIAL_INHERIT","IMPORTANT","MIXIN_VAR_SEP","MixinMap","_map","dependants","invalidCallback","apply_shim_ApplyShim","_currentElement","_measureElement","styleText","_gatheredStyle","gatherStyles","transformStyle","transformRules","transformRule","transformCssText","matchText","propertyName","valueProperty","valueMixin","_produceCssProperties","_consumeCssProperties","all","startRule","topRule","fallbacks","seenStartRule","_cssTextToMap","mixinName","applyPos","afterApplyPos","textBeforeApply","textAfterApply","defaults","_fallbacksFromPreviousRules","replacement","_atApplyToCssProperties","vars","mixinEntry","f","_getInitialValueForProperty","replaceInitialOrInherit","out","sp","_replaceInitialOrInherit","mixinAsProperties","mixinValues","combinedProps","oldProps","needToInvalidate","_invalidateMixinEntry","transformCustomStyle","transformTemplate","cb","apply_shim","applyShim","apply_shim_ApplyShimInterface","ensure","applyShimInterface"],"mappings":"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","file":"shadycss-e9e3368.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {!Set<string>} */\nconst styleTextSet = new Set();\n\nexport const scopingAttribute = 'shady-unscoped';\n\n/**\n * Add a specifically-marked style to the document directly, and only one copy of that style.\n *\n * @param {!HTMLStyleElement} style\n * @return {undefined}\n */\nexport function processUnscopedStyle(style) {\n  const text = style.textContent;\n  if (!styleTextSet.has(text)) {\n    styleTextSet.add(text);\n    const newStyle = style.cloneNode(true);\n    document.head.appendChild(newStyle);\n  }\n}\n\n/**\n * Check if a style is supposed to be unscoped\n * @param {!HTMLStyleElement} style\n * @return {boolean} true if the style has the unscoping attribute\n */\nexport function isUnscopedStyle(style) {\n  return style.hasAttribute(scopingAttribute);\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables, cssBuild} from './style-settings.js';\nimport {parse, stringify, types, StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport {MEDIA_MATCH} from './common-regex.js';\nimport {processUnscopedStyle, isUnscopedStyle} from './unscoped-style-handler.js';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n * @return {string}\n */\nexport function toCssText (rules, callback) {\n  if (!rules) {\n    return '';\n  }\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'] || null;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) &&\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  applyStyle(style, target, contextNode);\n  return style;\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {HTMLStyleElement}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = /** @type {HTMLStyleElement} */(document.createElement('style'));\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/**\n * Track the position of the last added style for placing placeholders\n * @type {Node}\n */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {!Comment}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @param {?Node} target\n * @param {?Node} contextNode\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n    target.firstChild;\n  target.insertBefore(style, after);\n  if (!lastHeadApplyNode) {\n    lastHeadApplyNode = style;\n  } else {\n    // only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode\n    let position = style.compareDocumentPosition(lastHeadApplyNode);\n    if (position === Node.DOCUMENT_POSITION_PRECEDING) {\n      lastHeadApplyNode = style;\n    }\n  }\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nexport function findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (nativeShadow) {\n    element.setAttribute('class', value);\n  } else {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  }\n}\n\n/**\n * @type {function(*):*}\n */\nexport const wrap = window['ShadyDOM'] && window['ShadyDOM']['wrap'] || ((node) => node);\n\n/**\n * @param {Element | {is: string, extends: string}} element\n * @return {{is: string, typeExtension: string}}\n */\nexport function getIsExtends(element) {\n  let localName = element['localName'];\n  let is = '', typeExtension = '';\n  /*\n  NOTE: technically, this can be wrong for certain svg elements\n  with `-` in the name like `<font-face>`\n  */\n  if (localName) {\n    if (localName.indexOf('-') > -1) {\n      is = localName;\n    } else {\n      typeExtension = localName;\n      is = (element.getAttribute && element.getAttribute('is')) || '';\n    }\n  } else {\n    is = /** @type {?} */(element).is;\n    typeExtension = /** @type {?} */(element).extends;\n  }\n  return {is, typeExtension};\n}\n\n/**\n * @param {Element|DocumentFragment} element\n * @return {string}\n */\nexport function gatherStyleText(element) {\n  /** @type {!Array<string>} */\n  const styleTextParts = [];\n  const styles = /** @type {!NodeList<!HTMLStyleElement>} */(element.querySelectorAll('style'));\n  for (let i = 0; i < styles.length; i++) {\n    const style = styles[i];\n    if (isUnscopedStyle(style)) {\n      if (!nativeShadow) {\n        processUnscopedStyle(style);\n        style.parentNode.removeChild(style);\n      }\n    } else {\n      styleTextParts.push(style.textContent);\n      style.parentNode.removeChild(style);\n    }\n  }\n  return styleTextParts.join('').trim();\n}\n\n/**\n * Split a selector separated by commas into an array in a smart way\n * @param {string} selector\n * @return {!Array<string>}\n */\nexport function splitSelectorList(selector) {\n  const parts = [];\n  let part = '';\n  for (let i = 0; i >= 0 && i < selector.length; i++) {\n    // A selector with parentheses will be one complete part\n    if (selector[i] === '(') {\n      // find the matching paren\n      const end = findMatchingParen(selector, i);\n      // push the paren block into the part\n      part += selector.slice(i, end + 1);\n      // move the index to after the paren block\n      i = end;\n    } else if (selector[i] === ',') {\n      parts.push(part);\n      part = '';\n    } else {\n      part += selector[i];\n    }\n  }\n  // catch any pieces after the last comma\n  if (part) {\n    parts.push(part);\n  }\n  return parts;\n}\n\nconst CSS_BUILD_ATTR = 'css-build';\n\n/**\n * Return the polymer-css-build \"build type\" applied to this element\n *\n * @param {!HTMLElement} element\n * @return {string} Can be \"\", \"shady\", or \"shadow\"\n */\nexport function getCssBuild(element) {\n  if (cssBuild !== undefined) {\n    return /** @type {string} */(cssBuild);\n  }\n  if (element.__cssBuild === undefined) {\n    // try attribute first, as it is the common case\n    const attrValue = element.getAttribute(CSS_BUILD_ATTR);\n    if (attrValue) {\n      element.__cssBuild = attrValue;\n    } else {\n      const buildComment = getBuildComment(element);\n      if (buildComment !== '') {\n        // remove build comment so it is not needlessly copied into every element instance\n        removeBuildComment(element);\n      }\n      element.__cssBuild = buildComment;\n    }\n  }\n  return element.__cssBuild || '';\n}\n\n/**\n * Check if the given element, either a <template> or <style>, has been processed\n * by polymer-css-build.\n *\n * If so, then we can make a number of optimizations:\n * - polymer-css-build will decompose mixins into individual CSS Custom Properties,\n * so the ApplyShim can be skipped entirely.\n * - Under native ShadowDOM, the style text can just be copied into each instance\n * without modification\n * - If the build is \"shady\" and ShadyDOM is in use, the styling does not need\n * scoping beyond the shimming of CSS Custom Properties\n *\n * @param {!HTMLElement} element\n * @return {boolean}\n */\nexport function elementHasBuiltCss(element) {\n  return getCssBuild(element) !== '';\n}\n\n/**\n * For templates made with tagged template literals, polymer-css-build will\n * insert a comment of the form `<!--css-build:shadow-->`\n *\n * @param {!HTMLElement} element\n * @return {string}\n */\nexport function getBuildComment(element) {\n  const buildComment = element.localName === 'template' ?\n      /** @type {!HTMLTemplateElement} */ (element).content.firstChild :\n      element.firstChild;\n  if (buildComment instanceof Comment) {\n    const commentParts = buildComment.textContent.trim().split(':');\n    if (commentParts[0] === CSS_BUILD_ATTR) {\n      return commentParts[1];\n    }\n  }\n  return '';\n}\n\n/**\n * Check if the css build status is optimal, and do no unneeded work.\n *\n * @param {string=} cssBuild CSS build status\n * @return {boolean} css build is optimal or not\n */\nexport function isOptimalCssBuild(cssBuild = '') {\n  // CSS custom property shim always requires work\n  if (cssBuild === '' || !nativeCssVariables) {\n    return false;\n  }\n  return nativeShadow ? cssBuild === 'shadow' : cssBuild === 'shady';\n}\n\n/**\n * @param {!HTMLElement} element\n */\nfunction removeBuildComment(element) {\n  const buildComment = element.localName === 'template' ?\n      /** @type {!HTMLTemplateElement} */ (element).content.firstChild :\n      element.firstChild;\n  buildComment.parentNode.removeChild(buildComment);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport const nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\nlet nativeCssVariables_;\n\n/**\n * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings\n */\nfunction calcCssVariables(settings) {\n  if (settings && settings['shimcssproperties']) {\n    nativeCssVariables_ = false;\n  } else {\n    // chrome 49 has semi-working css vars, check if box-shadow works\n    // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\n    // However, shim css custom properties are only supported with ShadyDOM enabled,\n    // so fall back on native if we do not detect ShadyDOM\n    // Edge 15: custom properties used in ::before and ::after will also be used in the parent element\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/\n    nativeCssVariables_ = nativeShadow || Boolean(!navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/) &&\n      window.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n  }\n}\n\n/** @type {string | undefined} */\nexport let cssBuild;\nif (window.ShadyCSS && window.ShadyCSS.cssBuild !== undefined) {\n  cssBuild = window.ShadyCSS.cssBuild;\n}\n\n/** @type {boolean} */\nexport const disableRuntime = Boolean(window.ShadyCSS && window.ShadyCSS.disableRuntime);\n\nif (window.ShadyCSS && window.ShadyCSS.nativeCss !== undefined) {\n  nativeCssVariables_ = window.ShadyCSS.nativeCss;\n} else if (window.ShadyCSS) {\n  calcCssVariables(window.ShadyCSS);\n  // reset window variable to let ShadyCSS API take its place\n  window.ShadyCSS = undefined;\n} else {\n  calcCssVariables(window['WebComponents'] && window['WebComponents']['flags']);\n}\n\n// Hack for type error under new type inference which doesn't like that\n// nativeCssVariables is updated in a function and assigns the type\n// `function(): ?` instead of `boolean`.\nexport const nativeCssVariables = /** @type {boolean} */(nativeCssVariables_);","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi;\nexport const MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\nexport const VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\nexport const ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\nexport const MEDIA_MATCH = /@media\\s(.*)/;\nexport const IS_VAR = /^--/;\nexport const BRACKETED = /\\{[^}]*\\}/g;\nexport const HOST_PREFIX = '(?:^|[^.#[:])';\nexport const HOST_SUFFIX = '($|[.:[\\\\s>+~])';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n/** @unrestricted */\nclass StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\nexport {StyleNode}\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node['parsedSelector'] = node['selector'] = t.trim();\n    node['atRule'] = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] =\n          node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nexport function stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node['cssText'] :\n        removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nexport const types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @const {!Object<string, !HTMLTemplateElement>}\n */\nconst templateMap = {};\nexport default templateMap;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport { MIXIN_MATCH, VAR_ASSIGN } from './common-regex.js';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  /**\n   * @const {string}\n   */\n  const value = window.getComputedStyle(element).getPropertyValue(property);\n  if (!value) {\n    return '';\n  } else {\n    return value.trim();\n  }\n}\n\n/**\n * return true if `cssText` contains a mixin definition or consumption\n * @param {string} cssText\n * @return {boolean}\n */\nexport function detectMixin(cssText) {\n  const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n  // reset state of the regexes\n  MIXIN_MATCH.lastIndex = 0;\n  VAR_ASSIGN.lastIndex = 0;\n  return has;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\nimport templateMap from './template-map.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\n/*\n * Utilities for handling invalidating apply-shim mixins for a given template.\n *\n * The invalidation strategy involves keeping track of the \"current\" version of a template's mixins, and updating that count when a mixin is invalidated.\n * The template\n */\n\n/** @const {string} */\nconst CURRENT_VERSION = '_applyShimCurrentVersion';\n\n/** @const {string} */\nconst NEXT_VERSION = '_applyShimNextVersion';\n\n/** @const {string} */\nconst VALIDATING_VERSION = '_applyShimValidatingVersion';\n\n/**\n * @const {Promise<void>}\n */\nconst promise = Promise.resolve();\n\n/**\n * @param {string} elementName\n */\nexport function invalidate(elementName){\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\n/**\n * This function can be called multiple times to mark a template invalid\n * and signal that the style inside must be regenerated.\n *\n * Use `startValidatingTemplate` to begin an asynchronous validation cycle.\n * During that cycle, call `templateIsValidating` to see if the template must\n * be revalidated\n * @param {HTMLTemplateElement} template\n */\nexport function invalidateTemplate(template) {\n  // default the current version to 0\n  template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;\n  // ensure the \"validating for\" flag exists\n  template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;\n  // increment the next version\n  template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValid(template) {\n  return template[CURRENT_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\n/**\n * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.\n * If false, the template must be validated.\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValidating(template) {\n  return !templateIsValid(template) && template[VALIDATING_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * the template is marked as `validating` for one microtask so that all instances\n * found in the tree crawl of `applyStyle` will update themselves,\n * but the template will only be updated once.\n * @param {string} elementName\n*/\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\n/**\n * Begin an asynchronous invalidation cycle.\n * This should be called after every validation of a template\n *\n * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`\n * @param {HTMLTemplateElement} template\n */\nexport function startValidatingTemplate(template) {\n  // remember that the current \"next version\" is the reason for this validation cycle\n  template[VALIDATING_VERSION] = template[NEXT_VERSION];\n  // however, there only needs to be one async task to clear the counters\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function() {\n      // sync the current version to let future invalidations cause a refresh cycle\n      template[CURRENT_VERSION] = template[NEXT_VERSION];\n      template._validating = false;\n    });\n  }\n}\n\n/**\n * @return {boolean}\n */\nexport function elementsAreInvalid() {\n  for (let elementName in templateMap) {\n    let template = templateMap[elementName];\n    if (!templateIsValid(template)) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {Promise<void>} */\nlet readyPromise = null;\n\n/** @type {?function(?function())} */\nlet whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;\n\n/** @type {function()} */\nlet resolveFn;\n\n/**\n * @param {?function()} callback\n */\nexport default function documentWait(callback) {\n  requestAnimationFrame(function() {\n    if (whenReady) {\n      whenReady(callback)\n    } else {\n      if (!readyPromise) {\n        readyPromise = new Promise((resolve) => {resolveFn = resolve});\n        if (document.readyState === 'complete') {\n          resolveFn();\n        } else {\n          document.addEventListener('readystatechange', () => {\n            if (document.readyState === 'complete') {\n              resolveFn();\n            }\n          });\n        }\n      }\n      readyPromise.then(function(){ callback && callback(); });\n    }\n  });\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport documentWait from './document-wait.js';\n\n/**\n * @typedef {HTMLStyleElement | {getStyle: function():HTMLStyleElement}}\n */\nexport let CustomStyleProvider;\n\nconst SEEN_MARKER = '__seenByShadyCSS';\nconst CACHED_STYLE = '__shadyCSSCachedStyle';\n\n/** @type {?function(!HTMLStyleElement)} */\nlet transformFn = null;\n\n/** @type {?function()} */\nlet validateFn = null;\n\n/**\nThis interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`\n\n@unrestricted\n*/\nexport default class CustomStyleInterface {\n  constructor() {\n    /** @type {!Array<!CustomStyleProvider>} */\n    this['customStyles'] = [];\n    this['enqueued'] = false;\n    // NOTE(dfreedm): use quotes here to prevent closure inlining to `function(){}`;\n    documentWait(() => {\n      if (window['ShadyCSS']['flushCustomStyles']) {\n        window['ShadyCSS']['flushCustomStyles']();\n      }\n    })\n  }\n  /**\n   * Queue a validation for new custom styles to batch style recalculations\n   */\n  enqueueDocumentValidation() {\n    if (this['enqueued'] || !validateFn) {\n      return;\n    }\n    this['enqueued'] = true;\n    documentWait(validateFn);\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  addCustomStyle(style) {\n    if (!style[SEEN_MARKER]) {\n      style[SEEN_MARKER] = true;\n      this['customStyles'].push(style);\n      this.enqueueDocumentValidation();\n    }\n  }\n  /**\n   * @param {!CustomStyleProvider} customStyle\n   * @return {HTMLStyleElement}\n   */\n  getStyleForCustomStyle(customStyle) {\n    if (customStyle[CACHED_STYLE]) {\n      return customStyle[CACHED_STYLE];\n    }\n    let style;\n    if (customStyle['getStyle']) {\n      style = customStyle['getStyle']();\n    } else {\n      style = customStyle;\n    }\n    return style;\n  }\n  /**\n   * @return {!Array<!CustomStyleProvider>}\n   */\n  processStyles() {\n    const cs = this['customStyles'];\n    for (let i = 0; i < cs.length; i++) {\n      const customStyle = cs[i];\n      if (customStyle[CACHED_STYLE]) {\n        continue;\n      }\n      const style = this.getStyleForCustomStyle(customStyle);\n      if (style) {\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        const styleToTransform = /** @type {!HTMLStyleElement} */(style['__appliedElement'] || style);\n        if (transformFn) {\n          transformFn(styleToTransform);\n        }\n        customStyle[CACHED_STYLE] = styleToTransform;\n      }\n    }\n    return cs;\n  }\n}\n\n/* eslint-disable no-self-assign */\nCustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;\nCustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;\nCustomStyleInterface.prototype['processStyles'] = CustomStyleInterface.prototype.processStyles;\n/* eslint-enable no-self-assign */\n\nObject.defineProperties(CustomStyleInterface.prototype, {\n  'transformCallback': {\n    /** @return {?function(!HTMLStyleElement)} */\n    get() {\n      return transformFn;\n    },\n    /** @param {?function(!HTMLStyleElement)} fn */\n    set(fn) {\n      transformFn = fn;\n    }\n  },\n  'validateCallback': {\n    /** @return {?function()} */\n    get() {\n      return validateFn;\n    },\n    /**\n     * @param {?function()} fn\n     * @this {CustomStyleInterface}\n     */\n    set(fn) {\n      let needsEnqueue = false;\n      if (!validateFn) {\n        needsEnqueue = true;\n      }\n      validateFn = fn;\n      if (needsEnqueue) {\n        this.enqueueDocumentValidation();\n      }\n    },\n  }\n})\n\n/** @typedef {{\n * customStyles: !Array<!CustomStyleProvider>,\n * addCustomStyle: function(!CustomStyleProvider),\n * getStyleForCustomStyle: function(!CustomStyleProvider): HTMLStyleElement,\n * findStyles: function(),\n * transformCallback: ?function(!HTMLStyleElement),\n * validateCallback: ?function()\n * }}\n */\nexport const CustomStyleInterfaceInterface = {};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport CustomStyleInterface from '../src/custom-style-interface.js';\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js';\nimport {nativeCssVariables, nativeShadow, cssBuild, disableRuntime} from '../src/style-settings.js';\n\nconst customStyleInterface = new CustomStyleInterface();\n\nif (!window.ShadyCSS) {\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplate(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n    prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplateStyles(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {Element} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      customStyleInterface.processStyles();\n      updateNativeProperties(element, properties);\n    },\n\n    /**\n     * @param {Element} element\n     */\n    styleElement(element) { // eslint-disable-line no-unused-vars\n      customStyleInterface.processStyles();\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      customStyleInterface.processStyles();\n      updateNativeProperties(document.body, properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n\n    flushCustomStyles() {},\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    cssBuild: cssBuild,\n    disableRuntime: disableRuntime,\n  }\n}\n\nwindow.ShadyCSS.CustomStyleInterface = customStyleInterface;","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport * as StyleUtil from './style-util.js';\nimport {nativeShadow} from './style-settings.js';\n\n/* Transforms ShadowDOM styling into ShadyDOM styling\n\n* scoping:\n\n  * elements in scope get scoping selector class=\"x-foo-scope\"\n  * selectors re-written as follows:\n\n    div button -> div.x-foo-scope button.x-foo-scope\n\n* :host -> scopeName\n\n* :host(...) -> scopeName...\n\n* ::slotted(...) -> scopeName > ...\n\n* ...:dir(ltr|rtl) -> [dir=\"ltr|rtl\"] ..., ...[dir=\"ltr|rtl\"]\n\n* :host(:dir[rtl]) -> scopeName:dir(rtl) -> [dir=\"rtl\"] scopeName, scopeName[dir=\"rtl\"]\n\n*/\nconst SCOPE_NAME = 'style-scope';\n\nclass StyleTransformer {\n  get SCOPE_NAME() {\n    return SCOPE_NAME;\n  }\n  /**\n   * Given a node and scope name, add a scoping class to each node\n   * in the tree. This facilitates transforming css into scoped rules.\n   * @param {!Node} node\n   * @param {string} scope\n   * @param {boolean=} shouldRemoveScope\n   * @deprecated\n   */\n  dom(node, scope, shouldRemoveScope) {\n    const fn = (node) => {\n      this.element(node, scope || '', shouldRemoveScope);\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * Given a node and scope name, add a scoping class to each node in the tree.\n   * @param {!Node} node\n   * @param {string} scope\n   */\n  domAddScope(node, scope) {\n    const fn = (node) => {\n      this.element(node, scope || '');\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * @param {!Node} startNode\n   * @param {!function(!Node)} transformer\n   */\n  _transformDom(startNode, transformer) {\n    if (startNode.nodeType === Node.ELEMENT_NODE) {\n      transformer(startNode)\n    }\n    let c$;\n    if (startNode.localName === 'template') {\n      const template = /** @type {!HTMLTemplateElement} */ (startNode);\n      // In case the template is in svg context, fall back to the node\n      // since it won't be an HTMLTemplateElement with a .content property\n      c$ = (template.content || template._content || template).childNodes;\n    } else {\n      c$ = /** @type {!ParentNode} */ (startNode).children ||\n          startNode.childNodes;\n    }\n    if (c$) {\n      for (let i = 0; i < c$.length; i++) {\n        this._transformDom(c$[i], transformer);\n      }\n    }\n  }\n\n  /**\n   * @param {?} element\n   * @param {?} scope\n   * @param {?=} shouldRemoveScope\n   */\n  element(element, scope, shouldRemoveScope) {\n    // note: if using classes, we add both the general 'style-scope' class\n    // as well as the specific scope. This enables easy filtering of all\n    // `style-scope` elements\n    if (scope) {\n      // note: svg on IE does not have classList so fallback to class\n      if (element.classList) {\n        if (shouldRemoveScope) {\n          element.classList.remove(SCOPE_NAME);\n          element.classList.remove(scope);\n        } else {\n          element.classList.add(SCOPE_NAME);\n          element.classList.add(scope);\n        }\n      } else if (element.getAttribute) {\n        let c = element.getAttribute(CLASS);\n        if (shouldRemoveScope) {\n          if (c) {\n            let newValue = c.replace(SCOPE_NAME, '').replace(scope, '');\n            StyleUtil.setElementClassRaw(element, newValue);\n          }\n        } else {\n          let newValue = (c ? c + ' ' : '') + SCOPE_NAME + ' ' + scope;\n          StyleUtil.setElementClassRaw(element, newValue);\n        }\n      }\n    }\n  }\n\n  /**\n   * Given a node, replace the scoping class to each subnode in the tree.\n   * @param {!Node} node\n   * @param {string} oldScope\n   * @param {string} newScope\n   */\n  domReplaceScope(node, oldScope, newScope) {\n    const fn = (node) => {\n      this.element(node, oldScope, true);\n      this.element(node, newScope);\n    };\n    this._transformDom(node, fn);\n  }\n  /**\n   * Given a node, remove the scoping class to each subnode in the tree.\n   * @param {!Node} node\n   * @param {string} oldScope\n   */\n  domRemoveScope(node, oldScope) {\n    const fn = (node) => {\n      this.element(node, oldScope || '', true);\n    };\n    this._transformDom(node, fn);\n  }\n\n  /**\n   * @param {?} element\n   * @param {?} styleRules\n   * @param {?=} callback\n   * @param {string=} cssBuild\n   * @param {string=} cssText\n   * @return {string}\n   */\n  elementStyles(element, styleRules, callback, cssBuild = '', cssText = '') {\n    // no need to shim selectors if settings.useNativeShadow, also\n    // a shady css build will already have transformed selectors\n    // NOTE: This method may be called as part of static or property shimming.\n    // When there is a targeted build it will not be called for static shimming,\n    // but when the property shim is used it is called and should opt out of\n    // static shimming work when a proper build exists.\n    if (cssText === '') {\n      if (nativeShadow || cssBuild === 'shady') {\n        cssText = StyleUtil.toCssText(styleRules, callback);\n      } else {\n        let {is, typeExtension} = StyleUtil.getIsExtends(element);\n        cssText = this.css(styleRules, is, typeExtension, callback) + '\\n\\n';\n      }\n    }\n    return cssText.trim();\n  }\n\n  // Given a string of cssText and a scoping string (scope), returns\n  // a string of scoped css where each selector is transformed to include\n  // a class created from the scope. ShadowDOM selectors are also transformed\n  // (e.g. :host) to use the scoping selector.\n  css(rules, scope, ext, callback) {\n    let hostScope = this._calcHostScope(scope, ext);\n    scope = this._calcElementScope(scope);\n    let self = this;\n    return StyleUtil.toCssText(rules, function(/** StyleNode */rule) {\n      if (!rule.isScoped) {\n        self.rule(rule, scope, hostScope);\n        rule.isScoped = true;\n      }\n      if (callback) {\n        callback(rule, scope, hostScope);\n      }\n    });\n  }\n\n  _calcElementScope(scope) {\n    if (scope) {\n      return CSS_CLASS_PREFIX + scope;\n    } else {\n      return '';\n    }\n  }\n\n  _calcHostScope(scope, ext) {\n    return ext ? `[is=${scope}]` : scope;\n  }\n\n  rule(rule, scope, hostScope) {\n    this._transformRule(rule, this._transformComplexSelector,\n      scope, hostScope);\n  }\n\n  /**\n   * transforms a css rule to a scoped rule.\n   *\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRule(rule, transformer, scope, hostScope) {\n    // NOTE: save transformedSelector for subsequent matching of elements\n    // against selectors (e.g. when calculating style properties)\n    rule['selector'] = rule.transformedSelector =\n      this._transformRuleCss(rule, transformer, scope, hostScope);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   * @param {Function} transformer\n   * @param {string=} scope\n   * @param {string=} hostScope\n   */\n  _transformRuleCss(rule, transformer, scope, hostScope) {\n    let p$ = StyleUtil.splitSelectorList(rule['selector']);\n    // we want to skip transformation of rules that appear in keyframes,\n    // because they are keyframe selectors, not element selectors.\n    if (!StyleUtil.isKeyframesSelector(rule)) {\n      for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n        p$[i] = transformer.call(this, p, scope, hostScope);\n      }\n    }\n    return p$.filter((part) => Boolean(part)).join(COMPLEX_SELECTOR_SEP);\n  }\n\n  /**\n   * @param {string} selector\n   * @return {string}\n   */\n  _twiddleNthPlus(selector) {\n    return selector.replace(NTH, (m, type, inside) => {\n      if (inside.indexOf('+') > -1) {\n        inside = inside.replace(/\\+/g, '___');\n      } else if (inside.indexOf('___') > -1) {\n        inside = inside.replace(/___/g, '+');\n      }\n      return `:${type}(${inside})`;\n    });\n  }\n\n  /**\n   * Preserve `:matches()` selectors by replacing them with MATCHES_REPLACMENT\n   * and returning an array of `:matches()` selectors.\n   * Use `_replacesMatchesPseudo` to replace the `:matches()` parts\n   *\n   * @param {string} selector\n   * @return {{selector: string, matches: !Array<string>}}\n   */\n  _preserveMatchesPseudo(selector) {\n    /** @type {!Array<string>} */\n    const matches = [];\n    let match;\n    while ((match = selector.match(MATCHES))) {\n      const start = match.index;\n      const end = StyleUtil.findMatchingParen(selector, start);\n      if (end === -1) {\n        throw new Error(`${match.input} selector missing ')'`)\n      }\n      const part = selector.slice(start, end + 1);\n      selector = selector.replace(part, MATCHES_REPLACEMENT);\n      matches.push(part);\n    }\n    return {selector, matches};\n  }\n\n  /**\n   * Replace MATCHES_REPLACMENT character with the given set of `:matches()`\n   * selectors.\n   *\n   * @param {string} selector\n   * @param {!Array<string>} matches\n   * @return {string}\n   */\n  _replaceMatchesPseudo(selector, matches) {\n    const parts = selector.split(MATCHES_REPLACEMENT);\n    return matches.reduce((acc, cur, idx) => acc + cur + parts[idx + 1], parts[0]);\n  }\n\n/**\n * @param {string} selector\n * @param {string} scope\n * @param {string=} hostScope\n */\n  _transformComplexSelector(selector, scope, hostScope) {\n    let stop = false;\n    selector = selector.trim();\n    // Remove spaces inside of selectors like `:nth-of-type` because it confuses SIMPLE_SELECTOR_SEP\n    let isNth = NTH.test(selector);\n    if (isNth) {\n      selector = selector.replace(NTH, (m, type, inner) => `:${type}(${inner.replace(/\\s/g, '')})`)\n      selector = this._twiddleNthPlus(selector);\n    }\n    // Preserve selectors like `:-webkit-any` so that SIMPLE_SELECTOR_SEP does\n    // not get confused by spaces inside the pseudo selector\n    const isMatches = MATCHES.test(selector);\n    /** @type {!Array<string>} */\n    let matches;\n    if (isMatches) {\n      ({selector, matches} = this._preserveMatchesPseudo(selector));\n    }\n    selector = selector.replace(SLOTTED_START, `${HOST} $1`);\n    selector = selector.replace(SIMPLE_SELECTOR_SEP, (m, c, s) => {\n      if (!stop) {\n        let info = this._transformCompoundSelector(s, c, scope, hostScope);\n        stop = stop || info.stop;\n        c = info.combinator;\n        s = info.value;\n      }\n      return c + s;\n    });\n    // replace `:matches()` selectors\n    if (isMatches) {\n      selector = this._replaceMatchesPseudo(selector, matches);\n    }\n    if (isNth) {\n      selector = this._twiddleNthPlus(selector);\n    }\n    selector = selector.replace(DIR_PAREN, (m, before, dir, after) =>\n      `[dir=\"${dir}\"] ${before}${after}, ${before}[dir=\"${dir}\"]${after}`);\n    return selector;\n  }\n\n  _transformCompoundSelector(selector, combinator, scope, hostScope) {\n    // replace :host with host scoping class\n    let slottedIndex = selector.indexOf(SLOTTED);\n    if (selector.indexOf(HOST) >= 0) {\n      selector = this._transformHostSelector(selector, hostScope);\n    // replace other selectors with scoping class\n    } else if (slottedIndex !== 0) {\n      selector = scope ? this._transformSimpleSelector(selector, scope) :\n        selector;\n    }\n    // mark ::slotted() scope jump to replace with descendant selector + arg\n    // also ignore left-side combinator\n    let slotted = false;\n    if (slottedIndex >= 0) {\n      combinator = '';\n      slotted = true;\n    }\n    // process scope jumping selectors up to the scope jump and then stop\n    let stop;\n    if (slotted) {\n      stop = true;\n      if (slotted) {\n        // .zonk ::slotted(.foo) -> .zonk.scope > .foo\n        selector = selector.replace(SLOTTED_PAREN, (m, paren) => ` > ${paren}`);\n      }\n    }\n    return {value: selector, combinator, stop};\n  }\n\n  _transformSimpleSelector(selector, scope) {\n    const attributes = selector.split(/(\\[.+?\\])/);\n\n    const output = [];\n    for (let i = 0; i < attributes.length; i++) {\n      // Do not attempt to transform any attribute selector content\n      if ((i % 2) === 1) {\n        output.push(attributes[i]);\n      } else {\n        const part = attributes[i];\n\n        if (!(part === '' && i === attributes.length - 1)) {\n          let p$ = part.split(PSEUDO_PREFIX);\n          p$[0] += scope;\n          output.push(p$.join(PSEUDO_PREFIX));\n        }\n      }\n    }\n\n    return output.join('');\n  }\n\n  // :host(...) -> scopeName...\n  _transformHostSelector(selector, hostScope) {\n    let m = selector.match(HOST_PAREN);\n    let paren = m && m[2].trim() || '';\n    if (paren) {\n      if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n        // paren starts with a type selector\n        let typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n        // if the type selector is our hostScope then avoid pre-pending it\n        if (typeSelector === hostScope) {\n          return paren;\n        // otherwise, this selector should not match in this scope so\n        // output a bogus selector.\n        } else {\n          return SELECTOR_NO_MATCH;\n        }\n      } else {\n        // make sure to do a replace here to catch selectors like:\n        // `:host(.foo)::before`\n        return selector.replace(HOST_PAREN, function(m, host, paren) {\n          return hostScope + paren;\n        });\n      }\n    // if no paren, do a straight :host replacement.\n    // TODO(sorvell): this should not strictly be necessary but\n    // it's needed to maintain support for `:host[foo]` type selectors\n    // which have been improperly used under Shady DOM. This should be\n    // deprecated.\n    } else {\n      return selector.replace(HOST, hostScope);\n    }\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  documentRule(rule) {\n    // reset selector in case this is redone.\n    rule['selector'] = rule['parsedSelector'];\n    this.normalizeRootSelector(rule);\n    this._transformRule(rule, this._transformDocumentSelector);\n  }\n\n  /**\n   * @param {StyleNode} rule\n   */\n  normalizeRootSelector(rule) {\n    if (rule['selector'] === ROOT) {\n      rule['selector'] = 'html';\n    }\n  }\n\n/**\n * @param {string} selector\n */\n  _transformDocumentSelector(selector) {\n    if (selector.match(HOST)) {\n      // remove ':host' type selectors in document rules\n      return '';\n    } else if (selector.match(SLOTTED)) {\n      return this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR)\n    } else {\n      return this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n    }\n  }\n}\n\nconst NTH = /:(nth[-\\w]+)\\(([^)]+)\\)/;\nconst SCOPE_DOC_SELECTOR = `:not(.${SCOPE_NAME})`;\nconst COMPLEX_SELECTOR_SEP = ',';\nconst SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=[])+)/g;\nconst SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\nconst HOST = ':host';\nconst ROOT = ':root';\nconst SLOTTED = '::slotted';\nconst SLOTTED_START = new RegExp(`^(${SLOTTED})`);\n// NOTE: this supports 1 nested () pair for things like\n// :host(:not([selected]), more general support requires\n// parsing which seems like overkill\nconst HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n// similar to HOST_PAREN\nconst SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\nconst DIR_PAREN = /(.*):dir\\((?:(ltr|rtl))\\)(.*)/;\nconst CSS_CLASS_PREFIX = '.';\nconst PSEUDO_PREFIX = ':';\nconst CLASS = 'class';\nconst SELECTOR_NO_MATCH = 'should_not_match';\nconst MATCHES = /:(?:matches|any|-(?:webkit|moz)-any)/;\nconst MATCHES_REPLACEMENT = '\\u{e000}';\n\nexport default new StyleTransformer()\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\n/** @const {string} */\nconst infoKey = '__styleInfo';\n\nexport default class StyleInfo {\n  /**\n   * @param {Element} node\n   * @return {StyleInfo}\n   */\n  static get(node) {\n    if (node) {\n      return node[infoKey];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * @param {!Element} node\n   * @param {StyleInfo} styleInfo\n   * @return {StyleInfo}\n   */\n  static set(node, styleInfo) {\n    node[infoKey] = styleInfo;\n    return styleInfo;\n  }\n  /**\n   * @param {StyleNode} ast\n   * @param {Node=} placeholder\n   * @param {Array<string>=} ownStylePropertyNames\n   * @param {string=} elementName\n   * @param {string=} typeExtension\n   * @param {string=} cssBuild\n   */\n  constructor(ast, placeholder, ownStylePropertyNames, elementName, typeExtension, cssBuild) {\n    /** @type {StyleNode} */\n    this.styleRules = ast || null;\n    /** @type {Node} */\n    this.placeholder = placeholder || null;\n    /** @type {!Array<string>} */\n    this.ownStylePropertyNames = ownStylePropertyNames || [];\n    /** @type {Object} */\n    this.overrideStyleProperties = null;\n    /** @type {string} */\n    this.elementName = elementName || '';\n    /** @type {string} */\n    this.cssBuild = cssBuild || '';\n    /** @type {string} */\n    this.typeExtension = typeExtension || '';\n    /** @type {Object<string, string>} */\n    this.styleProperties = null;\n    /** @type {?string} */\n    this.scopeSelector = null;\n    /** @type {HTMLStyleElement} */\n    this.customStyle = null;\n  }\n  _getStyleRules() {\n    return this.styleRules;\n  }\n}\n\n/* eslint-disable-next-line no-self-assign */\nStyleInfo.prototype['_getStyleRules'] = StyleInfo.prototype._getStyleRules;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {removeCustomPropAssignment, StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport {nativeShadow} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport * as StyleUtil from './style-util.js';\nimport * as RX from './common-regex.js';\nimport StyleInfo from './style-info.js';\n\n// TODO: dedupe with shady\n/**\n * @param {string} selector\n * @return {boolean}\n * @this {Element}\n */\nconst matchesSelector = function(selector) {\n  const method = this.matches || this.matchesSelector ||\n    this.mozMatchesSelector || this.msMatchesSelector ||\n    this.oMatchesSelector || this.webkitMatchesSelector;\n  return method && method.call(this, selector);\n};\n\nconst IS_IE = navigator.userAgent.match('Trident');\n\nconst XSCOPE_NAME = 'x-scope';\n\nclass StyleProperties {\n  get XSCOPE_NAME() {\n    return XSCOPE_NAME;\n  }\n/**\n * decorates styles with rule info and returns an array of used style property names\n *\n * @param {StyleNode} rules\n * @return {Array<string>}\n */\n  decorateStyles(rules) {\n    let self = this, props = {}, keyframes = [], ruleIndex = 0;\n    StyleUtil.forEachRule(rules, function(rule) {\n      self.decorateRule(rule);\n      // mark in-order position of ast rule in styles block, used for cache key\n      rule.index = ruleIndex++;\n      self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n    }, function onKeyframesRule(rule) {\n      keyframes.push(rule);\n    });\n    // Cache all found keyframes rules for later reference:\n    rules._keyframes = keyframes;\n    // return this list of property names *consumes* in these styles.\n    let names = [];\n    for (let i in props) {\n      names.push(i);\n    }\n    return names;\n  }\n\n  // decorate a single rule with property info\n  decorateRule(rule) {\n    if (rule.propertyInfo) {\n      return rule.propertyInfo;\n    }\n    let info = {}, properties = {};\n    let hasProperties = this.collectProperties(rule, properties);\n    if (hasProperties) {\n      info.properties = properties;\n      // TODO(sorvell): workaround parser seeing mixins as additional rules\n      rule['rules'] = null;\n    }\n    info.cssText = this.collectCssText(rule);\n    rule.propertyInfo = info;\n    return info;\n  }\n\n  // collects the custom properties from a rule's cssText\n  collectProperties(rule, properties) {\n    let info = rule.propertyInfo;\n    if (info) {\n      if (info.properties) {\n        Object.assign(properties, info.properties);\n        return true;\n      }\n    } else {\n      let m, rx = RX.VAR_ASSIGN;\n      let cssText = rule['parsedCssText'];\n      let value;\n      let any;\n      while ((m = rx.exec(cssText))) {\n        // note: group 2 is var, 3 is mixin\n        value = (m[2] || m[3]).trim();\n        // value of 'inherit' or 'unset' is equivalent to not setting the property here\n        if (value !== 'inherit' || value !== 'unset') {\n          properties[m[1].trim()] = value;\n        }\n        any = true;\n      }\n      return any;\n    }\n\n  }\n\n  // returns cssText of properties that consume variables/mixins\n  collectCssText(rule) {\n    return this.collectConsumingCssText(rule['parsedCssText']);\n  }\n\n  // NOTE: we support consumption inside mixin assignment\n  // but not production, so strip out {...}\n  collectConsumingCssText(cssText) {\n    return cssText.replace(RX.BRACKETED, '')\n      .replace(RX.VAR_ASSIGN, '');\n  }\n\n  collectPropertiesInCssText(cssText, props) {\n    let m;\n    while ((m = RX.VAR_CONSUMED.exec(cssText))) {\n      let name = m[1];\n      // This regex catches all variable names, and following non-whitespace char\n      // If next char is not ':', then variable is a consumer\n      if (m[2] !== ':') {\n        props[name] = true;\n      }\n    }\n  }\n\n  // turns custom properties into realized values.\n  reify(props) {\n    // big perf optimization here: reify only *own* properties\n    // since this object has __proto__ of the element's scope properties\n    let names = Object.getOwnPropertyNames(props);\n    for (let i=0, n; i < names.length; i++) {\n      n = names[i];\n      props[n] = this.valueForProperty(props[n], props);\n    }\n  }\n\n  // given a property value, returns the reified value\n  // a property value may be:\n  // (1) a literal value like: red or 5px;\n  // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n  // var(--a, var(--b));\n  // (3) a literal mixin value like { properties }. Each of these properties\n  // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n  valueForProperty(property, props) {\n    // case (1) default\n    // case (3) defines a mixin and we have to reify the internals\n    if (property) {\n      if (property.indexOf(';') >=0) {\n        property = this.valueForProperties(property, props);\n      } else {\n        // case (2) variable\n        let self = this;\n        let fn = function(prefix, value, fallback, suffix) {\n          if (!value) {\n            return prefix + suffix;\n          }\n          let propertyValue = self.valueForProperty(props[value], props);\n          // if value is \"initial\", then the variable should be treated as unset\n          if (!propertyValue || propertyValue === 'initial') {\n            // fallback may be --a or var(--a) or literal\n            propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n            fallback;\n          } else if (propertyValue === 'apply-shim-inherit') {\n            // CSS build will replace `inherit` with `apply-shim-inherit`\n            // for use with native css variables.\n            // Since we have full control, we can use `inherit` directly.\n            propertyValue = 'inherit';\n          }\n          return prefix + (propertyValue || '') + suffix;\n        };\n        property = StyleUtil.processVariableAndFallback(property, fn);\n      }\n    }\n    return property && property.trim() || '';\n  }\n\n  // note: we do not yet support mixin within mixin\n  valueForProperties(property, props) {\n    let parts = property.split(';');\n    for (let i=0, p, m; i<parts.length; i++) {\n      if ((p = parts[i])) {\n        RX.MIXIN_MATCH.lastIndex = 0;\n        m = RX.MIXIN_MATCH.exec(p);\n        if (m) {\n          p = this.valueForProperty(props[m[1]], props);\n        } else {\n          let colon = p.indexOf(':');\n          if (colon !== -1) {\n            let pp = p.substring(colon);\n            pp = pp.trim();\n            pp = this.valueForProperty(pp, props) || pp;\n            p = p.substring(0, colon) + pp;\n          }\n        }\n        parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n          // strip trailing ;\n          p.slice(0, -1) :\n          p || '';\n      }\n    }\n    return parts.join(';');\n  }\n\n  applyProperties(rule, props) {\n    let output = '';\n    // dynamically added sheets may not be decorated so ensure they are.\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (rule.propertyInfo.cssText) {\n      output = this.valueForProperties(rule.propertyInfo.cssText, props);\n    }\n    rule['cssText'] = output;\n  }\n\n  // Apply keyframe transformations to the cssText of a given rule. The\n  // keyframeTransforms object is a map of keyframe names to transformer\n  // functions which take in cssText and spit out transformed cssText.\n  applyKeyframeTransforms(rule, keyframeTransforms) {\n    let input = rule['cssText'];\n    let output = rule['cssText'];\n    if (rule.hasAnimations == null) {\n      // Cache whether or not the rule has any animations to begin with:\n      rule.hasAnimations = RX.ANIMATION_MATCH.test(input);\n    }\n    // If there are no animations referenced, we can skip transforms:\n    if (rule.hasAnimations) {\n      let transform;\n      // If we haven't transformed this rule before, we iterate over all\n      // transforms:\n      if (rule.keyframeNamesToTransform == null) {\n        rule.keyframeNamesToTransform = [];\n        for (let keyframe in keyframeTransforms) {\n          transform = keyframeTransforms[keyframe];\n          output = transform(input);\n          // If the transform actually changed the CSS text, we cache the\n          // transform name for future use:\n          if (input !== output) {\n            input = output;\n            rule.keyframeNamesToTransform.push(keyframe);\n          }\n        }\n      } else {\n        // If we already have a list of keyframe names that apply to this\n        // rule, we apply only those keyframe name transforms:\n        for (let i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n          transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n          input = transform(input);\n        }\n        output = input;\n      }\n    }\n    rule['cssText'] = output;\n  }\n\n  // Test if the rules in these styles matches the given `element` and if so,\n  // collect any custom properties into `props`.\n  /**\n   * @param {StyleNode} rules\n   * @param {Element} element\n   */\n  propertyDataFromStyles(rules, element) {\n    let props = {};\n    // generates a unique key for these matches\n    let o = [];\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, (rule) => {\n      // TODO(sorvell): we could trim the set of rules at declaration\n      // time to only include ones that have properties\n      if (!rule.propertyInfo) {\n        this.decorateRule(rule);\n      }\n      // match element against transformedSelector: selector may contain\n      // unwanted uniquification and parsedSelector does not directly match\n      // for :host selectors.\n      let selectorToMatch = rule.transformedSelector || rule['parsedSelector'];\n      if (element && rule.propertyInfo.properties && selectorToMatch) {\n        if (matchesSelector.call(element, selectorToMatch)) {\n          this.collectProperties(rule, props);\n          // produce numeric key for these matches for lookup\n          addToBitMask(rule.index, o);\n        }\n      }\n    }, null, true);\n    return {properties: props, key: o};\n  }\n\n  /**\n   * @param {Element} scope\n   * @param {StyleNode} rule\n   * @param {string} cssBuild\n   * @param {function(Object)} callback\n   */\n  whenHostOrRootRule(scope, rule, cssBuild, callback) {\n    if (!rule.propertyInfo) {\n      this.decorateRule(rule);\n    }\n    if (!rule.propertyInfo.properties) {\n      return;\n    }\n    let {is, typeExtension} = StyleUtil.getIsExtends(scope);\n    let hostScope = is ?\n      StyleTransformer._calcHostScope(is, typeExtension) :\n      'html';\n    let parsedSelector = rule['parsedSelector'];\n    let isRoot = (parsedSelector === ':host > *' || parsedSelector === 'html');\n    let isHost = parsedSelector.indexOf(':host') === 0 && !isRoot;\n    // build info is either in scope (when scope is an element) or in the style\n    // when scope is the default scope; note: this allows default scope to have\n    // mixed mode built and unbuilt styles.\n    if (cssBuild === 'shady') {\n      // :root -> x-foo > *.x-foo for elements and html for custom-style\n      isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') !== -1;\n      // :host -> x-foo for elements, but sub-rules have .x-foo in them\n      isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n    }\n    if (!isRoot && !isHost) {\n      return;\n    }\n    let selectorToMatch = hostScope;\n    if (isHost) {\n      // need to transform :host because `:host` does not work with `matches`\n      if (!rule.transformedSelector) {\n        // transform :host into a matchable selector\n        rule.transformedSelector =\n        StyleTransformer._transformRuleCss(\n          rule,\n          StyleTransformer._transformComplexSelector,\n          StyleTransformer._calcElementScope(is),\n          hostScope\n        );\n      }\n      selectorToMatch = rule.transformedSelector || hostScope;\n    }\n    callback({\n      selector: selectorToMatch,\n      isHost: isHost,\n      isRoot: isRoot\n    });\n  }\n/**\n * @param {Element} scope\n * @param {StyleNode} rules\n * @param {string} cssBuild\n * @return {Object}\n */\n  hostAndRootPropertiesForScope(scope, rules, cssBuild) {\n    let hostProps = {}, rootProps = {};\n    // note: active rules excludes non-matching @media rules\n    StyleUtil.forEachRule(rules, (rule) => {\n      // if scope is StyleDefaults, use _element for matchesSelector\n      this.whenHostOrRootRule(scope, rule, cssBuild, (info) => {\n        let element = scope._element || scope;\n        if (matchesSelector.call(element, info.selector)) {\n          if (info.isHost) {\n            this.collectProperties(rule, hostProps);\n          } else {\n            this.collectProperties(rule, rootProps);\n          }\n        }\n      });\n    }, null, true);\n    return {rootProps: rootProps, hostProps: hostProps};\n  }\n\n  /**\n   * @param {Element} element\n   * @param {Object} properties\n   * @param {string} scopeSelector\n   */\n  transformStyles(element, properties, scopeSelector) {\n    let self = this;\n    let {is, typeExtension} = StyleUtil.getIsExtends(element);\n    let hostSelector = StyleTransformer\n      ._calcHostScope(is, typeExtension);\n    let rxHostSelector = element.extends ?\n      '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n      hostSelector;\n    let hostRx = new RegExp(RX.HOST_PREFIX + rxHostSelector +\n      RX.HOST_SUFFIX);\n    let {styleRules: rules, cssBuild} = StyleInfo.get(element);\n    let keyframeTransforms =\n      this._elementKeyframeTransforms(element, rules, scopeSelector);\n    return StyleTransformer.elementStyles(element, rules, function(rule) {\n      self.applyProperties(rule, properties);\n      if (!nativeShadow &&\n          !StyleUtil.isKeyframesSelector(rule) &&\n          rule['cssText']) {\n        // NOTE: keyframe transforms only scope munge animation names, so it\n        // is not necessary to apply them in ShadowDOM.\n        self.applyKeyframeTransforms(rule, keyframeTransforms);\n        self._scopeSelector(rule, hostRx, hostSelector, scopeSelector);\n      }\n    }, cssBuild);\n  }\n\n  /**\n   * @param {Element} element\n   * @param {StyleNode} rules\n   * @param {string} scopeSelector\n   * @return {Object}\n   */\n  _elementKeyframeTransforms(element, rules, scopeSelector) {\n    let keyframesRules = rules._keyframes;\n    let keyframeTransforms = {};\n    if (!nativeShadow && keyframesRules) {\n      // For non-ShadowDOM, we transform all known keyframes rules in\n      // advance for the current scope. This allows us to catch keyframes\n      // rules that appear anywhere in the stylesheet:\n      for (let i = 0, keyframesRule = keyframesRules[i];\n           i < keyframesRules.length;\n           keyframesRule = keyframesRules[++i]) {\n        this._scopeKeyframes(keyframesRule, scopeSelector);\n        keyframeTransforms[keyframesRule['keyframesName']] =\n            this._keyframesRuleTransformer(keyframesRule);\n      }\n    }\n    return keyframeTransforms;\n  }\n\n  // Generate a factory for transforming a chunk of CSS text to handle a\n  // particular scoped keyframes rule.\n  /**\n   * @param {StyleNode} keyframesRule\n   * @return {function(string):string}\n   */\n  _keyframesRuleTransformer(keyframesRule) {\n    return function(cssText) {\n      return cssText.replace(\n          keyframesRule.keyframesNameRx,\n          keyframesRule.transformedKeyframesName);\n    };\n  }\n\n/**\n * Transforms `@keyframes` names to be unique for the current host.\n * Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n *\n * @param {StyleNode} rule\n * @param {string} scopeId\n */\n  _scopeKeyframes(rule, scopeId) {\n    // Animation names are of the form [\\w-], so ensure that the name regex does not partially apply\n    // to similarly named keyframe names by checking for a word boundary at the beginning and\n    // a non-word boundary or `-` at the end.\n    rule.keyframesNameRx = new RegExp(`\\\\b${rule['keyframesName']}(?!\\\\B|-)`, 'g');\n    rule.transformedKeyframesName = rule['keyframesName'] + '-' + scopeId;\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    rule['selector'] = rule.transformedSelector.replace(\n        rule['keyframesName'], rule.transformedKeyframesName);\n  }\n\n  // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n  // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n  // host selector: x-foo.wide -> .x-foo-42.wide\n  // note: we use only the scope class (.x-foo-42) and not the hostSelector\n  // (x-foo) to scope :host rules; this helps make property host rules\n  // have low specificity. They are overrideable by class selectors but,\n  // unfortunately, not by type selectors (e.g. overriding via\n  // `.special` is ok, but not by `x-foo`).\n  /**\n   * @param {StyleNode} rule\n   * @param {RegExp} hostRx\n   * @param {string} hostSelector\n   * @param {string} scopeId\n   */\n  _scopeSelector(rule, hostRx, hostSelector, scopeId) {\n    rule.transformedSelector = rule.transformedSelector || rule['selector'];\n    let selector = rule.transformedSelector;\n    let scope = '.' + scopeId;\n    let parts = StyleUtil.splitSelectorList(selector);\n    for (let i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n      parts[i] = p.match(hostRx) ?\n        p.replace(hostSelector, scope) :\n        scope + ' ' + p;\n    }\n    rule['selector'] = parts.join(',');\n  }\n\n  /**\n   * @param {Element} element\n   * @param {string} selector\n   * @param {string} old\n   */\n  applyElementScopeSelector(element, selector, old) {\n    let c = element.getAttribute('class') || '';\n    let v = c;\n    if (old) {\n      v = c.replace(\n        new RegExp('\\\\s*' + XSCOPE_NAME + '\\\\s*' + old + '\\\\s*', 'g'), ' ');\n    }\n    v += (v ? ' ' : '') + XSCOPE_NAME + ' ' + selector;\n    if (c !== v) {\n      StyleUtil.setElementClassRaw(element, v);\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element\n   * @param {Object} properties\n   * @param {string} selector\n   * @param {HTMLStyleElement} style\n   * @return {HTMLStyleElement}\n   */\n  applyElementStyle(element, properties, selector, style) {\n    // calculate cssText to apply\n    let cssText = style ? style.textContent || '' :\n      this.transformStyles(element, properties, selector);\n    // if shady and we have a cached style that is not style, decrement\n    let styleInfo = StyleInfo.get(element);\n    let s = styleInfo.customStyle;\n    if (s && !nativeShadow && (s !== style)) {\n      s['_useCount']--;\n      if (s['_useCount'] <= 0 && s.parentNode) {\n        s.parentNode.removeChild(s);\n      }\n    }\n    // apply styling always under native or if we generated style\n    // or the cached style is not in document(!)\n    if (nativeShadow) {\n      // update existing style only under native\n      if (styleInfo.customStyle) {\n        styleInfo.customStyle.textContent = cssText;\n        style = styleInfo.customStyle;\n      // otherwise, if we have css to apply, do so\n      } else if (cssText) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        style = StyleUtil.applyCss(cssText, selector, element.shadowRoot,\n          styleInfo.placeholder);\n      }\n    } else {\n      // shady and no cache hit\n      if (!style) {\n        // apply css after the scope style of the element to help with\n        // style precedence rules.\n        if (cssText) {\n          style = StyleUtil.applyCss(cssText, selector, null,\n            styleInfo.placeholder);\n        }\n      // shady and cache hit but not in document\n      } else if (!style.parentNode) {\n        if (IS_IE && cssText.indexOf('@media') > -1) {\n            // @media rules may be stale in IE 10 and 11\n            // refresh the text content of the style to revalidate them.\n          style.textContent = cssText;\n        }\n        StyleUtil.applyStyle(style, null, styleInfo.placeholder);\n      }\n    }\n    // ensure this style is our custom style and increment its use count.\n    if (style) {\n      style['_useCount'] = style['_useCount'] || 0;\n      // increment use count if we changed styles\n      if (styleInfo.customStyle != style) {\n        style['_useCount']++;\n      }\n      styleInfo.customStyle = style;\n    }\n    return style;\n  }\n\n  /**\n   * @param {Element} style\n   * @param {Object} properties\n   */\n  applyCustomStyle(style, properties) {\n    let rules = StyleUtil.rulesForStyle(/** @type {HTMLStyleElement} */(style));\n    let self = this;\n    style.textContent = StyleUtil.toCssText(rules, function(/** StyleNode */rule) {\n      let css = rule['cssText'] = rule['parsedCssText'];\n      if (rule.propertyInfo && rule.propertyInfo.cssText) {\n        // remove property assignments\n        // so next function isn't confused\n        // NOTE: we have 3 categories of css:\n        // (1) normal properties,\n        // (2) custom property assignments (--foo: red;),\n        // (3) custom property usage: border: var(--foo); @apply(--foo);\n        // In elements, 1 and 3 are separated for efficiency; here they\n        // are not and this makes this case unique.\n        css = removeCustomPropAssignment(/** @type {string} */(css));\n        // replace with reified properties, scenario is same as mixin\n        rule['cssText'] = self.valueForProperties(css, properties);\n      }\n    });\n  }\n}\n\n/**\n * @param {number} n\n * @param {Array<number>} bits\n */\nfunction addToBitMask(n, bits) {\n  let o = parseInt(n / 32, 10);\n  let v = 1 << (n % 32);\n  bits[o] = (bits[o] || 0) | v;\n}\n\nexport default new StyleProperties();","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {applyStylePlaceHolder} from './style-util.js';\nimport {nativeShadow, disableRuntime} from './style-settings.js';\n\n/** @type {!Object<string, !Node>} */\nconst placeholderMap = {};\n\n/**\n * @param {string} elementName\n * @return {Node}\n */\nexport function getStylePlaceholder(elementName) {\n  return placeholderMap[elementName] || null;\n}\n\n/**\n * @param {string} elementName\n */\nexport function ensureStylePlaceholder(elementName) {\n  if (!placeholderMap[elementName]) {\n    placeholderMap[elementName] = applyStylePlaceHolder(elementName);\n  }\n}\n\n/**\n * @const {CustomElementRegistry}\n */\nconst ce = window['customElements'];\nif (ce && !nativeShadow && !disableRuntime) {\n  /**\n   * @const {function(this:CustomElementRegistry, string,function(new:HTMLElement),{extends: string}=)}\n   */\n  const origDefine = ce['define'];\n  /**\n   * @param {string} name\n   * @param {function(new:HTMLElement)} clazz\n   * @param {{extends: string}=} options\n   */\n  const wrappedDefine = (name, clazz, options) => {\n    ensureStylePlaceholder(name);\n    origDefine.call(/** @type {!CustomElementRegistry} */(ce), name, clazz, options);\n  };\n  ce['define'] = wrappedDefine;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport {getIsExtends, elementHasBuiltCss, wrap} from './style-util.js';\n\nexport let flush = function() {};\n\n/**\n * @param {!Element} element\n * @return {string}\n */\nfunction getClasses(element) {\n  if (element.classList && element.classList.value) {\n    return element.classList.value;\n  } else {\n    // NOTE: className is patched to remove scoping classes in ShadyDOM\n    // use getAttribute('class') instead, which is unpatched\n    return element.getAttribute('class') || '';\n  }\n}\n\nconst scopeRegExp = new RegExp(`${StyleTransformer.SCOPE_NAME}\\\\s*([^\\\\s]*)`);\n\n/**\n * @param {!Element} element\n * @return {string}\n */\nexport function getCurrentScope(element) {\n  const match = getClasses(element).match(scopeRegExp);\n  if (match) {\n    return match[1];\n  } else {\n    return '';\n  }\n}\n\n/**\n * @param {!Node} node\n */\nexport function getOwnerScope(node) {\n  const ownerRoot = wrap(node).getRootNode();\n  if (ownerRoot === node || ownerRoot === node.ownerDocument) {\n    return '';\n  }\n  const host = /** @type {!ShadowRoot} */(ownerRoot).host;\n  if (!host) {\n    // this may actually be a document fragment\n    return '';\n  }\n  return getIsExtends(host).is;\n}\n\n/**\n * @param {!Element} element\n */\nexport function ensureCorrectScope(element) {\n  const currentScope = getCurrentScope(element);\n  const ownerRoot = wrap(element).getRootNode();\n  if (ownerRoot === element) {\n    return;\n  }\n  if (currentScope && ownerRoot === element.ownerDocument) {\n    // node was scoped, but now is in document\n    StyleTransformer.domRemoveScope(element, currentScope);\n  } else if (ownerRoot instanceof ShadowRoot) {\n    const ownerScope = getOwnerScope(element);\n    if (ownerScope !== currentScope) {\n      // node was scoped, but not by its current owner\n      StyleTransformer.domReplaceScope(element, currentScope, ownerScope);\n    }\n  }\n}\n\n/**\n * @param {!HTMLElement|!HTMLDocument} element\n */\nexport function ensureCorrectSubtreeScoping(element) {\n  // find unscoped subtree nodes\n  const unscopedNodes = window['ShadyDOM']['nativeMethods']['querySelectorAll'].call(\n    element, `:not(.${StyleTransformer.SCOPE_NAME})`);\n\n  for (let j = 0; j < unscopedNodes.length; j++) {\n    // it's possible, during large batch inserts, that nodes that aren't\n    // scoped within the current scope were added.\n    // To make sure that any unscoped nodes that were inserted in the current batch are correctly styled,\n    // query all unscoped nodes and force their style-scope to be applied.\n    // This could happen if a sub-element appended an unscoped node in its shadowroot and this function\n    // runs on a parent element of the host of that unscoped node:\n    // parent-element -> element -> unscoped node\n    // Here unscoped node should have the style-scope element, not parent-element.\n    const unscopedNode = unscopedNodes[j];\n    const scopeForPreviouslyUnscopedNode = getOwnerScope(unscopedNode);\n    if (scopeForPreviouslyUnscopedNode) {\n      StyleTransformer.element(unscopedNode, scopeForPreviouslyUnscopedNode);\n    }\n  }\n}\n\n/**\n * @param {HTMLElement} el\n * @return {boolean}\n */\nfunction isElementWithBuiltCss(el) {\n  if (el.localName === 'style' || el.localName === 'template') {\n    return elementHasBuiltCss(el);\n  }\n  return false;\n}\n\n/**\n * @param {Array<MutationRecord|null>|null} mxns\n */\nfunction handler(mxns) {\n  for (let x=0; x < mxns.length; x++) {\n    let mxn = mxns[x];\n    if (mxn.target === document.documentElement ||\n      mxn.target === document.head) {\n      continue;\n    }\n    for (let i=0; i < mxn.addedNodes.length; i++) {\n      let n = mxn.addedNodes[i];\n      if (n.nodeType !== Node.ELEMENT_NODE) {\n        continue;\n      }\n      n = /** @type {HTMLElement} */(n); // eslint-disable-line no-self-assign\n      let root = n.getRootNode();\n      let currentScope = getCurrentScope(n);\n      // node was scoped, but now is in document\n      // If this element has built css, we must not remove scoping as this node\n      // will be used as a template or style without re - applying scoping as an optimization\n      if (currentScope && root === n.ownerDocument && !isElementWithBuiltCss(n)) {\n        StyleTransformer.domRemoveScope(n, currentScope);\n      } else if (root instanceof ShadowRoot) {\n        const newScope = getOwnerScope(n);\n        // rescope current node and subtree if necessary\n        if (newScope !== currentScope) {\n          StyleTransformer.domReplaceScope(n, currentScope, newScope);\n        }\n        // make sure all the subtree elements are scoped correctly\n        ensureCorrectSubtreeScoping(n);\n      }\n    }\n  }\n}\n\n// if native Shadow DOM is being used, or ShadyDOM handles dynamic scoiping, do not activate the MutationObserver\nif (!nativeShadow && !(window['ShadyDOM'] && window['ShadyDOM']['handlesDynamicScoping'])) {\n  let observer = new MutationObserver(handler);\n  let start = (node) => {\n    observer.observe(node, {childList: true, subtree: true});\n  }\n  let nativeCustomElements = (window['customElements'] &&\n    !window['customElements']['polyfillWrapFlushCallback']);\n  // need to start immediately with native custom elements\n  // TODO(dfreedm): with polyfilled HTMLImports and native custom elements\n  // excessive mutations may be observed; this can be optimized via cooperation\n  // with the HTMLImports polyfill.\n  if (nativeCustomElements) {\n    start(document);\n  } else {\n    let delayedStart = () => {\n      start(document.body);\n    }\n    // use polyfill timing if it's available\n    if (window['HTMLImports']) {\n      window['HTMLImports']['whenReady'](delayedStart);\n    // otherwise push beyond native imports being ready\n    // which requires RAF + readystate interactive.\n    } else {\n      requestAnimationFrame(function() {\n        if (document.readyState === 'loading') {\n          let listener = function() {\n            delayedStart();\n            document.removeEventListener('readystatechange', listener);\n          }\n          document.addEventListener('readystatechange', listener);\n        } else {\n          delayedStart();\n        }\n      });\n    }\n  }\n\n  flush = function() {\n    handler(observer.takeRecords());\n  }\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {parse, StyleNode} from './css-parse.js';\nimport {nativeShadow, nativeCssVariables, disableRuntime} from './style-settings.js';\nimport StyleTransformer from './style-transformer.js';\nimport * as StyleUtil from './style-util.js';\nimport StyleProperties from './style-properties.js';\nimport {ensureStylePlaceholder, getStylePlaceholder} from './style-placeholder.js';\nimport StyleInfo from './style-info.js';\nimport StyleCache from './style-cache.js';\nimport {flush as watcherFlush, getOwnerScope, getCurrentScope} from './document-watcher.js';\nimport templateMap from './template-map.js';\nimport * as ApplyShimUtils from './apply-shim-utils.js';\nimport {updateNativeProperties, detectMixin} from './common-utils.js';\nimport {CustomStyleInterfaceInterface} from './custom-style-interface.js'; // eslint-disable-line no-unused-vars\n\n/** @type {!Object<string, string>} */\nconst adoptedCssTextMap = {};\n\n/**\n * @const {StyleCache}\n */\nconst styleCache = new StyleCache();\n\nexport default class ScopingShim {\n  constructor() {\n    this._scopeCounter = {};\n    this._documentOwner = /** @type {!HTMLElement} */(document.documentElement);\n    let ast = new StyleNode();\n    ast['rules'] = [];\n    this._documentOwnerStyleInfo = StyleInfo.set(this._documentOwner, new StyleInfo(ast));\n    this._elementsHaveApplied = false;\n    /** @type {?Object} */\n    this._applyShim = null;\n    /** @type {?CustomStyleInterfaceInterface} */\n    this._customStyleInterface = null;\n  }\n  flush() {\n    watcherFlush();\n  }\n  _generateScopeSelector(name) {\n    let id = this._scopeCounter[name] = (this._scopeCounter[name] || 0) + 1;\n    return `${name}-${id}`;\n  }\n  getStyleAst(style) {\n    return StyleUtil.rulesForStyle(style);\n  }\n  styleAstToString(ast) {\n    return StyleUtil.toCssText(ast);\n  }\n  _gatherStyles(template) {\n    return StyleUtil.gatherStyleText(template.content);\n  }\n  /**\n   * Prepare the styling and template for the given element type\n   *\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} typeExtension\n   */\n  prepareTemplate(template, elementName, typeExtension) {\n    this.prepareTemplateDom(template, elementName);\n    this.prepareTemplateStyles(template, elementName, typeExtension);\n  }\n  /**\n   * Prepare styling for the given element type\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} typeExtension\n   */\n  prepareTemplateStyles(template, elementName, typeExtension) {\n    if (template._prepared || disableRuntime) {\n      return;\n    }\n    // style placeholders are only used when ShadyDOM is active\n    if (!nativeShadow) {\n      ensureStylePlaceholder(elementName);\n    }\n    template._prepared = true;\n    template.name = elementName;\n    template.extends = typeExtension;\n    templateMap[elementName] = template;\n    let cssBuild = StyleUtil.getCssBuild(template);\n    const optimalBuild = StyleUtil.isOptimalCssBuild(cssBuild);\n    let info = {\n      is: elementName,\n      extends: typeExtension,\n    };\n    let cssText = this._gatherStyles(template) + (adoptedCssTextMap[elementName] || '');\n    // check if the styling has mixin definitions or uses\n    this._ensure();\n    if (!optimalBuild) {\n      let hasMixins = !cssBuild && detectMixin(cssText);\n      let ast = parse(cssText);\n      // only run the applyshim transforms if there is a mixin involved\n      if (hasMixins && nativeCssVariables && this._applyShim) {\n        this._applyShim['transformRules'](ast, elementName);\n      }\n      template['_styleAst'] = ast;\n    }\n    let ownPropertyNames = [];\n    if (!nativeCssVariables) {\n      ownPropertyNames = StyleProperties.decorateStyles(template['_styleAst']);\n    }\n    if (!ownPropertyNames.length || nativeCssVariables) {\n      let root = nativeShadow ? template.content : null;\n      let placeholder = getStylePlaceholder(elementName);\n      let style = this._generateStaticStyle(info, template['_styleAst'], root, placeholder, cssBuild, optimalBuild ? cssText : '');\n      template._style = style;\n    }\n    template._ownPropertyNames = ownPropertyNames;\n  }\n\n  /**\n   * @param {!Array<string>} cssTextArray\n   * @param {string} elementName\n   */\n  prepareAdoptedCssText(cssTextArray, elementName) {\n    adoptedCssTextMap[elementName] = cssTextArray.join(' ');\n  }\n  /**\n   * Prepare template for the given element type\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplateDom(template, elementName) {\n    if (disableRuntime) {\n      return;\n    }\n    const cssBuild = StyleUtil.getCssBuild(template);\n    if (!nativeShadow && cssBuild !== 'shady' && !template._domPrepared) {\n      template._domPrepared = true;\n      StyleTransformer.domAddScope(template.content, elementName);\n    }\n  }\n  /**\n   * @param {!{is: string, extends: (string|undefined)}} info\n   * @param {!StyleNode} rules\n   * @param {DocumentFragment} shadowroot\n   * @param {Node} placeholder\n   * @param {string} cssBuild\n   * @param {string=} cssText\n   * @return {?HTMLStyleElement}\n   */\n  _generateStaticStyle(info, rules, shadowroot, placeholder, cssBuild, cssText) {\n    cssText = StyleTransformer.elementStyles(info, rules, null, cssBuild, cssText);\n    if (cssText.length) {\n      return StyleUtil.applyCss(cssText, info.is, shadowroot, placeholder);\n    }\n    return null;\n  }\n  _prepareHost(host) {\n    const {is, typeExtension} = StyleUtil.getIsExtends(host);\n    const placeholder = getStylePlaceholder(is);\n    const template = templateMap[is];\n    if (!template) {\n      return;\n    }\n    const ast = template['_styleAst'];\n    const ownStylePropertyNames = template._ownPropertyNames;\n    const cssBuild = StyleUtil.getCssBuild(template);\n    const styleInfo = new StyleInfo(\n      ast,\n      placeholder,\n      ownStylePropertyNames,\n      is,\n      typeExtension,\n      cssBuild\n    );\n    StyleInfo.set(host, styleInfo);\n    return styleInfo;\n  }\n  _ensureApplyShim() {\n    if (this._applyShim) {\n      return;\n    } else if (window.ShadyCSS && window.ShadyCSS.ApplyShim) {\n      this._applyShim = /** @type {!Object} */ (window.ShadyCSS.ApplyShim);\n      this._applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n    }\n  }\n  _ensureCustomStyleInterface() {\n    if (this._customStyleInterface) {\n      return;\n    } else if (window.ShadyCSS && window.ShadyCSS.CustomStyleInterface) {\n      this._customStyleInterface = /** @type {!CustomStyleInterfaceInterface} */(window.ShadyCSS.CustomStyleInterface);\n      /** @type {function(!HTMLStyleElement)} */\n      this._customStyleInterface['transformCallback'] = (style) => {this.transformCustomStyleForDocument(style)};\n      this._customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this._customStyleInterface['enqueued'] || this._elementsHaveApplied) {\n            this.flushCustomStyles();\n          }\n        })\n      };\n    }\n  }\n  _ensure() {\n    this._ensureApplyShim();\n    this._ensureCustomStyleInterface();\n  }\n  /**\n   * Flush and apply custom styles to document\n   */\n  flushCustomStyles() {\n    if (disableRuntime) {\n      return;\n    }\n    this._ensure();\n    if (!this._customStyleInterface) {\n      return;\n    }\n    let customStyles = this._customStyleInterface['processStyles']();\n    // early return if custom-styles don't need validation\n    if (!this._customStyleInterface['enqueued']) {\n      return;\n    }\n    // bail if custom styles are built optimally\n    if (StyleUtil.isOptimalCssBuild(this._documentOwnerStyleInfo.cssBuild)) {\n      return;\n    }\n    if (!nativeCssVariables) {\n      this._updateProperties(this._documentOwner, this._documentOwnerStyleInfo);\n      this._applyCustomStyles(customStyles);\n      if (this._elementsHaveApplied) {\n        // if custom elements have upgraded and there are no native css variables, we must recalculate the whole tree\n        this.styleDocument();\n      }\n    } else if (!this._documentOwnerStyleInfo.cssBuild) {\n      this._revalidateCustomStyleApplyShim(customStyles);\n    }\n    this._customStyleInterface['enqueued'] = false;\n  }\n  /**\n   * Apply styles for the given element\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} overrideProps\n   */\n  styleElement(host, overrideProps) {\n    if (disableRuntime) {\n      if (overrideProps) {\n        if (!StyleInfo.get(host)) {\n          StyleInfo.set(host, new StyleInfo(null));\n        }\n        const styleInfo = /** @type {!StyleInfo} */(StyleInfo.get(host));\n        this._mixOverrideStyleProps(styleInfo, overrideProps);\n        this.styleElementNativeVariables(host, styleInfo);\n      }\n      return;\n    }\n    const styleInfo = StyleInfo.get(host) || this._prepareHost(host);\n    // if there is no style info at this point, bail\n    if (!styleInfo) {\n      return;\n    }\n    // Only trip the `elementsHaveApplied` flag if a node other that the root document has `applyStyle` called\n    if (!this._isRootOwner(host)) {\n      this._elementsHaveApplied = true;\n    }\n    if (overrideProps) {\n      this._mixOverrideStyleProps(styleInfo, overrideProps);\n    }\n    if (!nativeCssVariables) {\n      this.styleElementShimVariables(host, styleInfo);\n    } else {\n      this.styleElementNativeVariables(host, styleInfo);\n    }\n  }\n  /**\n   * @param {!StyleInfo} styleInfo\n   * @param {Object} overrideProps\n   */\n  _mixOverrideStyleProps(styleInfo, overrideProps) {\n    styleInfo.overrideStyleProperties =\n      styleInfo.overrideStyleProperties || {};\n    Object.assign(styleInfo.overrideStyleProperties, overrideProps);\n  }\n  /**\n   * @param {!HTMLElement} host\n   * @param {!StyleInfo} styleInfo\n   */\n  styleElementShimVariables(host, styleInfo) {\n    this.flush();\n    this._updateProperties(host, styleInfo);\n    if (styleInfo.ownStylePropertyNames && styleInfo.ownStylePropertyNames.length) {\n      this._applyStyleProperties(host, styleInfo);\n    }\n  }\n  /**\n   * @param {!HTMLElement} host\n   * @param {!StyleInfo} styleInfo\n   */\n  styleElementNativeVariables(host, styleInfo) {\n    const { is } = StyleUtil.getIsExtends(host);\n    if (styleInfo.overrideStyleProperties) {\n      updateNativeProperties(host, styleInfo.overrideStyleProperties);\n    }\n    const template = templateMap[is];\n    // bail early if there is no shadowroot for this element\n    if (!template && !this._isRootOwner(host)) {\n      return;\n    }\n    // bail early if the template was built with polymer-css-build\n    if (template && StyleUtil.elementHasBuiltCss(template)) {\n      return;\n    }\n    if (template && template._style && !ApplyShimUtils.templateIsValid(template)) {\n      // update template\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this._ensure();\n        this._applyShim && this._applyShim['transformRules'](template['_styleAst'], is);\n        template._style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update instance if native shadowdom\n      if (nativeShadow) {\n        let root = host.shadowRoot;\n        if (root) {\n          let style = root.querySelector('style');\n          if (style) {\n            style.textContent = StyleTransformer.elementStyles(host, styleInfo.styleRules);\n          }\n        }\n      }\n      styleInfo.styleRules = template['_styleAst'];\n    }\n  }\n  _styleOwnerForNode(node) {\n    let root = StyleUtil.wrap(node).getRootNode();\n    let host = root.host;\n    if (host) {\n      if (StyleInfo.get(host) || this._prepareHost(host)) {\n        return host;\n      } else {\n        return this._styleOwnerForNode(host);\n      }\n    }\n    return this._documentOwner;\n  }\n  _isRootOwner(node) {\n    return (node === this._documentOwner);\n  }\n  _applyStyleProperties(host, styleInfo) {\n    let is = StyleUtil.getIsExtends(host).is;\n    let cacheEntry = styleCache.fetch(is, styleInfo.styleProperties, styleInfo.ownStylePropertyNames);\n    let cachedScopeSelector = cacheEntry && cacheEntry.scopeSelector;\n    let cachedStyle = cacheEntry ? cacheEntry.styleElement : null;\n    let oldScopeSelector = styleInfo.scopeSelector;\n    // only generate new scope if cached style is not found\n    styleInfo.scopeSelector = cachedScopeSelector || this._generateScopeSelector(is);\n    let style = StyleProperties.applyElementStyle(host, styleInfo.styleProperties, styleInfo.scopeSelector, cachedStyle);\n    if (!nativeShadow) {\n      StyleProperties.applyElementScopeSelector(host, styleInfo.scopeSelector, oldScopeSelector);\n    }\n    if (!cacheEntry) {\n      styleCache.store(is, styleInfo.styleProperties, style, styleInfo.scopeSelector);\n    }\n    return style;\n  }\n  _updateProperties(host, styleInfo) {\n    let owner = this._styleOwnerForNode(host);\n    let ownerStyleInfo = StyleInfo.get(owner);\n    let ownerProperties = ownerStyleInfo.styleProperties;\n    // style owner has not updated properties yet\n    // go up the chain and force property update,\n    // except if the owner is the document\n    if (owner !== this._documentOwner && !ownerProperties) {\n      this._updateProperties(owner, ownerStyleInfo);\n      ownerProperties = ownerStyleInfo.styleProperties;\n    }\n    let props = Object.create(ownerProperties || null);\n    let hostAndRootProps = StyleProperties.hostAndRootPropertiesForScope(host, styleInfo.styleRules, styleInfo.cssBuild);\n    let propertyData = StyleProperties.propertyDataFromStyles(ownerStyleInfo.styleRules, host);\n    let propertiesMatchingHost = propertyData.properties\n    Object.assign(\n      props,\n      hostAndRootProps.hostProps,\n      propertiesMatchingHost,\n      hostAndRootProps.rootProps\n    );\n    this._mixinOverrideStyles(props, styleInfo.overrideStyleProperties);\n    StyleProperties.reify(props);\n    styleInfo.styleProperties = props;\n  }\n  _mixinOverrideStyles(props, overrides) {\n    for (let p in overrides) {\n      let v = overrides[p];\n      // skip override props if they are not truthy or 0\n      // in order to fall back to inherited values\n      if (v || v === 0) {\n        props[p] = v;\n      }\n    }\n  }\n  /**\n   * Update styles of the whole document\n   *\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.styleSubtree(this._documentOwner, properties);\n  }\n  /**\n   * Update styles of a subtree\n   *\n   * @param {!HTMLElement} host\n   * @param {Object=} properties\n   */\n  styleSubtree(host, properties) {\n    const wrappedHost = StyleUtil.wrap(host);\n    let root = wrappedHost.shadowRoot;\n    if (root || this._isRootOwner(host)) {\n      this.styleElement(host, properties);\n    }\n    // process the shadowdom children of `host`\n    let shadowChildren =\n        root && (/** @type {!ParentNode} */ (root).children || root.childNodes);\n    if (shadowChildren) {\n      for (let i = 0; i < shadowChildren.length; i++) {\n        let c = /** @type {!HTMLElement} */(shadowChildren[i]);\n        this.styleSubtree(c);\n      }\n    } else {\n      // process the lightdom children of `host`\n      let children = wrappedHost.children || wrappedHost.childNodes;\n      if (children) {\n        for (let i = 0; i < children.length; i++) {\n          let c = /** @type {!HTMLElement} */(children[i]);\n          this.styleSubtree(c);\n        }\n      }\n    }\n  }\n  /* Custom Style operations */\n  _revalidateCustomStyleApplyShim(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        this._revalidateApplyShim(s);\n      }\n    }\n  }\n  _applyCustomStyles(customStyles) {\n    for (let i = 0; i < customStyles.length; i++) {\n      let c = customStyles[i];\n      let s = this._customStyleInterface['getStyleForCustomStyle'](c);\n      if (s) {\n        StyleProperties.applyCustomStyle(s, this._documentOwnerStyleInfo.styleProperties);\n      }\n    }\n  }\n  transformCustomStyleForDocument(style) {\n    const cssBuild = StyleUtil.getCssBuild(style);\n    if (cssBuild !== this._documentOwnerStyleInfo.cssBuild) {\n      this._documentOwnerStyleInfo.cssBuild = cssBuild;\n    }\n    if (StyleUtil.isOptimalCssBuild(cssBuild)) {\n      return;\n    }\n    let ast = StyleUtil.rulesForStyle(style);\n    StyleUtil.forEachRule(ast, (rule) => {\n      if (nativeShadow) {\n        StyleTransformer.normalizeRootSelector(rule);\n      } else {\n        StyleTransformer.documentRule(rule);\n      }\n      if (nativeCssVariables && cssBuild === '') {\n        this._ensure();\n        this._applyShim && this._applyShim['transformRule'](rule);\n      }\n    });\n    if (nativeCssVariables) {\n      style.textContent = StyleUtil.toCssText(ast);\n    } else {\n      this._documentOwnerStyleInfo.styleRules['rules'].push(ast);\n    }\n  }\n  _revalidateApplyShim(style) {\n    if (nativeCssVariables && this._applyShim) {\n      let ast = StyleUtil.rulesForStyle(style);\n      this._ensure();\n      this._applyShim['transformRules'](ast);\n      style.textContent = StyleUtil.toCssText(ast);\n    }\n  }\n  getComputedStyleValue(element, property) {\n    let value;\n    if (!nativeCssVariables) {\n      // element is either a style host, or an ancestor of a style host\n      let styleInfo = StyleInfo.get(element) || StyleInfo.get(this._styleOwnerForNode(element));\n      value = styleInfo.styleProperties[property];\n    }\n    // fall back to the property value from the computed styling\n    value = value || window.getComputedStyle(element).getPropertyValue(property);\n    // trim whitespace that can come after the `:` in css\n    // example: padding: 2px -> \" 2px\"\n    return value ? value.trim() : '';\n  }\n  // given an element and a classString, replaces\n  // the element's class with the provided classString and adds\n  // any necessary ShadyCSS static and property based scoping selectors\n  setElementClass(element, classString) {\n    let root = StyleUtil.wrap(element).getRootNode();\n    let classes = classString ? classString.split(/\\s/) : [];\n    let scopeName = root.host && root.host.localName;\n    // If no scope, try to discover scope name from existing class.\n    // This can occur if, for example, a template stamped element that\n    // has been scoped is manipulated when not in a root.\n    if (!scopeName) {\n      var classAttr = element.getAttribute('class');\n      if (classAttr) {\n        let k$ = classAttr.split(/\\s/);\n        for (let i=0; i < k$.length; i++) {\n          if (k$[i] === StyleTransformer.SCOPE_NAME) {\n            scopeName = k$[i+1];\n            break;\n          }\n        }\n      }\n    }\n    if (scopeName) {\n      classes.push(StyleTransformer.SCOPE_NAME, scopeName);\n    }\n    if (!nativeCssVariables) {\n      let styleInfo = StyleInfo.get(element);\n      if (styleInfo && styleInfo.scopeSelector) {\n        classes.push(StyleProperties.XSCOPE_NAME, styleInfo.scopeSelector);\n      }\n    }\n    StyleUtil.setElementClassRaw(element, classes.join(' '));\n  }\n  _styleInfoForNode(node) {\n    return StyleInfo.get(node);\n  }\n  /**\n   * @param {!Element} node\n   * @param {string} scope\n   */\n  scopeNode(node, scope) {\n    StyleTransformer.element(node, scope);\n  }\n  /**\n   * @param {!Element} node\n   * @param {string} scope\n   */\n  unscopeNode(node, scope) {\n    StyleTransformer.element(node, scope, true);\n  }\n  /**\n   * @param {!Node} node\n   * @return {string}\n   */\n  scopeForNode(node) {\n    return getOwnerScope(node);\n  }\n  /**\n   * @param {!Element} node\n   * @return {string}\n   */\n  currentScopeForNode(node) {\n    return getCurrentScope(node);\n  }\n}\n\n/* exports */\n/* eslint-disable no-self-assign */\nScopingShim.prototype['flush'] = ScopingShim.prototype.flush;\nScopingShim.prototype['prepareTemplate'] = ScopingShim.prototype.prepareTemplate;\nScopingShim.prototype['styleElement'] = ScopingShim.prototype.styleElement;\nScopingShim.prototype['styleDocument'] = ScopingShim.prototype.styleDocument;\nScopingShim.prototype['styleSubtree'] = ScopingShim.prototype.styleSubtree;\nScopingShim.prototype['getComputedStyleValue'] = ScopingShim.prototype.getComputedStyleValue;\nScopingShim.prototype['setElementClass'] = ScopingShim.prototype.setElementClass;\nScopingShim.prototype['_styleInfoForNode'] = ScopingShim.prototype._styleInfoForNode;\nScopingShim.prototype['transformCustomStyleForDocument'] = ScopingShim.prototype.transformCustomStyleForDocument;\nScopingShim.prototype['getStyleAst'] = ScopingShim.prototype.getStyleAst;\nScopingShim.prototype['styleAstToString'] = ScopingShim.prototype.styleAstToString;\nScopingShim.prototype['flushCustomStyles'] = ScopingShim.prototype.flushCustomStyles;\nScopingShim.prototype['scopeNode'] = ScopingShim.prototype.scopeNode;\nScopingShim.prototype['unscopeNode'] = ScopingShim.prototype.unscopeNode;\nScopingShim.prototype['scopeForNode'] = ScopingShim.prototype.scopeForNode;\nScopingShim.prototype['currentScopeForNode'] = ScopingShim.prototype.currentScopeForNode;\nScopingShim.prototype['prepareAdoptedCssText'] = ScopingShim.prototype.prepareAdoptedCssText;\n/* eslint-enable no-self-assign */\nObject.defineProperties(ScopingShim.prototype, {\n  'nativeShadow': {\n    get() {\n      return nativeShadow;\n    }\n  },\n  'nativeCss': {\n    get() {\n      return nativeCssVariables;\n    }\n  }\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';\n\nexport default class StyleCache {\n  constructor(typeMax = 100) {\n    // map element name -> [{properties, styleElement, scopeSelector}]\n    this.cache = {};\n    /** @type {number} */\n    this.typeMax = typeMax;\n  }\n\n  _validate(cacheEntry, properties, ownPropertyNames) {\n    for (let idx = 0; idx < ownPropertyNames.length; idx++) {\n      let pn = ownPropertyNames[idx];\n      if (cacheEntry.properties[pn] !== properties[pn]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  store(tagname, properties, styleElement, scopeSelector) {\n    let list = this.cache[tagname] || [];\n    list.push({properties, styleElement, scopeSelector});\n    if (list.length > this.typeMax) {\n      list.shift();\n    }\n    this.cache[tagname] = list;\n  }\n\n  fetch(tagname, properties, ownPropertyNames) {\n    let list = this.cache[tagname];\n    if (!list) {\n      return;\n    }\n    // reverse list for most-recent lookups\n    for (let idx = list.length - 1; idx >= 0; idx--) {\n      let entry = list[idx];\n      if (this._validate(entry, properties, ownPropertyNames)) {\n        return entry;\n      }\n    }\n  }\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ScopingShim from '../src/scoping-shim.js';\nimport {nativeCssVariables, nativeShadow, cssBuild, disableRuntime} from '../src/style-settings.js';\n\n/** @const {ScopingShim} */\nconst scopingShim = new ScopingShim();\n\nlet ApplyShim, CustomStyleInterface;\n\nif (window['ShadyCSS']) {\n  ApplyShim = window['ShadyCSS']['ApplyShim'];\n  CustomStyleInterface = window['ShadyCSS']['CustomStyleInterface'];\n}\n\nwindow.ShadyCSS = {\n  ScopingShim: scopingShim,\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplate(template, elementName, elementExtends) {\n    scopingShim.flushCustomStyles();\n    scopingShim.prepareTemplate(template, elementName, elementExtends)\n  },\n\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplateDom(template, elementName) {\n    scopingShim.prepareTemplateDom(template, elementName);\n  },\n\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @param {string=} elementExtends\n   */\n  prepareTemplateStyles(template, elementName, elementExtends) {\n    scopingShim.flushCustomStyles();\n    scopingShim.prepareTemplateStyles(template, elementName, elementExtends)\n  },\n  /**\n   * @param {!HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleSubtree(element, properties);\n  },\n\n  /**\n   * @param {!HTMLElement} element\n   */\n  styleElement(element) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleElement(element);\n  },\n\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    scopingShim.flushCustomStyles();\n    scopingShim.styleDocument(properties);\n  },\n\n  flushCustomStyles() {\n    scopingShim.flushCustomStyles();\n  },\n\n  /**\n   * @param {Element} element\n   * @param {string} property\n   * @return {string}\n   */\n  getComputedStyleValue(element, property) {\n    return scopingShim.getComputedStyleValue(element, property);\n  },\n\n  nativeCss: nativeCssVariables,\n\n  nativeShadow: nativeShadow,\n\n  cssBuild: cssBuild,\n\n  disableRuntime: disableRuntime,\n};\n\nif (ApplyShim) {\n  window.ShadyCSS.ApplyShim = ApplyShim;\n}\n\nif (CustomStyleInterface) {\n  window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    `@apply` --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\n'use strict';\n\nimport {forEachRule, processVariableAndFallback, rulesForStyle, toCssText, gatherStyleText} from './style-util.js';\nimport {MIXIN_MATCH, VAR_ASSIGN} from './common-regex.js';\nimport {detectMixin} from './common-utils.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\nconst APPLY_NAME_CLEAN = /;\\s*/m;\nconst INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\nconst IMPORTANT = /\\s*!important/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nconst MIXIN_VAR_SEP = '_-_';\n\n/**\n * @typedef {!Object<string, string>}\n */\nlet PropertyEntry; // eslint-disable-line no-unused-vars\n\n/**\n * @typedef {!Object<string, boolean>}\n */\nlet DependantsEntry; // eslint-disable-line no-unused-vars\n\n/** @typedef {{\n *    properties: PropertyEntry,\n *    dependants: DependantsEntry\n * }}\n */\nlet MixinMapEntry; // eslint-disable-line no-unused-vars\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    /** @type {!Object<string, !MixinMapEntry>} */\n    this._map = {};\n  }\n  /**\n   * @param {string} name\n   * @param {!PropertyEntry} props\n   */\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    }\n  }\n  /**\n   * @param {string} name\n   * @return {MixinMapEntry}\n   */\n  get(name) {\n    name = name.trim();\n    return this._map[name] || null;\n  }\n}\n\n/**\n * Callback for when an element is marked invalid\n * @type {?function(string)}\n */\nlet invalidCallback = null;\n\n/** @unrestricted */\nclass ApplyShim {\n  constructor() {\n    /** @type {?string} */\n    this._currentElement = null;\n    /** @type {HTMLMetaElement} */\n    this._measureElement = null;\n    this._map = new MixinMap();\n  }\n  /**\n   * return true if `cssText` contains a mixin definition or consumption\n   * @param {string} cssText\n   * @return {boolean}\n   */\n  detectMixin(cssText) {\n    return detectMixin(cssText);\n  }\n\n  /**\n   * Gather styles into one style for easier processing\n   * @param {!HTMLTemplateElement} template\n   * @return {HTMLStyleElement}\n   */\n  gatherStyles(template) {\n    const styleText = gatherStyleText(template.content);\n    if (styleText) {\n      const style = /** @type {!HTMLStyleElement} */(document.createElement('style'));\n      style.textContent = styleText;\n      template.content.insertBefore(style, template.content.firstChild);\n      return style;\n    }\n    return null;\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformTemplate(template, elementName) {\n    if (template._gatheredStyle === undefined) {\n      template._gatheredStyle = this.gatherStyles(template);\n    }\n    /** @type {HTMLStyleElement} */\n    const style = template._gatheredStyle;\n    return style ? this.transformStyle(style, elementName) : null;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformStyle(style, elementName = '') {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @return {StyleNode}\n   */\n  transformCustomStyle(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (rule['selector'] === ':root') {\n        rule['selector'] = 'html';\n      }\n      this.transformRule(rule);\n    })\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {StyleNode} rules\n   * @param {string} elementName\n   */\n  transformRules(rules, elementName) {\n    this._currentElement = elementName;\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentElement = null;\n  }\n  /**\n   * @param {!StyleNode} rule\n   */\n  transformRule(rule) {\n    rule['cssText'] = this.transformCssText(rule['parsedCssText'], rule);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule['selector'] === ':root') {\n      rule['selector'] = ':host > *';\n    }\n  }\n  /**\n   * @param {string} cssText\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  transformCssText(cssText, rule) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, (matchText, propertyName, valueProperty, valueMixin) =>\n      this._produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule));\n    // consume mixins\n    return this._consumeCssProperties(cssText, rule);\n  }\n  /**\n   * @param {string} property\n   * @return {string}\n   */\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = /** @type {HTMLMetaElement} */(document.createElement('meta'));\n      this._measureElement.setAttribute('apply-shim-measure', '');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  /**\n   * Walk over all rules before this rule to find fallbacks for mixins\n   *\n   * @param {!StyleNode} startRule\n   * @return {!Object}\n   */\n  _fallbacksFromPreviousRules(startRule) {\n    // find the \"top\" rule\n    let topRule = startRule;\n    while (topRule['parent']) {\n      topRule = topRule['parent'];\n    }\n    const fallbacks = {};\n    let seenStartRule = false;\n    forEachRule(topRule, (r) => {\n      // stop when we hit the input rule\n      seenStartRule = seenStartRule || r === startRule;\n      if (seenStartRule) {\n        return;\n      }\n      // NOTE: Only matching selectors are \"safe\" for this fallback processing\n      // It would be prohibitive to run `matchesSelector()` on each selector,\n      // so we cheat and only check if the same selector string is used, which\n      // guarantees things like specificity matching\n      if (r['selector'] === startRule['selector']) {\n        Object.assign(fallbacks, this._cssTextToMap(r['parsedCssText']));\n      }\n    });\n    return fallbacks;\n  }\n  /**\n   * replace mixin consumption with variable consumption\n   * @param {string} text\n   * @param {!StyleNode=} rule\n   * @return {string}\n   */\n  _consumeCssProperties(text, rule) {\n    /** @type {Array} */\n    let m = null;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = rule ? this._fallbacksFromPreviousRules(rule) : {};\n      Object.assign(defaults, this._cssTextToMap(textBeforeApply));\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = `${textBeforeApply}${replacement}${textAfterApply}`;\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  /**\n   * produce variable consumption at the site of mixin consumption\n   * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n   * Example:\n   *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n   *\n   * @param {string} mixinName\n   * @param {Object} fallbacks\n   * @return {string}\n   */\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentElement) {\n        mixinEntry.dependants[this._currentElement] = true;\n      }\n      let p, parts, f;\n      const properties = mixinEntry.properties;\n      for (p in properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f.replace(IMPORTANT, ''));\n        }\n        parts.push(')');\n        if (IMPORTANT.test(properties[p])) {\n          parts.push(' !important');\n        }\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  /**\n   * @param {string} property\n   * @param {string} value\n   * @return {string}\n   */\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = this._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  /**\n   * \"parse\" a mixin definition into a map of properties and values\n   * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n   * @param {string} text\n   * @param {boolean=} replaceInitialOrInherit\n   * @return {!Object<string, string>}\n   */\n  _cssTextToMap(text, replaceInitialOrInherit = false) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = sp.slice(1).join(':');\n          if (replaceInitialOrInherit) {\n            value = this._replaceInitialOrInherit(property, value);\n          }\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * @param {MixinMapEntry} mixinEntry\n   */\n  _invalidateMixinEntry(mixinEntry) {\n    if (!invalidCallback) {\n      return;\n    }\n    for (let elementName in mixinEntry.dependants) {\n      if (elementName !== this._currentElement) {\n        invalidCallback(elementName);\n      }\n    }\n  }\n\n  /**\n   * @param {string} matchText\n   * @param {string} propertyName\n   * @param {?string} valueProperty\n   * @param {?string} valueMixin\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = `@apply ${value};`\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties('' + valueMixin, rule);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    // `initial` and `inherit` as properties in a map should be replaced because\n    // these keywords are eagerly evaluated when the mixin becomes CSS Custom Properties,\n    // and would set the variable value, rather than carry the keyword to the `var()` usage.\n    let mixinValues = this._cssTextToMap(mixinAsProperties, true);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = `${matchText};${prefix}`;\n    }\n    return `${prefix}${out.join('; ')};`;\n  }\n}\n\n/* exports */\n/* eslint-disable no-self-assign */\nApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin;\nApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle;\nApplyShim.prototype['transformCustomStyle'] = ApplyShim.prototype.transformCustomStyle;\nApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules;\nApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule;\nApplyShim.prototype['transformTemplate'] = ApplyShim.prototype.transformTemplate;\nApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;\n/* eslint-enable no-self-assign */\nObject.defineProperty(ApplyShim.prototype, 'invalidCallback', {\n  /** @return {?function(string)} */\n  get() {\n    return invalidCallback;\n  },\n  /** @param {?function(string)} cb */\n  set(cb) {\n    invalidCallback = cb;\n  }\n});\n\nexport default ApplyShim;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ApplyShim from '../src/apply-shim.js';\nimport templateMap from '../src/template-map.js';\nimport {getIsExtends, toCssText, elementHasBuiltCss} from '../src/style-util.js';\nimport * as ApplyShimUtils from '../src/apply-shim-utils.js';\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js';\nimport {CustomStyleInterfaceInterface} from '../src/custom-style-interface.js'; // eslint-disable-line no-unused-vars\nimport {nativeCssVariables, nativeShadow, cssBuild, disableRuntime} from '../src/style-settings.js';\n\n/** @const {ApplyShim} */\nconst applyShim = new ApplyShim();\n\nclass ApplyShimInterface {\n  constructor() {\n    /** @type {?CustomStyleInterfaceInterface} */\n    this.customStyleInterface = null;\n    applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n  }\n  ensure() {\n    if (this.customStyleInterface) {\n      return;\n    }\n    if (window.ShadyCSS.CustomStyleInterface) {\n      this.customStyleInterface =\n          /** @type {!CustomStyleInterfaceInterface} */ (\n              window.ShadyCSS.CustomStyleInterface);\n      this.customStyleInterface['transformCallback'] = (style) => {\n        applyShim.transformCustomStyle(style);\n      };\n      this.customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this.customStyleInterface['enqueued']) {\n            this.flushCustomStyles();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplate(template, elementName) {\n    this.ensure();\n    if (elementHasBuiltCss(template)) {\n      return;\n    }\n    templateMap[elementName] = template;\n    let ast = applyShim.transformTemplate(template, elementName);\n    // save original style ast to use for revalidating instances\n    template['_styleAst'] = ast;\n  }\n  flushCustomStyles() {\n    this.ensure();\n    if (!this.customStyleInterface) {\n      return;\n    }\n    let styles = this.customStyleInterface['processStyles']();\n    if (!this.customStyleInterface['enqueued']) {\n      return;\n    }\n    for (let i = 0; i < styles.length; i++ ) {\n      let cs = styles[i];\n      let style = this.customStyleInterface['getStyleForCustomStyle'](cs);\n      if (style) {\n        applyShim.transformCustomStyle(style);\n      }\n    }\n    this.customStyleInterface['enqueued'] = false;\n  }\n  /**\n   * @param {HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    this.ensure();\n    if (properties) {\n      updateNativeProperties(element, properties);\n    }\n    if (element.shadowRoot) {\n      this.styleElement(element);\n      let shadowChildren =\n          /** @type {!ParentNode} */ (element.shadowRoot).children ||\n          element.shadowRoot.childNodes;\n      for (let i = 0; i < shadowChildren.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */(shadowChildren[i]));\n      }\n    } else {\n      let children = element.children || element.childNodes;\n      for (let i = 0; i < children.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */(children[i]));\n      }\n    }\n  }\n  /**\n   * @param {HTMLElement} element\n   */\n  styleElement(element) {\n    this.ensure();\n    let {is} = getIsExtends(element);\n    let template = templateMap[is];\n    if (template && elementHasBuiltCss(template)) {\n      return;\n    }\n    if (template && !ApplyShimUtils.templateIsValid(template)) {\n      // only revalidate template once\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this.prepareTemplate(template, is);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update this element instance\n      let root = element.shadowRoot;\n      if (root) {\n        let style = /** @type {HTMLStyleElement} */(root.querySelector('style'));\n        if (style) {\n          // reuse the template's style ast, it has all the original css text\n          style['__cssRules'] = template['_styleAst'];\n          style.textContent = toCssText(template['_styleAst'])\n        }\n      }\n    }\n  }\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.ensure();\n    this.styleSubtree(document.body, properties);\n  }\n}\n\nif (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {\n  const applyShimInterface = new ApplyShimInterface();\n  let CustomStyleInterface = window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;\n\n  /** @suppress {duplicate} */\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplate(template, elementName, elementExtends) { // eslint-disable-line no-unused-vars\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.prepareTemplate(template, elementName);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplateStyles(template, elementName, elementExtends) {\n      window.ShadyCSS.prepareTemplate(template, elementName, elementExtends);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n    prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLElement} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleSubtree(element, properties);\n    },\n\n    /**\n     * @param {!HTMLElement} element\n     */\n    styleElement(element) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleElement(element);\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleDocument(properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n\n    flushCustomStyles() {\n      applyShimInterface.flushCustomStyles();\n    },\n\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    cssBuild: cssBuild,\n    disableRuntime: disableRuntime,\n  };\n\n  if (CustomStyleInterface) {\n    window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n  }\n}\n\nwindow.ShadyCSS.ApplyShim = applyShim;\n"],"sourceRoot":""}